<section xml:id="s_strings_intro">
    <title>Strings: A First Look</title>
    <p>Let <m>n</m> be a positive integer. Throughout this text, we will use the shorthand notation <m>[n]</m> to denote the <m>n</m>-element set <m>\{1,2,\dots,n\}</m>. Now let <m>X</m> be a set. Then a function <m>s\colon[n]\rightarrow X</m> is also called an <term><m>X</m>-string of length <m>n</m></term><idx><h>string</h></idx>. In discussions of <m>X</m>-strings, it is customary to refer to the elements of <m>X</m> as <term>characters</term><idx><h>characters</h></idx>, while the element <m>s(i)</m> is the <m>i^{\text{th} }</m> character of <m>s</m>. Whenever practical, we prefer to denote a string <m>s</m> by writing <m>s=</m><q><m>x_1x_2x_3\dots x_n</m></q>, rather than the more cumbersome notation <m>s(1)=x_1</m>, <m>s(2)=x_2</m>, <ellipsis />, <m>s(n)=x_n</m>.
    </p>

    <p>There are a number of alternatives for the notation and terminology associated with strings. First, the characters in a string <m>s</m> are frequently written using subscripts as <m>s_1,s_2,\dots,s_n</m>, so the <m>i^{\text{th} }</m>-term of <m>s</m> can be denoted <m>s_i</m> rather than <m>s(i)</m>.  Strings are also called <term>sequences</term><idx><h>sequence</h></idx>, especially when <m>X</m> is a set of numbers and the function <m>s</m> is defined by an algebraic rule.  For example, the sequence of odd integers is defined by <m>s_i=2i-1</m>.
    </p>

    <p>Alternatively, strings are called <term>words</term><idx><h>word</h></idx>, the set <m>X</m> is called the <term>alphabet</term><idx><h>alphabet</h></idx> and the elements of <m>X</m> are called <term>letters</term><idx><h>letter</h></idx>. For example, <m>aababbccabcbb</m> is a <m>13</m>-letter word on the <m>3</m>-letter alphabet <m>\{a,b,c\}</m>.
    </p>

    <p>In many computing languages, strings are called <term>arrays</term><idx><h>array</h></idx>.  Also, when the character <m>s(i)</m> is constrained to belong to a subset <m>X_i\subseteq X</m>, a string can be considered as an element of the cartesian product <m>X_1\times X_2\times \dots\times X_n</m>, which is normally viewed as <m>n</m>-tuples of the form <m>(x_1,x_2,\dots,x_n)</m> such that <m>x_i\in X_i</m> for all <m>i\in [n]</m>.
    </p>

    <example xml:id="exa_strings_ga-plate">
        <statement>
            <p>In the state of Georgia, license plates consist of four digits followed by a space followed by three capital letters. The first digit cannot be a<nbsp /><m>0</m>. How many license plates are possible?
            </p>
        </statement>
        <solution>
            <p>Let <m>X</m> consist of the digits <m>\{0,1,2,\dots,9\}</m>, let <m>Y</m> be the singleton set whose only element is a space, and let <m>Z</m> denote the set of capital letters. A valid license plate is just a string from
            <me>
                (X-\{0\})\times X\times X\times X\times Y\times Z\times Z\times Z
            </me>
                so the number of different license plates is <m>9\times10^3\times1\times 26^3=158\,184\,000</m>, since the size of a product of sets is the product of the sets' sizes. We can get a feel for why this is the case by focusing just on the digit part of the string here. We can think about the digits portion as being four blanks that need to be filled. The first blank has <m>9</m> options (the digits <m>1</m> through <m>9</m>). If we focus on just the digit strings beginning with <m>1</m>, one perspective is that they range from <m>1000</m> to <m>1999</m>, so there are <m>1000</m> of them. However, we could also think about there being <m>10</m> options for the second spot, <m>10</m> options for the third spot, and <m>10</m> options for the fourth. Multiplying <m>10\times 10\times 10</m> gives <m>1000</m>. Since our analysis of filling the remaining digit blanks didn't depend on our choice of a <m>1</m> for the first position, we see that each of the <m>9</m> choices of initial digit gives <m>1\, 000</m> strings, for a total of <m>9\,000 = 9\times 10^3</m>.
            </p>
        </solution>
    </example>
    <p>In the case that <m>X=\{0,1\}</m>, an <m>X</m>-string is called a <m>0</m><ndash /><m>1</m> string (also a <term>binary string</term><idx><h>string</h><h>binary</h></idx> or <term>bit string.</term><idx><h>bit string</h><see>string, binary</see></idx>). When <m>X=\{0,1,2\}</m>, an <m>X</m>-string is also called a <term>ternary</term><idx><h>string</h><h>ternary</h></idx> string.
    </p>
    <example>
        <p>A machine instruction in a <m>32</m>-bit operating system is just a bit string of length<nbsp /><m>32</m>. Thus, there are <m>2</m> options for each of <m>32</m> positions to fill, making the number of such strings <m>2^{32} = 4\,294\,967\,296</m>. In general, the number of bit strings of length<nbsp /><m>n</m> is <m>2^n</m>.
        </p>
    </example>

    <example>
        <statement>
            <p>Suppose that a website allows its users to pick their own usernames for accounts, but imposes some restrictions. The first character must be an upper-case letter in the English alphabet. The second through sixth characters can be letters (both upper-case and lower-case allowed) in the English alphabet or decimal digits (<m>0</m><ndash /><m>9</m>). The seventh position must be <sq>@</sq> or <sq>.</sq>. The eighth through twelfth positions allow lower-case English letters, <sq>*</sq>, <sq>%</sq>, and <sq>#</sq>. The thirteenth position must be a digit. How many users can the website accept registrations from?
            </p>
        </statement>
        <solution>
            <p>We can visualize the options by thinking of the <m>13</m> positions in the string as blanks that need to be filled in and putting the options for that blank above. In <xref ref="fig_string-template"  />, we've used U to denote the set of upper-case letters, L for the set of lower-case letters, and D for the set of digits.
            </p>
            <figure xml:id="fig_string-template" >
                <caption>String Template</caption>
                <tabular>
<row><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell>#</cell><cell>#</cell><cell>#</cell><cell>#</cell><cell>#</cell><cell></cell></row>
                <row><cell></cell><cell>D</cell><cell>D</cell><cell>D</cell><cell>D</cell><cell>D</cell><cell></cell><cell>%</cell><cell>%</cell><cell>%</cell><cell>%</cell><cell>%</cell><cell></cell></row>
                <row><cell></cell><cell>L</cell><cell>L</cell><cell>L</cell><cell>L</cell><cell>L</cell><cell>.</cell><cell>*</cell><cell>*</cell><cell>*</cell><cell>*</cell><cell>*</cell><cell></cell></row>
                <row><cell>U</cell><cell>U</cell><cell>U</cell><cell>U</cell><cell>U</cell><cell>U</cell><cell>@</cell><cell>L</cell><cell>L</cell><cell>L</cell><cell>L</cell><cell>L</cell><cell>D</cell></row>
                <row bottom="minor"><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell><cell></cell></row>
                <row><cell>26</cell><cell>62</cell><cell>62</cell><cell>62</cell><cell>62</cell><cell>62</cell><cell>2</cell><cell>29</cell><cell>29</cell><cell>29</cell><cell>29</cell><cell>29</cell><cell>10</cell></row>
                </tabular>
            </figure>
            <p>Below each position in the string, we've written the number of options for that position. (For example, there are 62 options for the second position, since there are <m>52</m> letters once both cases are accounted for and <m>10</m> digits. We then multiply these possibilities together, since each choice is independent of the others. Therefore, we have
            <me>
                26\times 62^5 \times 2 \times 29^5\times 10 = 
                9\,771\,287\,250\,890\,863\,360
            </me>
                total possible usernames.
            </p>
        </solution>
    </example>
</section>
