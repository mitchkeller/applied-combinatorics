<section xml:id="s_graphs_counting-trees">
    <title>Counting Labeled Trees</title>
    <p>How many trees are there with vertex set <m>[n]=\{1,2,\dots,n\}</m>? Let <m>T_n</m> be this number. For <m>n=1</m>, there is clearly only one tree. Also, for <m>n=2</m>, there is only one tree, which is isomorphic to <m>\bfK_2</m>. In determining <m>T_3</m>, we finally have some work to do; however, there's not much, since all trees on <m>3</m> vertices are isomorphic to <m>\bfP_3</m>. Thus, there are <m>T_3=3</m> <term>labeled trees</term><idx><h>trees</h><h>labeled</h></idx> on <m>3</m> vertices, corresponding to which vertex is the one of degree <m>2</m>. When <m>n=4</m>, we can begin by counting the number of nonisomorphic trees and consider two cases depending on whether the tree has a vertex of degree <m>3</m>. If there is a vertex of degree <m>3</m>, the tree is isomorphic to <m>\bfK_{1,3}</m> or it does not have a vertex of degree three, in which case it is isomorphic to <m>\bfP_4</m>, since there must be precisely two vertices of degree <m>2</m> in such a graph. There are four labelings by <m>[4]</m> for <m>\bfK_{1,3}</m> (choose the vertex of degree three). How many labelings by <m>[4]</m> are there for <m>\bfP_4</m>? There are <m>C(4,2)</m> ways to choose the labels <m>i,j</m> given to the vertices of degree <m>2</m> and two ways to select one of the remaining labels to be made adjacent to <m>i</m>. Thus, there are <m>12</m> ways to label <m>\bfP_4</m> by <m>[4]</m> and so <m>T_4=16</m>.
    </p>

    <p>To this point, it looks like maybe there's a pattern forming. Perhaps it is the case that for all <m>n\geq 1</m>, <m>T_n = n^{n-2}</m>. This is in fact the case, but let's see how it works out for <m>n=5</m> before proving the result in general. What are the nonisomorphic trees on five vertices? Well, there's <m>\bfK_{1,4}</m> and <m>\bfP_5</m> for sure, and there's also the third tree shown in <xref ref="fig_trees-5verts"  />. After thinking for a minute or two, you should be able to convince yourself that this is all of the possibilities. How many labelings by <m>[5]</m> does each of these have? There are <m>5</m> for <m>\bfK_{1,4}</m> since there are <m>5</m> ways to choose the vertex of degree <m>4</m>. For <m>\bfP_5</m>, there are <m>5</m> ways to choose the middle vertex of the path, <m>C(4,2)=6</m> ways to label the two remaining vertices of degree <m>2</m> once the middle vertex is labeled, and then <m>2</m> ways to label the vertices of degree <m>1</m>. This gives <m>60</m> labelings. For the last tree, there are <m>5</m> ways to label the vertex of degree <m>3</m>, <m>C(4,2)=6</m> ways to label the two leaves adjacent to the vertex of degree <m>3</m>, and <m>2</m> ways to label the remaining two vertices, giving <m>60</m> labelings. Therefore, <m>T_5=125=5^3=5^{5-2}</m>.
    </p>
    <figure xml:id="fig_trees-5verts" >
        <caption>The nonisomorphic trees on <m>n=5</m> vertices</caption>
        <image width="75%" source="trees-5verts" />
    </figure>
    <p>It turns out that we are in fact on the right track, and we will now set out to prove the following:
    </p>

    <theorem xml:id="thm_cayley">
        <title>Cayley's Formula</title>
        <idx><h>Cayley's formula</h></idx>
        <statement>
            <p>The number <m>T_n</m> of labeled trees on <m>n</m> vertices is <m>n^{n-2}</m>.
            </p>
        </statement>
    </theorem>

    <p>This result is usually referred to as Cayley's Formula, although equivalent results were proven earlier by James J.<nbsp />Sylvester (1857) and Carl W.<nbsp />Borchardt (1860). The reason that Cayley's name is most often affixed to this result is that he was the first to state and prove it in graph theoretic terminology (in 1889). (Although one could argue that Cayley really only proved it for <m>n=6</m> and then claimed that it could easily be extended for all other values of <m>n</m>, and whether such an extension can actually happen is open to some debate.) Cayley's Formula has many different proofs, most of which are quite elegant. If you're interested in presentations of several proofs, we encourage you to read the chapter on Cayley's Formula in <pubtitle>Proofs from THE BOOK</pubtitle> by Aigner, Ziegler, and Hofmann, which contains four different proofs, all using different proof techniques. Here we give a fifth proof, due to Pr&#xfc;fer and published in 1918. Interestingly, even though Pr&#xfc;fer's proof came after much of the terminology of graph theory was established, he seemed unaware of it and worked in the context of permutations and his own terminology, even though his approach clearly includes the ideas of graph theory. We will use a recursive technique in order to find a bijection between the set of labeled trees on <m>n</m> vertices and a natural set of size <m>n^{n-2}</m>, the set of strings of length <m>n-2</m> where the symbols in the string come from <m>[n]</m>.
    </p>

    <p>We define a recursive algorithm that takes a tree <m>\bfT</m> on <m>k\geq 2</m> vertices labeled by elements of a set <m>S</m> of positive integers of size <m>k</m> and returns a string of length <m>k-2</m> whose symbols are elements of <m>S</m>. (The set <m>S</m> will usually be <m>[k]</m>, but in order to define a recursive procedure, we need to allow that it be an arbitrary set of <m>k</m> positive integers.) This string is called the <term>Pr&#xfc;fer code</term><idx><h>Pr&#xfc;fer code</h></idx> of the tree <m>\bfT</m>. Let <m>\prufer(\bfT)</m> denote the Pr&#xfc;fer code of the tree <m>\bfT</m>, and if <m>v</m> is a leaf of <m>\bfT</m>, let <m>\bfT-v</m> denote the tree obtained from <m>\bfT</m> by removing <m>v</m> (<ie />, the subgraph induced by all the other vertices). We can then define <m>\prufer(\bfT)</m> recursively by the following procedure.
                  <ol>
        <li><p>If <m>\bfT\cong \bfK_2</m>, return the empty string.</p></li>
        <li><p>Else, let <m>v</m> be the leaf of <m>\bfT</m> with the smallest label
        and let <m>u</m> be its unique neighbor. Let <m>i</m> be the label of
        <m>u</m>. Return <m>(i,\prufer(\bfT-v))</m>.</p></li>
    
                  </ol>
                </p>
    <example xml:id="ex_prufer-code">
        <p>Before using Pr&#xfc;fer codes to prove Cayley's Formula, let's take a moment to make sure we understand how they are computed given a tree. Consider the <m>9</m>-vertex tree <m>\bfT</m> in <xref ref="fig_prufer-code"  />.
        </p>
        <figure xml:id="fig_prufer-code" >
            <caption>A labeled <m>9</m>-vertex tree</caption>
            <image>
                <latex-image><![CDATA[\begin{overpic}{images/tree-9verts}
                \put(46,2){\(1\)}
                \put(21,21){\(2\)}
                \put(62,14.5){\(3\)}
                \put(36.8,14.5){\(4\)}
                \put(2,2){\(5\)}
                \put(9,12){\(6\)}
                \put(90,12){\(7\)}
                \put(27.5,5.5){\(8\)}
                \put(77.3,21){\(9\)}
                \end{overpic}]]></latex-image>
            </image>

        </figure>
        <p>How do we compute <m>\prufer(\bfT)</m>? Since <m>\bfT</m> has more than two vertices, we use the second step and find that <m>v</m> is the vertex with label <m>2</m> and <m>u</m> is the vertex with label <m>6</m>, so <m>\prufer(\bfT)=(6,\prufer(\bfT-v))</m>. The graph <m>\bfT-v</m> is shown in <xref ref="fig_prufer-code-delete1"  />.
        </p>
        <figure xml:id="fig_prufer-code-delete1" >
            <caption>The tree <m>\bfT-v</m></caption>
            <image>
                <latex-image><![CDATA[\begin{overpic}{images/tree-8verts}
                \put(46,2){\(1\)}
                \put(62,14.5){\(3\)}
                \put(36.8,14.5){\(4\)}
                \put(2,2){\(5\)}
                \put(9,12){\(6\)}
                \put(90,12){\(7\)}
                \put(27.5,5.5){\(8\)}
                \put(77.3,21){\(9\)}
                \end{overpic}]]></latex-image>
            </image>

        </figure>
        <p>The recursive call <m>\prufer(\bfT-v)</m> returns <m>(6,\prufer(\bfT-v-v'))</m>, where <m>v'</m> is the vertex labeled <m>5</m>. Continuing recursively, the next vertex deleted is <m>6</m>, which appends a <m>4</m> to the string. Then <m>7</m> is deleted, appending <m>3</m>. Next <m>8</m> is deleted, appending <m>1</m>. This is followed by the deletion of <m>1</m>, appending <m>4</m>. Finally <m>4</m> is deleted, appending <m>3</m>, and the final recursive call has the subtree isomorphic to <m>\bfK_2</m> with vertices labeled <m>3</m> and <m>9</m>, and an empty string is returned. Thus, <m>\prufer(\bfT)=6643143</m>.
        </p>
    </example>
    <p>
        We're now prepared to give a proof of Cayley's Formula.
    </p>

    <proof>
        <p>It is clear that <m>\prufer(\bfT)</m> takes an <m>n</m>-vertex labeled tree with labels from <m>[n]</m> and returns a string of length <m>n-2</m> whose symbols are elements of <m>[n]</m>. What we have yet to do is determine a way to take such a string and construct an <m>n</m>-vertex labeled tree from it. If we can find such a construction, we will have a bijection between the set <m>\mathcal{T}_n</m> of labeled trees on <m>n</m> vertices and the set of strings of length <m>n-2</m> whose symbols come from <m>[n]</m>, which will imply that <m>T_n=n^{n-2}</m>.
        </p>

        <p>First, let's look at how <m>\prufer(\bfT)</m> behaves. What numbers actually appear in the Pr&#xfc;fer code? The numbers that appear in the Pr&#xfc;fer code are the labels of the <em>nonleaf</em> vertices of <m>\bfT</m>. The label of a leaf simply cannot appear, since we always record the label of the <em>neighbor</em> of the leaf we are deleting, and the only way we would delete the neighbor of a leaf is if that neighbor were also a leaf, which can only happen <m>\bfT\cong\bfK_2</m>, in which case <m>\prufer(\bfT)</m> simply returns the empty string. Thus if <m>I\subset [n]</m> is the set of symbols that appear in <m>\prufer(\bfT)</m>, the labels of the leaves of <m>\bfT</m> are precisely the elements of <m>[n]-I</m>.
        </p>

        <p>With the knowledge of which labels belong to the leaves of <m>\bfT</m> in hand, we are ready to use induction to complete the proof. Our goal is to show that if given a string <m>\bfs=s_1s_2\cdots s_{n-2}</m> whose symbols come from a set <m>S</m> of <m>n</m> elements, there is a unique tree <m>\bfT</m> with <m>\prufer(\bfT) = \bfs</m>. If <m>n=2</m>, the only such string is the empty string, so <m>1</m> and <m>2</m> both label leaves and we can construct only <m>\bfK_2</m>. Now suppose we have the result for some <m>m\geq 2</m>, and we try to prove it for <m>m+1</m>. We have a string <m>\bfs = s_1s_2\cdots s_{m-1}</m> with symbols from <m>[m+1]</m>. Let <m>I</m> be the set of symbols appearing in <m>\bfs</m> and let <m>k</m> be the least element of <m>[m+1]-I</m>. By the previous paragraph, we know that <m>k</m> is the label of a leaf of <m>\bfT</m> and that its unique neighbor is the vertex labeled <m>s_1</m>. The string <m>\bfs'=s_2s_3\cdots s_{m-1}</m> has length <m>m-2</m> and since <m>k</m> does not appear in <m>\bfs</m>, its symbols come from <m>S=[m+1]-\{k\}</m>, which has size <m>m</m>. Thus, by induction, there is a unique tree <m>\bfT'</m> whose Pr&#xfc;fer code is <m>\bfs'</m>. We form <m>\bfT</m> from <m>\bfT'</m> by attaching a leaf with label <m>k</m> to the vertex of <m>\bfT'</m> with label <m>s_1</m> and have a tree of the desired type.
        </p>
    </proof>

    <example xml:id="ex_prufer-code-reverse">
            <p>
                We close this section with an example of how to take a Pr&#xfc;fer code and use it to construct a labeled tree. Consider the string <m>\bfs=75531</m> as a Pr&#xfc;fer code. Then the tree <m>\bfT</m> corresponding to <m>\bfs</m> has <m>7</m> vertices, and its leaves are labeled <m>2</m>, <m>4</m>, and <m>6</m>. The inductive step in our proof attaches the vertex labeled <m>2</m> to the vertex labeled <m>7</m> in the tree <m>\bfT'</m> with Pr&#xfc;fer code <m>5531</m> and vertex labels <m>\{1,3,4,5,6,7\}</m>, since <m>2</m> is used to label the last vertex added. What are the leaves of <m>\bfT'</m>? The symbols in <m>\{4,6,7\}</m> do not appear in <m>5531</m>, so they must be the labels of leaves, and the construction says that we would attach the vertex labeled <m>4</m> to the vertex labeled <m>5</m> in the tree we get by induction. In <xref ref="tab_prufer-code-reverse"  />, we show how this recursive process continues.
            </p>
            <figure xml:id="tab_prufer-code-reverse" >
                <caption>Turning the Pr&#xfc;fer code <m>75531</m> into a labeled tree</caption>
                <tabular>
                    <row><cell>Pr&#xfc;fer code</cell><cell>Label set</cell><cell>Edge added</cell></row>
                    <row><cell>75531</cell><cell><m>\{1,2,3,4,5,6,7\}</m></cell><cell>2<ndash />7</cell></row>
                    <row><cell>5531</cell><cell><m>\{1,3,4,5,6,7\}</m></cell><cell>4<ndash />5</cell></row>
                    <row><cell>531</cell><cell><m>\{1,3,5,6,7\}</m></cell><cell>6<ndash />5</cell></row>
                    <row><cell>31</cell><cell><m>\{1,3,5,7\}</m></cell><cell>5<ndash />3</cell></row>
                    <row><cell>1</cell><cell><m>\{1,3,7\}</m></cell><cell>3<ndash />1</cell></row>
                    <row><cell>(empty string)</cell><cell><m>\{1,7\}</m></cell><cell>1<ndash />7</cell></row>
                </tabular>
            </figure>
            <p>We form each row from the row above it by removing the first label used on the edge added from the label set and removing the first symbol from the Pr&#xfc;fer code. Once the Pr&#xfc;fer code becomes the empty string, we know that the two remaining labels must be the labels we place on the ends of <m>\bfK_2</m> to start building <m>\bfT</m>. We then work back up the edge added column, adding a new vertex and the edge indicated. The tree we construct in this manner is shown in <xref ref="fig_prufer-code-reverse"  />.
            </p>
            <figure xml:id="fig_prufer-code-reverse" >
                <caption>The labeled tree with Pr&#xfc;fer code <m>75531</m></caption>
                <image>
<latex-image><![CDATA[\begin{overpic}{images/prufer-code-reverse}
                    \put(2,21){\(4\)}
                    \put(62,14.5){\(1\)}
                    \put(36.8,14.5){\(3\)}
                    \put(2,2){\(6\)}
                    \put(9,12){\(5\)}
                    \put(90,12){\(7\)}
                    \put(93,21){\(2\)}
                    \end{overpic}]]></latex-image>
                </image>

            </figure>
    </example>
</section>
