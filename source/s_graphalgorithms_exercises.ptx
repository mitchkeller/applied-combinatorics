<?xml version="1.0" encoding="UTF-8"?>
<exercises xml:id="s_graphalgorithms_exercises">
    <exercise>
        <statement>
            <p>For the graph in <xref ref="fig_span_tree_ex1" />, use Kruskal's algorithm (<q>avoid cycles</q>) to find a minimum weight spanning tree. Your answer should include a complete list of the edges, indicating which edges you take for your tree and which (if any) you reject in the course of running the algorithm.
            </p>
            <figure xml:id="fig_span_tree_ex1">
                <caption>Find a minimum weight spanning tree</caption>
                <image width="65%" source="span_tree_ex1"/>
            </figure>
        </statement>
    </exercise>
    <exercise>
        <statement>
            <p>For the graph in <xref ref="fig_span_tree_ex1" />, use Prim's algorithm (<q>build tree</q>) to find a minimum weight spanning tree. Your answer should list the edges selected by the algorithm in the order they were selected.</p>
        </statement>
    </exercise>
    <exercise>
        <statement>
            <p>For the graph in <xref ref="fig_span_tree_ex2" />, use Kruskal's algorithm (<q>avoid cycles</q>) to find a minimum weight spanning tree. Your answer should include a complete list of the edges, indicating which edges you take for your tree and which (if any) you reject in the course of running the algorithm.</p>
            <figure xml:id="fig_span_tree_ex2">
                <caption>Find a minimum weight spanning tree</caption>
                <image width="65%" source="span_tree_ex2"/>
            </figure>
        </statement>
    </exercise>
    <exercise>
        <statement>
            <p>For the graph in <xref ref="fig_span_tree_ex2" />, use Prim's algorithm (<q>build tree</q>) to find a minimum weight spanning tree. Your answer should list the edges selected by the algorithm in the order they were selected.</p>
        </statement>
    </exercise>
    <exercise>
        <statement>
            <p>For the graph in <xref ref="fig_span_tree_ex3" />, use Kruskal's algorithm (<q>avoid cycles</q>) to find a minimum weight spanning tree. Your answer should include a complete list of the edges, indicating which edges you take for your tree and which (if any) you reject in the course of running the algorithm.
            </p>
            <figure xml:id="fig_span_tree_ex3">
                <caption>Find a minimum weight spanning tree</caption>
                <image width="45%" source="span_tree_ex3"/>
            </figure>
        </statement>
    </exercise>
    <exercise>
        <statement>
            <p>For the graph in <xref ref="fig_span_tree_ex3" />, use Prim's algorithm (<q>build tree</q>) to find a minimum weight spanning tree. Your answer should list the edges selected by the algorithm in the order they were selected.</p>
        </statement>
    </exercise>
    <exercise>
        <statement>
            <p>A new local bank is being created and will establish a headquarters <m>h</m>, two branches <m>b_1</m> and <m>b_2</m>, and four ATMs <m>a_1</m>, <m>a_2</m>, <m>a_3</m>, and <m>a_4</m>. They need to build a computer network such that the headquarters, branches, and ATMs can all intercommunicate. Furthermore, they will need to be networked with the Federal Reserve Bank of Atlanta, <m>f</m>. The costs of the feasible network connections (in units of $10,000) are listed below:
            
            <md>
                <mrow>  h f \amp  \quad 80 \amp 
                h b_1 \amp  \quad 10\amp  h b_2 \amp  \quad 20\amp 
                b_1 b_2 \amp  \quad 8</mrow>
                <mrow>  f b_1 \amp  \quad 12\amp 
                f a_1 \amp  \quad 20\amp  b_1 a_1 \amp  \quad 3\amp 
                a_1 a_2 \amp  \quad 13</mrow>
                <mrow>  h a_2 \amp  \quad 6\amp 
                b_2 a_2 \amp  \quad 9\amp  b_2 a_3 \amp  \quad 40\amp 
                a_1 a_4 \amp  \quad 3</mrow>
                <mrow>  a_3 a_4 \amp \quad 6</mrow>
            </md>
            
            The bank wishes to minimize the cost of building its network (which must allow for connection, possibly routed through other nodes, from each node to each other node), however due to the need for high-speed communication, they <alert>must</alert> pay to build the connection from <m>h</m> to <m>f</m> as well as the connection from <m>b_2</m> to <m>a_3</m>. Give a list of the connections the bank should establish in order to minimize their total cost, subject to this constraint. Be sure to explain how you selected the connections and how you know the total cost is minimized.</p>
        </statement>
    </exercise>
    <exercise>
        <statement>
            <p>A disconnected weighted graph obviously has no spanning trees. However, it is possible to find a spanning forest of minimum weight in such a graph. Explain how to modify both Kruskal's algorithm and Prim's algorithm to do this.</p>
        </statement>
    </exercise>
    <exercise>
        <statement>
            <p>Prove
            <xref ref="prop_graphalgorithms_spanforest"  />.</p>
        </statement>
    </exercise>
    <exercise>
        <statement>
            <p>In the paper where Kruskal's algorithm first appeared, he considered the algorithm a route to a nicer proof that in a connected weighted graph with no two edges having the same weight, there is a <em>unique</em> minimum weight spanning tree. Prove this fact using Kruskal's algorithm.</p>
        </statement>
    </exercise>
    <exercise>
        <statement>
            <p>Use Dijkstra's algorithm to find the distance from <m>a</m> to each other vertex in the digraph shown in <xref ref="fig_graphalgorithms_dijkstra_ex1" /> and a directed path of that length.
            </p>
            <figure xml:id="fig_graphalgorithms_dijkstra_ex1">
                <caption>A directed graph</caption>
                <image width="65%" source="dijkstra_ex1"/>
            </figure>
        </statement>
    </exercise>
    <exercise>
        <statement>
            <p><xref ref="tab_digraph1"  /> contains the length of the directed edge <m>(x,y)</m> in the intersection of <em>row</em> <m>x</m> and <em>column</em> <m>y</m> in a digraph with vertex set <m>\{a,b,c,d,e,f\}</m>. For example, <m>w(b,d)=21</m>. (On the other hand, <m>w(d,b)=10</m>.) Use this data and Dijkstra's algorithm to find the distance from <m>a</m> to each of the other vertices and a directed path of that length from <m>a</m>.
            </p>
            <figure xml:id="tab_digraph1">
                <caption>A digraph represented as a table of data
                </caption>
                <tabular>
                   <col right="minor" /> <col /> <col /><col /><col /><col /><col />
                    <row bottom="minor">
                        <cell><m>w</m></cell>
                        <cell><m>a</m></cell>
                        <cell><m>b</m></cell>
                        <cell><m>c</m></cell>
                        <cell><m>d</m></cell>
                        <cell><m>e</m></cell>
                        <cell><m>f</m></cell>
                    </row>
                    <row>
                        <cell><m>a</m></cell>
                        <cell>0</cell>
                        <cell>12</cell>
                        <cell>8</cell>
                        <cell>43</cell>
                        <cell>79</cell>
                        <cell>35</cell>
                    </row>

                    <row>
                        <cell><m>b</m></cell>
                        <cell>93</cell>
                        <cell>0</cell>
                        <cell>18</cell>
                        <cell>21</cell>
                        <cell>60</cell>
                        <cell>33</cell>
                    </row>
                    <row>
                        <cell><m>c</m></cell>
                        <cell>17</cell>
                        <cell>3</cell>
                        <cell>0</cell>
                        <cell>37</cell>
                        <cell>50</cell>
                        <cell>30</cell>
                    </row>
                    <row>
                        <cell><m>d</m></cell>
                        <cell>85</cell>
                        <cell>10</cell>
                        <cell>91</cell>
                        <cell>0</cell>
                        <cell>17</cell>
                        <cell>7</cell>
                    </row>
                    <row>
                        <cell><m>e</m></cell>
                        <cell>28</cell>
                        <cell>47</cell>
                        <cell>39</cell>
                        <cell>14</cell>
                        <cell>0</cell>
                        <cell>108</cell>
                    </row>
                    <row>
                        <cell><m>f</m></cell>
                        <cell>31</cell>
                        <cell>7</cell>
                        <cell>29</cell>
                        <cell>73</cell>
                        <cell>20</cell>
                        <cell>0</cell>
                    </row>
                </tabular>
            </figure>
        </statement>
    </exercise>
    <exercise>
        <statement>
            <p>Use Dijkstra's algorithm to find the distance from <m>a</m> to each other vertex in the digraph shown in <xref ref="fig_graphalgorithms_dijkstra_ex2" /> and a directed path of that length.
            </p>
            <figure xml:id="fig_graphalgorithms_dijkstra_ex2">
                <caption>A directed graph</caption>
                <image width="65%" source="dijkstra_ex2"/>
            </figure>
        </statement>
    </exercise>
    <exercise>
        <statement>
            <p><xref ref="tab_digraph2"  /> contains the length of the directed edge <m>(x,y)</m> in the intersection of <em>row</em> <m>x</m> and <em>column</em> <m>y</m> in a digraph with vertex set <m>\{a,b,c,d,e,f\}</m>. For example, <m>w(b,d)=47</m>. (On the other hand, <m>w(d,b)=6</m>.) Use this data and Dijkstra's algorithm to find the distance from <m>a</m> to each of the other vertices and a directed path of that length from <m>a</m>.</p>
            <figure xml:id="tab_digraph2">
                <caption>A digraph represented as a table of data
                </caption>

                <tabular>
                    <col right="minor" /><col /> <col /> <col /><col /><col /><col />
                    <row bottom="minor">
                        <cell><m>w</m></cell>
                    <cell><m>a</m></cell>
                    <cell><m>b</m></cell>
                    <cell><m>c</m></cell>
                    <cell><m>d</m></cell>
                    <cell><m>e</m></cell>
                    <cell><m>f</m></cell>
                </row>
                <row>
                    <cell><m>a</m></cell>
                    <cell>0</cell>
                    <cell>7</cell>
                    <cell>17</cell>
                    <cell>55</cell>
                    <cell>83</cell>
                    <cell>42</cell>
                </row>
                <row>
                    <cell><m>b</m></cell>
                    <cell>14</cell>
                    <cell>0</cell>
                    <cell>13</cell>
                    <cell>47</cell>
                    <cell>27</cell>
                    <cell>17</cell>
                </row>
                <row>
                    <cell><m>c</m></cell>
                    <cell>37</cell>
                    <cell>42</cell>
                    <cell>0</cell>
                    <cell>16</cell>
                    <cell>93</cell>
                    <cell>28</cell>
                </row>
                <row>
                    <cell><m>d</m></cell>
                    <cell>10</cell>
                    <cell>6</cell>
                    <cell>8</cell>
                    <cell>0</cell>
                    <cell>4</cell>
                    <cell>32</cell>
                </row>
                <row>
                    <cell><m>e</m></cell>
                    <cell>84</cell>
                    <cell>19</cell>
                    <cell>42</cell>
                    <cell>8</cell>
                    <cell>0</cell>
                    <cell>45</cell>
                </row>
                <row>
                    <cell><m>f</m></cell>
                    <cell>36</cell>
                    <cell>3</cell>
                    <cell>76</cell>
                    <cell>5</cell>
                    <cell>17</cell>
                    <cell>0</cell>
                </row>
                </tabular>
            </figure>
        </statement>
    </exercise>
    <exercise>
        <statement>
            <p>Give an example of a digraph having an <em>undirected</em> path between each pair of vertices, but having a root vertex <m>r</m> so that Dijkstra's algorithm cannot find a path of finite length from <m>r</m> to some vertex <m>x</m>.</p>
        </statement>
    </exercise>
    <exercise>
        <statement>
            <p>Notice that in our discussion of Dijkstra's algorithm, we required that the edge weights be nonnegative. If the edge weights are lengths and meant to model distance, this makes perfect sense. However, in some cases, it might be reasonable to allow negative edge weights. For example, suppose that a positive weight means there is a cost to travel along the directed edge while a negative edge weight means that you make money for traveling along the directed edge. In this case, a directed path with positive total weight results in paying out to travel it, while one with negative total weight results in a profit.
                  <ol>
                <li><p>Give an example to show that Dijkstra's algorithm does not always find the path of minimum total weight when negative edge weights are allowed.</p></li>
                <li><p>Bob and Xing are considering this situation, and Bob suggests that a little modification to the algorithm should solve the problem. He says that if there are negative weights, they just have to find the smallest (<ie />, most negative weight) and add the absolute value of that weight to every directed edge. For example, if <m>w(x,y)\geq -10</m> for every directed edge <m>(x,y)</m>, Bob is suggesting that they add <m>10</m> to every edge weight. Xing is skeptical, and for good reason. Give an example to show why Bob's modification won't work.</p></li>
            
                  </ol>
                </p>
        </statement>
    </exercise>
</exercises>
