<section xml:id="s_graphs_color">
    <title>Graph Coloring</title>
    <introduction>
        <p>Let's return now to the subject of <xref ref="ex_radiostations"  />, assigning frequencies to radio stations so that they don't interfere. The first thing that we will need to do is to turn the map of radio stations into a suitable graph, which should be pretty natural at this juncture. We define a graph <m>\GVE</m> in which <m>V</m> is the set of radio stations and <m>xy\in E</m> if and only if radio station <m>x</m> and radio station <m>y</m> are within <m>200</m> miles of each other. With this as our model, then we need to assign different frequencies to two stations if their corresponding vertices are joined by an edge. This leads us to our next topic, coloring graphs.
        </p>

        <p>When <m>\GVE</m> is a graph and <m>C</m> is a set of elements called <term>colors</term>, a <term>proper coloring</term><idx><h>coloring</h><h>proper</h></idx> of <m>\bfG</m> is a function <m>\phi:V\to C</m> such that if <m>\phi(x)\neq \phi(y)</m> whenever <m>xy</m> is an edge in <m>\bfG</m>. The least <m>t</m> for which <m>\bfG</m> has a proper coloring using a set <m>C</m> of <m>t</m> colors is called the <term>chromatic number</term><idx><h>chromatic number</h></idx> of <m>\bfG</m> and is denoted <m>\chi(\bfG)</m><notation><usage><m>\chi(\bfG)</m></usage><description>chromatic number of a graph <m>\bfG</m></description></notation>. In <xref ref="fig_graphs_chi4"  />, we show a proper coloring of a graph using <m>5</m> colors. Now we can see that our radio frequency assignment problem is the much-studied question of finding the chromatic number of an appropriate graph.
        </p>
        <figure xml:id="fig_graphs_chi4" >
            <caption>A proper coloring using <m>5</m> colors</caption>
            <image width="65%" source="chi4" />
        </figure>
        <remark>
            <p>Everyone agrees that the graph <m>\bfG</m> in <xref ref="fig_graphs_chi4"  /> has chromatic number at most <m>5</m>. However, there's a bit of debate going on about if <m>\chi(\bfG)=5</m>. Bob figures the authors would not have used five colors if they didn't need to. Carlos says he's glad they're having the discussion, since all having a proper coloring does is provide them with an upper bound on <m>\chi(\bfG)</m>. Bob sees that the graph has a vertex of degree <m>5</m> and claims that must mean <m>\chi(\bfG)=5</m>. Alice groans and draws a graph with <m>101</m> vertices, one of which has degree <m>100</m>, but with chromatic number <m>2</m>. Bob is shocked, but agrees with her. Xing wonders if the fact that the graph does not contain a <m>\bfK_3</m> has any bearing on the chromatic number. Dave's in a hurry to get to the gym, but on his way out the door he says they can get a proper <m>4</m>-coloring pretty easily, so <m>\chi(\bfG)\leq 4</m>. The rest decide it's time to keep reading.
                  <ul>
                <li><p>What graph did Alice draw that shocked Bob?</p></li>
                <li><p>What changes did Dave make to the coloring in <xref ref="fig_graphs_chi4"  /> to get a proper coloring using four colors?</p></li>
            
                  </ul>
                </p>
        </remark>
    </introduction>


    <subsection>
        <title>Bipartite Graphs</title>
        <p>A graph <m>\GVE</m> with <m>\chi(\bfG)\le 2</m> is called a <term><m>2</m>-colorable graph</term><idx><h>graph</h><h><m>2</m>-colorable</h></idx>. A couple of minutes of reflection should convince you that for <m>n\geq 2</m>, the cycle <m>\bfC_{2n}</m> with <m>2n</m> vertices is <m>2</m>-colorable. On the other hand, <m>\bfC_3\cong \bfK_3</m> is clearly not <m>2</m>-colorable. Furthermore, no odd cycle <m>\bfC_{2n+1}</m> for <m>n\geq 1</m> is <m>2</m>-colorable. It turns out that the property of containing an odd cycle is the only impediment to being <m>2</m>-colorable, which means that recognizing <m>2</m>-colorable graphs is easy, as the following theorem shows.
        </p>

        <theorem xml:id="thm_graphs_bipartite">
            <statement>
                <p>A graph is <m>2</m>-colorable if and only if it does not contain an odd cycle.
                </p>
            </statement>

            <proof>

                <p>Let <m>\GVE</m> be a <m>2</m>-colorable graph whose coloring function partitions <m>V</m> as <m>A\cup B</m>. Since there are no edges between vertices on the same side of the partition, any cycle in <m>\bfG</m> must alternate vertices between <m>A</m> and <m>B</m>. In order to complete the cycle, therefore, the number of vertices in the cycle from <m>A</m> must be the same as the number from <m>B</m>, implying that the cycle has even length.</p>

                <p>Now suppose that <m>\bfG</m> does not contain an odd cycle. Note that we may assume that <m>\bfG</m> is connected, as each component may be colored individually. The <term>distance</term> <m>d(u,v)</m> between vertices <m>u,v\in V</m> is the length of a shortest path from <m>u</m> to <m>v</m>, and of course <m>d(u,u) = 0</m>. Fix a vertex <m>v_0\in V</m> and define
                <me>A = \{v\in V\colon d(u_0,v)\text{ is even}\}\qquad\text{and}\qquad B = \{v\in V\colon d(v_0,v)\text{ is odd}\}.</me>
                We claim that coloring the vertices of <m>A</m> with color <m>1</m> and the vertices of <m>B</m> with color <m>2</m> is a proper coloring. suppose not. Then without loss of generality, there are vertices <m>x,y\in A</m> such that <m>xy\in E</m>. Since <m>x,y\in A</m>, <m>d(v_0,x)</m> and <m>d(v_0,y)</m> are both even. Let
                <me>v_0,x_1,x_2,\dots,x_n=x</me>
                and
                <me>v_0,y_1,y_2,\dots,y_m= y</me>
                be shortest paths from <m>v_0</m> to <m>x</m> and <m>y</m>, respectively. If <m>x_1\neq y_j</m> for all <m>1\leq i\leq n</m> and <m>1\leq j\leq m</m>, then since <m>m</m> and <m>n</m> are both even,
                <me>v_0,x_1,x_2,\dots,x_n=x,y=y_m,y_{m-1},\dots,y_2,y_1,v_0</me>
                is an odd cycle in <m>\bfG</m>, which is a contradiction. Thus, there must be <m>i,j</m> such that <m>x_i=y_j</m>, and we may take <m>i,j</m> as large as possible. (That is, after <m>x_i=y_j</m>, the two paths do not intersect again.) Thus,
                <me>x_i,x_{i+1},\dots,x_n = x,y=y_m,y_{m-1},\dots,y_j=x_i</me>
                is a cycle in <m>\bfG</m>. How many vertices are there in this cycle? A quick count shows that it has
                <me>n-(i-1)+m-(j-1)-1=n+m-(i+j)+1</me>
                vertices. We know that <m>n</m> and <m>m</m> are even, and notice that <m>i</m> and <m>j</m> are either both even or both odd, since <m>x_i = y_j</m> and the odd-subscripted vertices of our path belong to <m>B</m> while those with even subscripts belong to <m>A</m>. Thus, <m>i+j</m> is even, so <m>n+m-(i+j)+1</m> is odd, giving a contradiction.</p>
        </proof>
        </theorem>
        <p>A graph <m>\bfG</m> is called a <term>bipartite graph</term><idx><h>graph</h><h>bipartite</h></idx> when there is a partition of the vertex <m>V</m> into two sets <m>A</m> and <m>B</m> so that the subgraphs induced by <m>A</m> and <m>B</m> are independent graphs, <ie />, no edge of <m>\bfG</m> has both of its endpoints in <m>A</m> or in <m>B</m>.  Evidently, bipartite graphs are <m>2</m>-colorable. On the other hand, when a <m>2</m>-colorable graph is disconnected, there is more than one way to define a suitable partition of the vertex set into two independent sets.
        </p>

        <p>Bipartite graphs are commonly used as models when there are two distinct types of objects being modeled and connections are only allowed between two objects of different types. For example, on one side, list candidates who attend a career fair and on the other side list the available positions. The edges might naturally correspond to candidate/position pairs which link a person to a responsibility they are capable of handling.
        </p>

        <p>As a second example, a bipartite graph could be used to visualize the languages spoken by a group of students. The vertices on one side would be the students with the languages listed on the other side. We would then have an edge <m>xy</m> when student <m>x</m> spoke language <m>y</m>.  A concrete example of this graph for our favorite group of students is shown in <xref ref="fig_graphs_languages"  />, although Alice isn't so certain there should be an edge connecting Dave and English.
        </p>
        <figure xml:id="fig_graphs_languages" >
            <caption>A bipartite graph</caption>
            <image width="60%" source="languages" />
        </figure>
        <p>One special class of bipartite graphs that bears mention is the class of <term>complete bipartite graphs</term>. The complete bipartite graph <m>\bfK_{m,n}</m> has vertex set <m>V=V_1\cup V_2</m> with <m>|V_1|=m</m> and <m>|V_2|=n</m>. It has an edge <m>xy</m> if and only if <m>x\in V_1</m> and <m>y\in V_2</m>. The complete bipartite graph <m>\bfK_{3,3}</m> is shown in <xref ref="fig_graphs_k33"  />.
        </p>
        <figure xml:id="fig_graphs_k33" >
            <caption>The complete bipartite graph <m>\bfK_{3,3}</m></caption>
            <image width="25%" source="k33_rotated" />
        </figure>
    </subsection>


    <subsection>
        <title>Cliques and Chromatic Number</title>
        <p>A <term>clique</term><idx><h>clique</h></idx> in a graph <m>\GVE</m> is a set <m>K\subseteq V</m> such that the subgraph induced by <m>K</m> is isomorphic to the complete graph <m>\bfK_{|K|}</m>. Equivalently, we can say that every pair of vertices in <m>K</m> are adjacent. The <term>maximum clique size</term><idx><h>clique</h><h>maximum size</h></idx> or <term>clique number</term><idx><h>clique number</h></idx> of a graph <m>\bfG</m>, denoted <m>\omega(\bfG)</m><notation><usage><m>\omega(\bfG)</m></usage><description>clique number of <m>\bfG</m></description></notation>, is the largest <m>t</m> for which there exists a clique <m>K</m> with <m>|K|=t</m>. For example, the graph in <xref ref="fig_graphs_eulerexample"  /> has clique number <m>4</m> while the graph in <xref ref="fig_graphs_chi4"  /> has maximum clique size<nbsp /><m>2</m>.
        </p>

        <p>For every graph <m>\bfG</m>, it is obvious that <m>\chi(\bfG)\ge \omega(\bfG)</m>. On the other hand, the inequality may be far from tight. Before showing how bad it can be, we need to introduce a more general version of the <xref ref="prop_pigeon" text="title" />. Consider a function <m>f\colon X\to Y</m> with <m>|X| = 2|Y|+1</m>. Since <m>|X|>|Y|</m>, the Pigeon Hole Principle as stated in <xref ref="prop_pigeon"  /> only tells us that there are distinct <m>x,x'\in X</m> with <m>f(x)=f(x')</m>. However, we can say more here. Suppose that each element of <m>Y</m> has at most two elements of <m>X</m> mapped to it. Then adding up the number of elements of <m>X</m> based on how many are mapped to each element of <m>Y</m> would only allow <m>X</m> to have (at most) <m>2|Y|</m> elements. Thus, there must be <m>y\in Y</m> so that there are three distinct elements <m>x,x',x''\in X</m> with <m>f(x)=f(x')=f(x'')=y</m>. This argument generalizes to give the following version of the Pigeon Hole Principle:
        </p>

        <proposition xml:id="prop_graphs_pigeon-general">
            <title>Generalized Pigeon Hole Principle</title>
            <idx><h>pigeon hole principle</h><h>generalized</h></idx>
            <statement>
                <p>If <m>f\colon X\to Y</m> is a function and <m>|X|\geq (m-1)|Y|+1</m>, then there exists an element <m>y\in Y</m> and distinct elements <m>x_1,\dots,x_m \in X</m> so that <m>f(x_i)=y</m> for <m>i=1,\dots,m</m>.
                </p>
            </statement>
        </proposition>

        <p>We are now prepared to present the following proposition showing that clique number and chromatic number need not be close at all. We give two proofs. The first is the work of J. Kelly and L. Kelly, while the second is due to J. Mycielski.
        </p>

        <proposition xml:id="prop_triangle-free">
            <statement>
                <p>For every <m>t\ge3</m>, there exists a graph <m>\bfG_t</m> so that <m>\chi(\bfG_t)=t</m> and <m>\omega(\bfG_t)=2</m>.
                </p>
            </statement>
        <proof>
            <p>We proceed by induction on <m>t</m>. For <m>t=3</m>, we take <m>\bfG_3</m> to be the cycle <m>\bfC_5</m> on five vertices. Now assume that for some <m>t\ge3</m>, we have determined the graph <m>\bfG_t</m>. Suppose that <m>\bfG_t</m> has <m>n_t</m> vertices. Label the vertices of <m>\bfG_t</m> as <m>x_1,x_2,\dots,x_{n_t}</m>. Construct <m>\bfG_{t+1}</m> as follows. Begin with an independent set <m>I</m> of cardinality <m>t(n_t-1)+1</m>. For every subset <m>S</m> of <m>I</m> with <m>|S|=n_t</m>, label the elements of <m>S</m> as <m>y_1,y_2,\dots,y_{n_t}</m>. For this particular <m>n_t</m>-element subset attach a copy of <m>\bfG_t</m> with <m>y_i</m> adjacent to <m>x_i</m> for <m>i=1,2,\dots,n_t</m>. Vertices in copies of <m>\bfG_t</m> for distinct <m>n_t</m>-element subsets of <m>I</m> are nonadjacent, and a vertex in <m>I</m> has at most one neighbor in a particular copy of <m>\bfG_t</m>.
            </p>

                <p>To see that <m>\omega(\bfG_{t+1})=2</m>, it will suffice to argue that <m>\bfG_{t+1}</m> contains no triangle (<m>\bfK_3</m>). Since <m>\bfG_t</m> is triangle-free, any triangle in <m>\bfG_{t+1}</m> must contain a vertex of <m>I</m>. Since none of the vertices of <m>I</m> are adjacent, any triangle in <m>\bfG_{t+1}</m> contains only one point of <m>I</m>. Since each vertex of <m>I</m> is adjacent to at most one vertex of any fixed copy of <m>\bfG_t</m>, if <m>y\in I</m> is part of a triangle, the other two vertices must come from distinct copies of <m>\bfG_t</m>. However, vertices in different copies of <m>\bfG_t</m> are not adjacent, so <m>\omega(\bfG_{t+1})=2</m>. Notice that <m>\chi(\bfG_{t+1})\ge t</m> since <m>\bfG_{t+1}</m> contains <m>\bfG_t</m>. On the other hand, <m>\chi(\bfG_{t+1})\le t+1</m> since we may use <m>t</m> colors on the copies of <m>\bfG_t</m> and a new color on the independent set <m>I</m>. To see that <m>\chi(\bfG_{t+1})=t+1</m>, observe that if we use only <m>t</m> colors, then by the generalized Pigeon Hole Principle, there is an <m>n_t</m>-element subset of <m>I</m> in which all vertices have the same color. Then this color cannot be used in the copy of <m>\bfG_t</m> which is attached to that <m>n_t</m>-element subset.
                </p>
            </proof>

        <proof>
            <p>We again start with <m>\bfG_3</m> as the cycle <m>\bfC_5</m>. As before we assume that we have constructed for some <m>t\ge3</m> a graph <m>\bfG_t</m> with <m>\omega(\bfG_t)=2</m> and <m>\chi(\bfG_t) = t</m>. Again, label the vertices of <m>\bfG_t</m> as <m>x_1,x_2,\dots,x_{n_t}</m>. To construct <m>\bfG_{t+1}</m>, we now start with an independent set <m>I</m>, but now <m>I</m> has only <m>n_t</m> points, which we label as <m>y_1,y_2,\dots,y_{n_t}</m>. We then add a copy of <m>\bfG_t</m> with <m>y_i</m> adjacent to <m>x_j</m> if and only if <m>x_i</m> is adjacent to <m>x_j</m>. Finally, attach a new vertex <m>z</m> adjacent to all vertices in <m>I</m>.
            </p>

            <p>Clearly, <m>\omega(\bfG_{t+1})=2</m>. Also, <m>\chi(\bfG_{t+1})\ge t</m>, since it contains <m>\bfG_t</m> as a subgraph.  Furthermore, <m>\chi(\bfG_{t+1})\leq t+1</m>, since we can color <m>\bfG_t</m> with colors from <m>\{1,2,\dots,t\}</m>, use color <m>t+1</m> on the independent set <m>I</m>, and then assign color<nbsp /><m>1</m> to the new vertex <m>z</m>. We claim that in fact <m>\chi(\bfG_{t+1})=t+1</m>. Suppose not. Then we must have <m>\chi(\bfG_{t+1})=t</m>. Let <m>\phi</m> be a proper coloring of <m>\bfG_{t+1}</m>. Without loss of generality, <m>\phi</m> uses the colors in <m>\{1,2,\dots,t\}</m> and <m>\phi</m> assigns color<nbsp /><m>t</m> to <m>z</m>.  Then consider the nonempty set <m>S</m> of vertices in the copy of <m>\bfG_t</m> to which <m>\phi</m> assigns color <m>t</m>. For each <m>x_i</m> in <m>S</m>, change the color on <m>x_i</m> so that it matches the color assigned to <m>y_i</m> by <m>\phi</m>, which cannot be <m>t</m>, as <m>z</m> is colored <m>t</m>. What results is a proper coloring of the copy of <m>\bfG_t</m> with only <m>t-1</m> colors since <m>x_i</m> and <m>y_i</m> are adjacent to the same vertices of the copy of <m>\bfG_t</m>. The contradiction shows that <m>\chi(\bfG_{t+1})=t+1</m>, as claimed.
            </p>
        </proof>
        </proposition>

        <p>Since a <m>3</m>-clique looks like a triangle, <xref ref="prop_triangle-free"  /> is often stated as <q>There exist triangle-free graphs with large chromatic number.</q> As an illustration of the construction in the proof of Mycielski, we again refer to <xref ref="fig_graphs_chi4"  />. The graph shown is <m>\bfG_4</m>. We will return to the topic of graphs with large chromatic number in <xref ref="s_ramsey_girth"  /> where we show that are there graphs with large chromatic number which lack not only cliques of more than two vertices but also <em>cycles</em> of fewer than <m>g</m> vertices for <em>any</em> value of <m>g</m>. In other words, there is a graph <m>\bfG</m> with <m>\chi(\bfG)=10^6</m> but no cycle with fewer than <m>10^{10}</m> vertices!
        </p>
    </subsection>


    <subsection>
        <title>Can We Determine Chromatic Number?</title>
        <p>Suppose you are given a graph <m>\bfG</m>. It's starting to look like it is not easy to find an algorithm that answers the question <q>Is <m>\chi(\bfG)\leq t</m>?</q> It's easy to verify a certificate (a proper coloring using at most <m>t</m> colors), but how could you even find a proper coloring, not to mention one with the fewest number of colors?  Similarly for the question <q>Is <m>\omega(\bfG)\geq k</m>?</q>, it is easy to verify a certificate. However, finding a maximum clique appears to be a very hard problem. Of course, since the gap between <m>\chi(\bfG)</m> and <m>\omega(\bfG)</m> can be arbitrarily large, being able to find one value would not (generally) help in finding the value of the other. No polynomial-time algorithm is known for either of these problems, and many believe that no such algorithm exists. In this subsection, we look at one approach to finding chromatic number and see a case where it does work efficiently.
        </p>

        <p>A very na&#xef;ve algorithmic way to approach graph coloring is the First Fit, or <q>greedy</q>, algorithm. For this algorithm, fix an ordering of the vertex set <m>V=\{v_1,v_2,\dots v_n\}</m>. We define the coloring function <m>\phi</m> one vertex at a time in increasing order of subscript. We begin with <m>\phi(v_1)=1</m> and then we define <m>\phi(v_{i+1})</m> (assuming vertices <m>v_1,v_2,\dots,v_i</m> have been colored) to be the least positive integer color that has not already been used on any of its neighbors in the set <m>\{v_1,\dots v_i\}</m>.
        </p>
        <figure xml:id="fig_k44minus" >
            <caption>Two orderings of the vertices of a bipartite graph.</caption>
            <image width="70%">
                <latex-image><![CDATA[
\begin{picture}(0,0)
    \put(0,76){\raisebox{0mm}[0mm][0mm]{\makebox[0mm]{$v_1$}}}%
    \put(0,52){\raisebox{0mm}[0mm][0mm]{\makebox[0mm]{$v_3$}}}%
    \put(0,29){\raisebox{0mm}[0mm][0mm]{\makebox[0mm]{$v_5$}}}%
    \put(0,7){\raisebox{0mm}[0mm][0mm]{\makebox[0mm]{$v_7$}}}%
    \put(65,76){\raisebox{0mm}[0mm][0mm]{\makebox[0mm]{$v_2$}}}%
    \put(65,52){\raisebox{0mm}[0mm][0mm]{\makebox[0mm]{$v_4$}}}%
    \put(65,29){\raisebox{0mm}[0mm][0mm]{\makebox[0mm]{$v_6$}}}%
    \put(65,7){\raisebox{0mm}[0mm][0mm]{\makebox[0mm]{$v_8$}}}%
    \put(113,76){\raisebox{0mm}[0mm][0mm]{\makebox[0mm]{$v_1$}}}%
    \put(113,52){\raisebox{0mm}[0mm][0mm]{\makebox[0mm]{$v_2$}}}%
    \put(113,29){\raisebox{0mm}[0mm][0mm]{\makebox[0mm]{$v_3$}}}%
    \put(113,7){\raisebox{0mm}[0mm][0mm]{\makebox[0mm]{$v_4$}}}%
    \put(178,76){\raisebox{0mm}[0mm][0mm]{\makebox[0mm]{$v_5$}}}%
    \put(178,52){\raisebox{0mm}[0mm][0mm]{\makebox[0mm]{$v_6$}}}%
    \put(178,29){\raisebox{0mm}[0mm][0mm]{\makebox[0mm]{$v_7$}}}%
    \put(178,7){\raisebox{0mm}[0mm][0mm]{\makebox[0mm]{$v_8$}}}%
  \end{picture}
\includegraphics{images/k44-M_crop}\hspace{.75in}\includegraphics{images/k44-M_crop}]]>
                </latex-image>
            </image>
        </figure>
        <p><xref ref="fig_k44minus"  /> shows two different orderings of the same graph. <xref ref="ex_graphs_first-fit-color"  /> demonstrates that the ordering of <m>V</m> is vital to the ability of the First Fit algorithm to color <m>\bfG</m> using <m>\chi(\bfG)</m> colors. In general, finding an optimal ordering is just as difficult as coloring <m>\bfG</m>. Thus, this very simple algorithm does not work well in general. However, for some classes of graphs, there is a <q>natural</q> ordering that leads to optimal performance of First Fit. Here is one such example<mdash />one that we will study again in the next chapter in a different context.
        </p>

        <p>Given an indexed family of sets <m>\cgF=\{S_\alpha:\alpha\in V\}</m>, we associate with <m>\cgF</m> a graph <m>\bfG</m> defined as follows. The vertex set of <m>\bfG</m> is the set <m>V</m> and vertices <m>x</m> and <m>y</m> in <m>V</m> are adjacent in <m>\bfG</m> if and only if <m>S_x\cap S_y \neq\emptyset</m>. We call <m>\bfG</m> an <term>intersection graph</term><idx><h>graph</h><h>intersection</h></idx>. It is easy to see that every graph is an intersection graph (<em>Why?</em>), so it makes sense to restrict the sets which belong to <m>\cgF</m>. For example, we call <m>\bfG</m> an <term>interval graph</term><idx><h>graph</h><h>interval</h></idx> if it is the intersection graph of a family of closed intervals of the real line <m>\reals</m>. For example, in <xref ref="fig_graphs_interval-graph"  />, we show a collection of six intervals of the real line on the left. On the right, we show the corresponding interval graph having an edge between vertices <m>x</m> and <m>y</m> if and only if intervals <m>x</m> and <m>y</m> overlap.
        </p>
        <figure xml:id="fig_graphs_interval-graph" >
            <caption>A collection of intervals and its interval graph</caption>
            <image width="75%" source="interval-graph" />
        </figure>

        <theorem xml:id="thm_intgraphcol">
            <statement>
                <p>If <m>\GVE</m> is an interval graph, then <m>\chi(\bfG)=\omega(\bfG)</m>.
                </p>
            </statement>

            <proof>
                <p>For each <m>v\in V</m>, let <m>I(v)=[a_v,b_v]</m> be a closed interval of the real line so that <m>uv</m> is an edge in <m>\bfG</m> if and only if <m>I(u)\cap I(v)\neq\emptyset</m>. Order the vertex set <m>V</m> as <m>\{v_1,v_2,\dots v_n\}</m> such that <m>a_1\leq a_2\leq \cdots \leq a_n</m>. (Ties may be broken arbitrarily.) Apply the First Fit coloring algorithm to <m>\bfG</m> with this ordering on <m>V</m>. Now when the First Fit coloring algorithm colors <m>v_i</m>, all of its neighbors have left end point at most <m>a_i</m>. Since they are neighbors of <m>v_i</m>, however, we know that their right endpoints are all at least <m>a_i</m>. Thus, <m>v_i</m> and its previously-colored neighbors form a clique. Hence, <m>v_i</m> is adjacent to at most <m>\omega(\bfG)-1</m> other vertices that have already been colored, so when the algorithm colors <m>v_i</m>, there will be a color from <m>\{1,2,\dots,\omega(\bfG)\}</m> not already in use on its neighbors. The algorithm will assign <m>v_i</m> the smallest such color. Thus, we never need to use more than <m>\omega(\bfG)</m> colors, so <m>\chi(\bfG)=\omega(\bfG)</m>.
                </p>
            </proof>
        </theorem>
        <p>A graph <m>\bfG</m> is said to be <term>perfect</term><idx><h>graph</h><h>perfect</h></idx> if <m>\chi(\bfH)=\omega(\bfH)</m> for every induced subgraph <m>\bfH</m>. Since an induced subgraph of an interval graph is an interval graph, <xref ref="thm_intgraphcol"  /> shows interval graphs are perfect. The study of perfect graphs originated in connection with the theory of communications networks and has proved to be a major area of research in graph theory for many years now.
        </p>
    </subsection>

</section>
