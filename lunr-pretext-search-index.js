var ptx_lunr_search_style = "textbook";
var ptx_lunr_docs = [
{
  "id": "app-comb-2-3",
  "level": "1",
  "url": "app-comb-2-3.html",
  "type": "Colophon",
  "number": "",
  "title": "Colophon",
  "body": "  "
},
{
  "id": "app-comb-2-4",
  "level": "1",
  "url": "app-comb-2-4.html",
  "type": "Author Biography",
  "number": "",
  "title": "About William T. Trotter",
  "body": " About William T. Trotter  William T. Trotter is Professor Emeritus in the School of Mathematics at Georgia Tech. He was first exposed to combinatorial mathematics through the 1971 Bowdoin Combinatorics Conference which featured an array of superstars of that era, including Gian Carlo Rota, Paul Erdős, Marshall Hall, Herb Ryzer, Herb Wilf, William Tutte, Ron Graham, Daniel Kleitman and Ray Fulkerson. Since that time, he has published more than 120 research papers on graph theory, discrete geometry, Ramsey theory, and extremal combinatorics. Perhaps his best known work is in the area of combinatorics and partially ordered sets, and his 1992 research monograph on this topic has been very influential. (He takes some pride in the fact that this monograph is still in print and copies are being sold in 2016.) He has more than 70 co-authors, but considers his extensive joint work with Graham Brightwell, Stefan Felsner, Peter Fishburn, Hal Kierstead and Endre Szemerèdi as representing his best work. His career includes invited presentations at more than 50 international conferences and more than 30 meetings of professional societies. He was the founding editor of the SIAM Journal on Discrete Mathematics and has served on the Editorial Board of Order since the journal was launched in 1984, and his service includes an eight year stint as Editor-in-Chief. Currently, he serves on the editorial boards of three other journals in combinatorial mathematics.  Still he has his quirks. First, he insists on being called Tom , as Thomas is his middle name, while continuing to sign as William T. Trotter. Second, he has invested time and energy serving five terms as department\/school chair, one at Georgia Tech, two at Arizona State University and two at the University of South Carolina. In addition, he has served as a Vice Provost and as an Assistant Dean. Third, he is fascinated by computer operating systems and is always installing new ones. In one particular week, he put eleven different flavors of Linux on the same machine, interspersed with four complete installs of Windows 7. Incidentally, the entire process started and ended with Windows 7. Fourth, he likes to hit golf balls, not play golf, just hit balls. Without these diversions, he might even have had enough time to settle the Riemann hypothesis.  He has had eleven Ph.D. students, one of which is now his co-author on this text.  "
},
{
  "id": "app-comb-2-5",
  "level": "1",
  "url": "app-comb-2-5.html",
  "type": "Author Biography",
  "number": "",
  "title": "About Mitchel T. Keller",
  "body": " About Mitchel T. Keller  Mitchel T. Keller is a super-achiever (this description is written by WTT) extraordinaire from North Dakota. As a graduate student at Georgia Tech, he won a lengthy list of honors and awards, including a VIGRE Graduate Fellowship, an IMPACT Scholarship, a John R. Festa Fellowship and the 2009 Price Research Award. Mitch is a natural leader and was elected President (and Vice President) of the Georgia Tech Graduate Student Government Association, roles in which he served with distinction. Indeed, after completing his terms, his student colleagues voted to establish a continuing award for distinguished leadership, to be named the Mitchel T. Keller award, with Mitch as the first recipient. Very few graduate students win awards in the first place, but Mitch is the only one I know who has an award named after them.  Mitch is also a gifted teacher of mathematics, receiving the prestigious Georgia Tech 2008 Outstanding Teacher Award, a campus-wide competition. He is quick to experiment with the latest approaches to teaching mathematics, adopting what works for him while refining and polishing things along the way. He really understands the literature behind active learning and the principles of engaging students in the learning process. Mitch has even taught his more senior (some say ancient) co-author a thing or two and got him to try personal response systems in a large calculus section.  Mitch is off to a fast start in his own research career, and is already an expert in the subject of linear discrepancy. Mitch has also made substantive contributions to a topic known as Stanley depth, which is right at the boundary of combinatorial mathematics and algebraic combinatorics.  After finishing his Ph.D., Mitch received another signal honor, a Marshall Sherfield Postdoctoral Fellowship and spent two years at the London School of Economics. He is presently Associate Director of Undergraduate Studies in the Department of Mathematics at the University of Wisconsin-Madison.  On the personal side, Mitch is the keeper of the Mathematics Genealogy Project, and he is a great cook. His desserts are to die for.  "
},
{
  "id": "app-comb-2-6",
  "level": "1",
  "url": "app-comb-2-6.html",
  "type": "Acknowledgements",
  "number": "",
  "title": "Acknowledgements",
  "body": " We are grateful to our colleagues Alan Diaz, Thang Le, Noah Streib, Prasad Tetali and Carl Yerger, who have taught Applied Combinatorics from preliminary versions and have given valuable feedback. As this text is freely available on the internet, we welcome comments, criticisms, suggestions and corrections from anyone who takes a look at our work.  For the 2016 and subsequent editions, we are grateful to Robert A. Beezer, David Farmer, and Kent Morrison for organizing the American Institute of Mathematics workshop on MathBook XML (now PreTeXt ) that enabled the new formats to be released. David Farmer's work on the initial conversion from latex to PreTeXt . The PreTeXt Google Group was an important resource in resolving challenges along the way, and Rob Beezer is a wonderfully-responsive developer who gladly put up with any number of feature requests in order to make everything we wanted possible in the PreTeXt edition  "
},
{
  "id": "app-comb-2-7",
  "level": "1",
  "url": "app-comb-2-7.html",
  "type": "Preface",
  "number": "",
  "title": "Preface",
  "body": " At Georgia Tech, MATH 3012: Applied Combinatorics, is a junior-level course targeted primarily at students pursuing the B.S. in Computer Science. The purpose of the course is to give students a broad exposure to combinatorial mathematics, using applications to emphasize fundamental concepts and techniques. Applied Combinatorics is also required of students seeking the B.S. in Mathematics, and it is one of two discrete mathematics courses that computer engineering students may select to fulfill a breadth requirement. The course will also often contain a selection of other engineering and science majors who are interested in learning more mathematics. As a consequence, in a typical semester, some 250 Georgia Tech students are enrolled in Applied Combinatorics. Students enrolled in Applied Combinatorics at Georgia Tech have already completed the three semester calculus sequence with many students bypassing one or more of the these courses on the basis of advanced placement scores. Also, the students will know some linear algebra and can at least have a reasonable discussion about vector spaces, bases and dimension.  Our approach to the course is to show students the beauty of combinatorics and how combinatorial problems naturally arise in many settings, particularly in computer science. While proofs are periodically presented in class, the course is not intended to teach students how to write proofs; there are other required courses in our curriculum that meet this need. Students may occasionally be asked to prove small facts, but these arguments are closer to the kind we expect from students in second or third semester calculus as contrasted with proofs we expect from a mathematics major in an upper-division course. Regardless, we cut very few corners, and our text can readily be used by instructors who elect to be even more rigorous in their approach.  This book arose from our feeling that a text that met our approach to Applied Combinatorics was not available. Because of the diverse set of instructors assigned to the course, the standard text was one that covered every topic imaginable (and then some), but provided little depth. We've taken a different approach, attacking the central subjects of the course description to provide exposure, but taking the time to go into greater depth in select areas to give the students a better feel for how combinatorics works. We have also included some results and topics that are not found in other texts at this level but help reveal the nature of combinatorics to students. We want students to understand that combinatorics is a subject that you must feel in the gut , and we hope that our presentation achieves this goal. The emphasis throughout remains on applications, including algorithms. We do not get deeply into the details of what it means for an algorithm to be efficient , but we do include an informal discussion of the basic principles of complexity, intended to prepare students in computer science, engineering and applied mathematics for subsequent coursework.  The materials included in this book have evolved over time. Early versions of a few chapters date from 2004, but the pace quickened in 2006 when the authors team taught a large section of Applied Combinatorics. In the last five years, existing chapters have been updated and expanded, while new chapters have been added. As matters now stand, our book includes more material than we can cover in a single semester. We feel that the topics of Chapters 1 9 plus Chapters 12, 13 and 14 are the core of a one semester course in Applied Combinatorics. Additional topics can then be selected from the remaining chapters based on the interests of the instructor and students.   Mitchel T. Keller and William T. Trotter  Lexington, Virginia, and Atlanta, Georgia   "
},
{
  "id": "app-comb-2-8",
  "level": "1",
  "url": "app-comb-2-8.html",
  "type": "Preface",
  "number": "",
  "title": "Preface to 2017 Edition",
  "body": " Preface to 2017 Edition  Because I ( MTK ) didn't have the chance to teach from this book during the 2016 2017 academic year, there were few opportunities to examine some of the areas where improvements are due in the text. That said, some changes suggested in the did come to fruition in this edition. In particular, the numbering of many things in will not match the 2016 Edition in a number of places because of the addition of to address the coefficients on in a way that doesn't require calculus. There is also one new exercise in , which has been placed at the end to retain consistency of numbering. Other than correcting errors, there have been no changes to the exercises, so faculty members teaching from the text may continue to assign the same exercise numbers with confidence that they are the same exercises they have been in the past.  The other notable update in this edition is the addition of a number of SageMathCells to (including in the exercises), , and the Discussion that ends . The practice of vaguely referring readers to a generic computer algebra system but not providing any advice on how to use it had always been unsatisfying. I know there are places where further refinement is in order, but this edition starts a more coherent approach toward using technology for some of the unpleasant algebraic aspects of the text. Readers can edit the content of the SageMathCells in the body of the text in order to use them to tackle other problems, and those in the exercises are there for convenience more than anything and include only a bare skeleton of what might be useful for the exercise. Since SageMath is open source and can be run for free on CoCalc, this approach seems greatly preferable to targeting a commercial CAS. For those, like me, who are coming to SageMath with experience using a commercial CAS, SageMath does not do implied multiplication in input very well. When a result comes up that seems strange, my first step is always to make sure that I'm not missing a * in my code.   Of course, even in a text that's been in use for over a decade, there are typos. A number of small issues were resolved in this edition. The errata page lists the dozen mistakes corrected in this edition. Undoubtedly, there are other mistakes waiting to be found, and we welcome reports from readers. (Pull requests on GitHub are also welcome!)  What's next? We'd love to hear from readers with suggestions, but I anticipate that expanding will be high on the list. If you're using SageMath (or Python) alongside our text, contributions of code snippets that would be worth including are also welcomed.   Mitchel T. Keller  Lexington, Virginia   "
},
{
  "id": "preface-2016",
  "level": "1",
  "url": "preface-2016.html",
  "type": "Preface",
  "number": "",
  "title": "Preface to 2016 Edition",
  "body": " Preface to 2016 Edition  In April 2016, the American Institute of Mathematics hosted a weeklong workshop in San Jose to introduce authors of open textbooks to git and Robert A. Beezer's MathBook XML authoring language designed to seamlessly produce HTML , latex , and other formats from a common XML source file. I ( MTK ) attended and eagerly began the conversion of existing latex source for this now decade-old project into MathBook XML . David Farmer deserves an enormous amount of credit for automating much of the process through a finely-tuned script, but the code produced still required a good deal of cleanup. This edition, the first not labeled preliminary , will hopefully become the first of many annual editions of Applied Combinatorics released under an open source license.  The main effort in producing this 2016 edition was to successfully convert to MathBook XML . Along the way, I attempted to correct all typographical errors we had noted in the past. There are undoubtedly more errors (typographical or otherwise) that will be corrected in future years, so please contact us via email if you spot any. The text now has an index, which may prove more helpful than searching PDF files when looking for the most essential locations of some common terms. Since MathBook XML makes it easy, we now also have a list of notation. Instructors will likely be glad to know that there were no changes to the exercises, so lists of assigned exercises from past years remain completely valid. There are two exceptions to this. The first is that has been modified to make the computations involved cleaner. We have preserved the exercise that was previously in this position as and added a hint. The second is that a coefficient was changed in to make the exercise feasible. The only significant changes to the body of the text was to convert WTT 's code snippets from C to Python\/SageMath. This has allowed us to embed interactive SageMath cells that readers who use the HTML version of the text can run and edit. We've only scratched the surface with this powerful feature of MathBook XML , so look for more SageMath additions in future years.  The conversion to MathBook XML allows us to make a wider variety of formats available:  HTML : With responsive design using CSS , we feel that the text now looks beautiful on personal computers, tablets, and even mobile phones. No longer will students be frantically resizing a PDF on their phone in order to try to read a passage from the text. The knowls offered in HTML also allow references to images, tables, and even theorems from other pages (or even a distance away on the same page) to provide a copy of the image\/table\/theorem right there, and another click\/tap makes it disappear.  PDF : Not much is changed here from previous years, other than the PDF is produced from the latex that MathBook XML generates, and so numbering and order is consistent with the HTML version.  Print: Campus bookstores have frequently produced printed versions of the text from the PDF provided online, but we have not previously been able to provide a printed, bound version for purchase. With the 2016 edition, we are pleased to launch a print version available through a number of online purchase channels. Campus bookstores may also acquire the book through wholesale channels for sale directly to students. Because of the CreativeCommons license under which the text is released, campuses retain the option of selling their own printed version of the text for students, although this is likely only financially advantageous to students if only a few chapters of the text are being used.    We have some ideas for what might be updated for the 2017 Edition ( , needs to be expanded both in the body and the exercises, would benefit from integration of SageMath to assist with generating function computations, and is still not really finished). However, we would love to hear from those of you who are using the text, too. Are there additional topics you'd like to see added? Chapters in need of more exercises? Topics whose exposition could be improved? Please reach out to us via email, and we'll consider your suggestions.   Mitchel T. Keller  Lexington, Virginia   "
},
{
  "id": "ch_prologue",
  "level": "1",
  "url": "ch_prologue.html",
  "type": "Preface",
  "number": "",
  "title": "Prologue",
  "body": " Prologue  A unique feature of this book is a recurring cast of characters: Alice, Bob, Carlos, Dave, Xing, Yolanda and Zori. They are undergraduate students at Georgia Tech, they're taking an 8:05am section of Math 3012: Applied Combinatorics, and they frequently go for coffee at the Clough Undergraduate Learning Center immediately after the class is over. They've become friends of sorts and you may find their conversations about Applied Combinatorics of interest, as they will may reveal subtleties behind topics currently being studied, reinforce connections with previously studied material or set the table for topics which will come later. Sometimes, these conversations will set aside in a clearly marked Discussion section, but they will also be sprinkled as brief remarks throughout the text.  In time, you will get to know these characters and will sense that, for example, when Dave comments on a topic, it will represent a perspective that Zori is unlikely to share. Some comments are right on target while others are out in left field. Some may even be humorous, at least we hope this is the case. Regardless, our goal is not to entertain although that is not all that bad a side benefit. Instead, we intend that our informal approach adds to the instructional value of our text.  Now it is time to meet our characters:  Alice is a computer engineering major from Philadelphia. She is ambitious, smart and intense. Alice is quick to come to conclusions, most of which are right. On occasion, Alice is not kind to Bob.  Bob is a management major from Omaha. He is a hard working and conscientious. Bob doesn't always keep pace with his friends, but anything he understands, he owns, and in the end, he gets almost everything. On the other hand, Bob has never quite understood why Alice is short with him at times.  Carlos is a really, really smart physics major from San Antonio. He has three older brothers and two sisters, one older, one younger. His high school background wasn't all that great, but Carlos is clearly a special student at Georgia Tech. He absorbs new concepts at lightning speed and sees through to the heart of almost every topic. He thinks carefully before he says something and is admirably polite.  Dave is a discrete math major from Los Angeles. Dave is a flake. He's plenty smart enough but not all that diligent. Still, he has unique insights into things and from time to time says something worth hearing not always but sometimes. His friends say that Dave suffers from occasional brain mouth disconnects.  Xing is a computer science major from New York. Xing's parents immigrated from Beijing, and he was strongly supported and encouraged in his high school studies. Xing is detail oriented and not afraid to work hard.  Yolanda is a double major (computer science and chemistry) from Cumming, a small town just north of Atlanta. Yolanda is the first in her extended family to go to a college or university. She is smart and absorbs knowledge like a sponge. It's all new to her and her horizons are raised day by day.  Zori is an applied math major from Detroit. She is bottom-line focused, has little time for puzzles and always wants to see applications to justify why something is included in the course. Zori is determined, driven and impatient at times.  "
},
{
  "id": "s_intro_intro",
  "level": "1",
  "url": "s_intro_intro.html",
  "type": "Section",
  "number": "1.1",
  "title": "Introduction",
  "body": " Introduction  There are three principal themes to our course:  Discrete Structures  Graphs, digraphs, networks, designs, posets, strings, patterns, distributions, coverings, and partitions.  Enumeration  Permutations, combinations, inclusion\/exclusion, generating functions, recurrence relations, and Pólya counting.  Algorithms and Optimization  Sorting, eulerian circuits, hamiltonian cycles, planarity testing, graph coloring, spanning trees, shortest paths, network flows, bipartite matchings, and chain partitions.    To illustrate the accessible, concrete nature of combinatorics and to motivate topics that we will study, this preliminary chapter provides a first look at combinatorial problems, choosing examples from enumeration, graph theory, number theory, and optimization. The discussion is very informal but this should serve to explain why we have to be more precise at later stages. We ask lots of questions, but at this stage, you'll only be able to answer a few. Later, you'll be able to answer many more but as promised earlier, most likely you'll never be able to answer them all. And if we're wrong in making that statement, then you're certain to become very famous. Also, you'll get an A in the course and maybe even a Ph.D. too.  "
},
{
  "id": "s_intro_enum",
  "level": "1",
  "url": "s_intro_enum.html",
  "type": "Section",
  "number": "1.2",
  "title": "Enumeration",
  "body": " Enumeration  Many basic problems in combinatorics involve counting the number of distributions of objects into cells where we may or may not be able to distinguish between the objects and the same for the cells. Also, the cells may be arranged in patterns. Here are concrete examples.  Amanda has three children: Dawn, Keesha and Seth.   Amanda has ten one dollar bills and decides to give the full amount to her children. How many ways can she do this? For example, one way she might distribute the funds is to give Dawn and Keesha four dollars each with Seth receiving the balance two dollars. Another way is to give the entire amount to Keesha, an option that probably won't make Dawn and Seth very happy. Note that hidden within this question is the assumption that Amanda does not distinguish the individual dollar bills, say by carefully examining their serial numbers. Instead, we intend that she need only decide the amount each of the three children is to receive.    The amounts of money distributed to the three children form a sequence which if written in non-increasing order has the form: with and . How many such sequences are there?    Suppose Amanda decides to give each child at least one dollar. How does this change the answers to the first two questions?    Now suppose that Amanda has ten books, in fact the top 10 books from the New York Times best-seller list, and decides to give them to her children. How many ways can she do this? Again, we note that there is a hidden assumption the ten books are all different.    Suppose the ten books are labeled . The sets of books given to the three children are pairwise disjoint and their union is . How many different sets of the form where , and are pairwise disjoint and ?    Suppose Amanda decides to give each child at least one book. How does this change the answers to the preceding two questions?    How would we possibly answer these kinds of questions if ten was really ten thousand (OK, we're not talking about children any more!) and three was three thousand? Could you write the answer on a single page in a book?     A circular necklace with a total of six beads will be assembled using beads of three different colors. In , we show four such necklaces however, note that the first three are actually the same necklace. Each has three red beads, two blues and one green. On the other hand, the fourth necklace has the same number of beads of each color but it is a different necklace.   Necklaces made with three colors      How many different necklaces of six beads can be formed using three reds, two blues and one green?    How many different necklaces of six beads can be formed using red, blue and green beads (not all colors have to be used)?    How many different necklaces of six beads can be formed using red, blue and green beads if all three colors have to be used?    How would we possibly answer these questions for necklaces of six thousand beads made with beads from three thousand different colors? What special software would be required to find the exact answer and how long would the computation take?     "
},
{
  "id": "fig_intro_necklace",
  "level": "2",
  "url": "s_intro_enum.html#fig_intro_necklace",
  "type": "Figure",
  "number": "1.1",
  "title": "",
  "body": " Necklaces made with three colors   "
},
{
  "id": "s_intro_graph",
  "level": "1",
  "url": "s_intro_graph.html",
  "type": "Section",
  "number": "1.3",
  "title": "Combinatorics and Graph Theory",
  "body": " Combinatorics and Graph Theory  A graph  consists of a vertex set and a collection of -element subsets of . Elements of are called edges . In our course, we will (almost always) use the convention that for some positive integer . With this convention, graphs can be described precisely with a text file:  The first line of the file contains a single integer , the number of vertices in the graph.  Each of the remaining lines of the file contains a pair of distinct integers and specifies an edge of the graph.    We illustrate this convention in with a text file and the diagram for the graph it defines.   A graph defined by data   graph1.txt 9 6 2 1 5 1 7 6 8 9 1 4 3 5 7 1 3 5 9 7 9     Much of the notation and terminology for graphs is quite natural. See if you can make sense out of the following statements which apply to the graph defined above:  has vertices and edges.  is an edge.  Vertices and are adjacent.  is not an edge.  Vertices and are not adjacent.  is a path of length from vertex to vertex .  is cycle of length .  is disconnected and has two components. One of the components has vertex set .  is a triangle.  is a clique of size .  is an independent set of size .    Equipped only with this little bit of background material, we are already able to pose a number of interesting and challenging problems.    Consider the graph shown in .   A connected graph      What is the largest for which has a path of length ?  What is the largest for which has a cycle of length ?  What is the largest for which has a clique of size ?  What is the largest for which has an independent set of size ?  What is the shortest path from vertex to vertex ?    Suppose we gave the class a text data file for a graph on vertices and asked whether the graph contains a cycle of length at least . Raoul says yes and Carla says no. How do we decide who is right?  Suppose instead we asked whether the graph has a clique of size . Helene says that she doesn't think so, but isn't certain. Is it reasonable that her classmates insist that she make up her mind, one way or the other? Is determining whether this graph has a clique of size harder, easier or more or less the same as determining whether it has a cycle of size .    We will frequently study problems in which graphs arise in a very natural manner. Here's an example.    In , we show the location of some radio stations in the plane, together with a scale indicating a distance of miles. Radio stations that are closer than miles apart must broadcast on different frequencies to avoid interference.   Radio Stations    We've shown that different frequencies are enough. Can you do better?  Can you find stations each of which is within miles of the other ? Can you find stations each of is more than miles away from the other ? Is there a natural way to define a graph associated with this problem?      How big must an applied combinatorics class be so that there are either (a) six students with each pair having taken at least one other class together, or (b) six students with each pair together in a class for the first time. Is this really a hard problem or can we figure it out in just a few minutes, scribbling on a napkin?    "
},
{
  "id": "s_intro_graph-2",
  "level": "2",
  "url": "s_intro_graph.html#s_intro_graph-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "graph vertex edges "
},
{
  "id": "fig_graphdata",
  "level": "2",
  "url": "s_intro_graph.html#fig_graphdata",
  "type": "Figure",
  "number": "1.2",
  "title": "",
  "body": " A graph defined by data   graph1.txt 9 6 2 1 5 1 7 6 8 9 1 4 3 5 7 1 3 5 9 7 9    "
},
{
  "id": "s_intro_graph-7",
  "level": "2",
  "url": "s_intro_graph.html#s_intro_graph-7",
  "type": "Example",
  "number": "1.3",
  "title": "",
  "body": "  Consider the graph shown in .   A connected graph      What is the largest for which has a path of length ?  What is the largest for which has a cycle of length ?  What is the largest for which has a clique of size ?  What is the largest for which has an independent set of size ?  What is the shortest path from vertex to vertex ?    Suppose we gave the class a text data file for a graph on vertices and asked whether the graph contains a cycle of length at least . Raoul says yes and Carla says no. How do we decide who is right?  Suppose instead we asked whether the graph has a clique of size . Helene says that she doesn't think so, but isn't certain. Is it reasonable that her classmates insist that she make up her mind, one way or the other? Is determining whether this graph has a clique of size harder, easier or more or less the same as determining whether it has a cycle of size .   "
},
{
  "id": "ex_radiostations",
  "level": "2",
  "url": "s_intro_graph.html#ex_radiostations",
  "type": "Example",
  "number": "1.5",
  "title": "",
  "body": "  In , we show the location of some radio stations in the plane, together with a scale indicating a distance of miles. Radio stations that are closer than miles apart must broadcast on different frequencies to avoid interference.   Radio Stations    We've shown that different frequencies are enough. Can you do better?  Can you find stations each of which is within miles of the other ? Can you find stations each of is more than miles away from the other ? Is there a natural way to define a graph associated with this problem?   "
},
{
  "id": "s_intro_graph-10",
  "level": "2",
  "url": "s_intro_graph.html#s_intro_graph-10",
  "type": "Example",
  "number": "1.7",
  "title": "",
  "body": "  How big must an applied combinatorics class be so that there are either (a) six students with each pair having taken at least one other class together, or (b) six students with each pair together in a class for the first time. Is this really a hard problem or can we figure it out in just a few minutes, scribbling on a napkin?   "
},
{
  "id": "s_intro_number",
  "level": "1",
  "url": "s_intro_number.html",
  "type": "Section",
  "number": "1.4",
  "title": "Combinatorics and Number Theory",
  "body": " Combinatorics and Number Theory  Broadly, number theory concerns itself with the properties of the positive integers. G.H. Hardy was a brilliant British mathematician who lived through both World Wars and conducted a large deal of number-theoretic research. He was also a pacifist who was happy that, from his perspective, his research was not useful . He wrote in his 1940 essay A Mathematician's Apology  [n]o one has yet discovered any warlike purpose to be served by the theory of numbers or relativity, and it seems very unlikely that anyone will do so for many years. G.H. Hardy, A Mathematician's Apology , Cambridge University Press, p. 140. (1993 printing) Little did he know, the purest mathematical ideas of number theory would soon become indispensable for the cryptographic techniques that kept communications secure. Our subject here is not number theory, but we will see a few times where combinatorial techniques are of use in number theory.  Collatz sequence  Form a sequence of positive integers using the following rules. Start with a positive integer . If is odd, then the next number is . If is even, then the next number is . Halt if you ever reach . For example, if we start with , the sequence is   Now suppose you start with . Then the first few terms are But now we note that the integer appears in the first sequence, so the two sequences will agree from this point on. Sequences formed by this rule are called Collatz sequences .  Pick a number somewhere between and and write down the sequence you get. Regardless of your choice, you will eventually halt with a . However, is there some positive integer (possibly quite large) so that if you start from , you will never reach ?    Students in middle school are taught to add fractions by finding least common multiples. For example, the least common multiple of and is , so: How hard is it to find the least common multiple of two integers?  It's really easy if you can factor them into primes. For example, consider the problem of finding the least common multiple of and if you just happen to know that Then the least common multiple is   So to find the least common multiple of two numbers, we just have to factor them into primes. That doesn't sound too hard. For starters, can you factor ? OK, how about ? Now for a real challenge. Suppose you are told that the integer is the product of two primes and . Can you find them?  What if factoring is hard? Can you find the least common multiple of two relatively large integers, say each with about digits, by another method? How should middle school students be taught to add fractions?  As an aside, we note that most calculators can't add or multiply two digits numbers, much less two numbers with more than digits. But it is relatively straightforward to write a computer program that will do the job for us. Also, there are some powerful mathematical software tools available. Two very well known commercial examples are Maple and Mathematica . In this text, we will from time to time, make use of the open source computer algebra system SageMath . We will sometimes embed interactive SageMath cells in the text, but you can also use SageMath for free online via CoCalc . For example, the SageMath cell below will produce the factorization shown above.   If you're reading this text in a web browser, go ahead and change the integer in the SageMath cell above to some other, perhaps larger, integer and click the button again to get the prime factorization of your new integer.  Now here's how we made up the challenge problem. First, we found a site on the web that lists large primes and found these two values: The SageMath code below calculates , and returns the result instantly.   On the other hand, if you ask SageMath to factor , as in the cell below, you'll likely be waiting a long time. If you get a response in more than a couple of minutes, please email us so that we can update the text with larger primes and !    Questions arising in number theory can also have an enumerative flair, as the following example shows.    In , we show the integer partitions of .   The partitions of , noting those into distinct parts and those into odd parts.    8 distinct parts  7+1 distinct parts, odd parts  6+2 distinct parts  6+1+1  5+3 distinct parts, odd parts  5+2+1 distinct parts  5+1+1+1 odd parts  4+4  4+3+1 distinct parts  4+2+2  4+2+1+1  4+1+1+1+1  3+3+2  3+3+1+1 odd parts  3+2+2+1  3+2+1+1+1  3+1+1+1+1+1 odd parts  2+2+2+2  2+2+2+1+1  2+2+1+1+1+1  2+1+1+1+1+1+1  1+1+1+1+1+1+1+1 odd parts     There are partitions altogether, and as noted, exactly of them are partitions of into odd parts. Also, exactly of them are partitions of into distinct parts.  What would be your reaction if we asked you to find the number of integer partitions of ? Do you think that the number of partitions of into odd parts equals the number of partitions of into distinct parts? Is there a way to answer this question without actually calculating the number of partitions of each type?    "
},
{
  "id": "ex_collatz",
  "level": "2",
  "url": "s_intro_number.html#ex_collatz",
  "type": "Example",
  "number": "1.8",
  "title": "",
  "body": "Collatz sequence  Form a sequence of positive integers using the following rules. Start with a positive integer . If is odd, then the next number is . If is even, then the next number is . Halt if you ever reach . For example, if we start with , the sequence is   Now suppose you start with . Then the first few terms are But now we note that the integer appears in the first sequence, so the two sequences will agree from this point on. Sequences formed by this rule are called Collatz sequences .  Pick a number somewhere between and and write down the sequence you get. Regardless of your choice, you will eventually halt with a . However, is there some positive integer (possibly quite large) so that if you start from , you will never reach ?  "
},
{
  "id": "s_intro_number-4",
  "level": "2",
  "url": "s_intro_number.html#s_intro_number-4",
  "type": "Example",
  "number": "1.9",
  "title": "",
  "body": " Students in middle school are taught to add fractions by finding least common multiples. For example, the least common multiple of and is , so: How hard is it to find the least common multiple of two integers?  It's really easy if you can factor them into primes. For example, consider the problem of finding the least common multiple of and if you just happen to know that Then the least common multiple is   So to find the least common multiple of two numbers, we just have to factor them into primes. That doesn't sound too hard. For starters, can you factor ? OK, how about ? Now for a real challenge. Suppose you are told that the integer is the product of two primes and . Can you find them?  What if factoring is hard? Can you find the least common multiple of two relatively large integers, say each with about digits, by another method? How should middle school students be taught to add fractions?  As an aside, we note that most calculators can't add or multiply two digits numbers, much less two numbers with more than digits. But it is relatively straightforward to write a computer program that will do the job for us. Also, there are some powerful mathematical software tools available. Two very well known commercial examples are Maple and Mathematica . In this text, we will from time to time, make use of the open source computer algebra system SageMath . We will sometimes embed interactive SageMath cells in the text, but you can also use SageMath for free online via CoCalc . For example, the SageMath cell below will produce the factorization shown above.   If you're reading this text in a web browser, go ahead and change the integer in the SageMath cell above to some other, perhaps larger, integer and click the button again to get the prime factorization of your new integer.  Now here's how we made up the challenge problem. First, we found a site on the web that lists large primes and found these two values: The SageMath code below calculates , and returns the result instantly.   On the other hand, if you ask SageMath to factor , as in the cell below, you'll likely be waiting a long time. If you get a response in more than a couple of minutes, please email us so that we can update the text with larger primes and !   "
},
{
  "id": "s_intro_number-6",
  "level": "2",
  "url": "s_intro_number.html#s_intro_number-6",
  "type": "Example",
  "number": "1.10",
  "title": "",
  "body": "  In , we show the integer partitions of .   The partitions of , noting those into distinct parts and those into odd parts.    8 distinct parts  7+1 distinct parts, odd parts  6+2 distinct parts  6+1+1  5+3 distinct parts, odd parts  5+2+1 distinct parts  5+1+1+1 odd parts  4+4  4+3+1 distinct parts  4+2+2  4+2+1+1  4+1+1+1+1  3+3+2  3+3+1+1 odd parts  3+2+2+1  3+2+1+1+1  3+1+1+1+1+1 odd parts  2+2+2+2  2+2+2+1+1  2+2+1+1+1+1  2+1+1+1+1+1+1  1+1+1+1+1+1+1+1 odd parts     There are partitions altogether, and as noted, exactly of them are partitions of into odd parts. Also, exactly of them are partitions of into distinct parts.  What would be your reaction if we asked you to find the number of integer partitions of ? Do you think that the number of partitions of into odd parts equals the number of partitions of into distinct parts? Is there a way to answer this question without actually calculating the number of partitions of each type?   "
},
{
  "id": "s_intro_geom",
  "level": "1",
  "url": "s_intro_geom.html",
  "type": "Section",
  "number": "1.5",
  "title": "Combinatorics and Geometry",
  "body": " Combinatorics and Geometry  There are many problems in geometry that are innately combinatorial or for which combinatorial techniques shed light on the problem.   In , we show a family of lines in the plane. Each pair of lines intersects and no point in the plane belongs to more than two lines. These lines determine regions.   Lines and regions    Under these same restrictions, how many regions would a family of lines determine? Can different arrangements of lines determine different numbers of regions?    Mandy says she has found a set of points in the plane that determine exactly lines. Tobias disputes her claim. Who is right?    There are many different ways to draw a graph in the plane. Some drawings may have crossing edges while others don't. But sometimes, crossing edges must appear in any drawing. Consider the graph shown in .   A graph with crossing edges    Can you redraw without crossing edges?  Suppose Sam and Deborah were given a homework problem asking whether a particular graph on vertices and edges could be drawn without edge crossings. Deborah just looked at the number of vertices and the number of edges and said that the answer is no. Sam questions how she can be so certain without looking more closely at the structure of the graph. Is there a way for Deborah to justify her definitive response?   "
},
{
  "id": "s_intro_geom-3",
  "level": "2",
  "url": "s_intro_geom.html#s_intro_geom-3",
  "type": "Example",
  "number": "1.12",
  "title": "",
  "body": " In , we show a family of lines in the plane. Each pair of lines intersects and no point in the plane belongs to more than two lines. These lines determine regions.   Lines and regions    Under these same restrictions, how many regions would a family of lines determine? Can different arrangements of lines determine different numbers of regions?  "
},
{
  "id": "s_intro_geom-4",
  "level": "2",
  "url": "s_intro_geom.html#s_intro_geom-4",
  "type": "Example",
  "number": "1.14",
  "title": "",
  "body": " Mandy says she has found a set of points in the plane that determine exactly lines. Tobias disputes her claim. Who is right?  "
},
{
  "id": "s_intro_geom-5",
  "level": "2",
  "url": "s_intro_geom.html#s_intro_geom-5",
  "type": "Example",
  "number": "1.15",
  "title": "",
  "body": " There are many different ways to draw a graph in the plane. Some drawings may have crossing edges while others don't. But sometimes, crossing edges must appear in any drawing. Consider the graph shown in .   A graph with crossing edges    Can you redraw without crossing edges?  Suppose Sam and Deborah were given a homework problem asking whether a particular graph on vertices and edges could be drawn without edge crossings. Deborah just looked at the number of vertices and the number of edges and said that the answer is no. Sam questions how she can be so certain without looking more closely at the structure of the graph. Is there a way for Deborah to justify her definitive response?  "
},
{
  "id": "s_intro_opt",
  "level": "1",
  "url": "s_intro_opt.html",
  "type": "Section",
  "number": "1.6",
  "title": "Combinatorics and Optimization",
  "body": " Combinatorics and Optimization  You likely have already been introduced to optimization problems, as calculus students around the world are familiar with the plight of farmers trying to fence the largest area of land given a certain amount of fence or people needing to cross rivers downstream from their current location who must decide where they should cross based on the speed at which they can run and swim. However, these problems are inherently continuous. In theory, you can cross the river at any point you want, even if it were irrational. (OK, so not exactly irrational, but a good decimal approximation.) In this course, we will examine a few optimization problems that are not continuous, as only integer values for the variables will make sense. It turns out that many of these problems are very hard to solve in general.   In , we use letters for the labels on the vertices to help distinguish visually from the integer weights on the edges.   A labeled graph with weighted edges    Suppose the vertices are cities, the edges are highways and the weights on the edges represent distance .   What is the shortest path from vertex to vertex ?    Suppose Ariel is a salesperson whose home base is city . In what order should Ariel visit the other cities so that she goes through each of them at least once and returns home at the end while keeping the total distance traveled to a minimum? Can Ariel accomplish such a tour visiting each city exactly once?    Sanjay is a highway inspection engineer and must traverse every highway each month. Sanjay's homebase is City . In what order should Sanjay traverse the highways to minimize the total distance traveled? Can Sanjay make such a tour traveling along each highway exactly once?       Now suppose that the vertices are locations of branch banks in Atlanta and that the weights on an edge represents the cost, in millions of dollars, of building a high capacity data link between the branch banks at it two end points. In this model, if there is no edge between two branch banks, it means that the cost of building a data link between this particular pair is prohibitively high (here we might be tempted to say the cost is infinite, but the authors don't admit to knowing the meaning of this word).  Our challenge is to decide which data links should be constructed to form a network in which any branch bank can communicate with any other branch. We assume that data can flow in either direction on a link, should it be built, and that data can be relayed through any number of data links. So to allow full communication, we should construct a spanning tree in this network. In , we show a graph on the left and one of its many spanning trees on the right.   A weighted graph and spanning tree    The weight of the spanning tree is the sum of the weights on the edges. In our model, this represents the costs, again in millions of dollars, of building the data links associated with the edges in the spanning tree. For the spanning tree shown in , this total is Of all spanning trees, the bank would naturally like to find one having minimum weight.  How many spanning trees does this graph have? For a large graph, say one with vertices, does it make sense to find all spanning trees and simply take the one with minimum cost? In particular, for a positive integer , how many trees have vertex set ?   "
},
{
  "id": "s_intro_opt-3",
  "level": "2",
  "url": "s_intro_opt.html#s_intro_opt-3",
  "type": "Example",
  "number": "1.17",
  "title": "",
  "body": " In , we use letters for the labels on the vertices to help distinguish visually from the integer weights on the edges.   A labeled graph with weighted edges    Suppose the vertices are cities, the edges are highways and the weights on the edges represent distance .   What is the shortest path from vertex to vertex ?    Suppose Ariel is a salesperson whose home base is city . In what order should Ariel visit the other cities so that she goes through each of them at least once and returns home at the end while keeping the total distance traveled to a minimum? Can Ariel accomplish such a tour visiting each city exactly once?    Sanjay is a highway inspection engineer and must traverse every highway each month. Sanjay's homebase is City . In what order should Sanjay traverse the highways to minimize the total distance traveled? Can Sanjay make such a tour traveling along each highway exactly once?     "
},
{
  "id": "s_intro_opt-4",
  "level": "2",
  "url": "s_intro_opt.html#s_intro_opt-4",
  "type": "Example",
  "number": "1.19",
  "title": "",
  "body": " Now suppose that the vertices are locations of branch banks in Atlanta and that the weights on an edge represents the cost, in millions of dollars, of building a high capacity data link between the branch banks at it two end points. In this model, if there is no edge between two branch banks, it means that the cost of building a data link between this particular pair is prohibitively high (here we might be tempted to say the cost is infinite, but the authors don't admit to knowing the meaning of this word).  Our challenge is to decide which data links should be constructed to form a network in which any branch bank can communicate with any other branch. We assume that data can flow in either direction on a link, should it be built, and that data can be relayed through any number of data links. So to allow full communication, we should construct a spanning tree in this network. In , we show a graph on the left and one of its many spanning trees on the right.   A weighted graph and spanning tree    The weight of the spanning tree is the sum of the weights on the edges. In our model, this represents the costs, again in millions of dollars, of building the data links associated with the edges in the spanning tree. For the spanning tree shown in , this total is Of all spanning trees, the bank would naturally like to find one having minimum weight.  How many spanning trees does this graph have? For a large graph, say one with vertices, does it make sense to find all spanning trees and simply take the one with minimum cost? In particular, for a positive integer , how many trees have vertex set ?  "
},
{
  "id": "s_intro_sudoku",
  "level": "1",
  "url": "s_intro_sudoku.html",
  "type": "Section",
  "number": "1.7",
  "title": "Sudoku Puzzles",
  "body": " Sudoku Puzzles  Here's an example which has more substance than you might think at first glance. It involves Sudoku puzzles, which have become immensely popular in recent years.   A Sudoku puzzle Sudoku puzzle is a array of cells that when completed have the integers appearing exactly once in each row and each column. Also (and this is what makes the puzzles so fascinating), the numbers , , appear once in each of the nine subsquares identified by the darkened borders. To be considered a legitimate Sudoku puzzle, there should be a unique solution. In , we show two Sudoku puzzles. The one on the right is fairly easy, and the one on the left is far more challenging.   Sudoku puzzles    There are many sources of Sudoku puzzles, and software that generates Sudoku puzzles and then allows you to play them with an attractive GUI is available for all operating systems we know anything about (although not recommend to play them during class!). Also, you can find Sudoku puzzles on the web at: . On this site, the Evil ones are just that.  How does Rory make up good Sudoku puzzles, ones that are difficult for Mandy to solve? How could Mandy use a computer to solve puzzles that Rory has constructed? What makes some Sudoku puzzles easy and some of them hard?  The size of a Sudoku puzzle can be expanded in an obvious way, and many newspapers include a Sudoku puzzle in their Sunday edition (just next to a challenging crosswords puzzle). How difficult would it be to solve a Sudoku puzzle, even if you had access to a powerful computer?   "
},
{
  "id": "s_intro_sudoku-3",
  "level": "2",
  "url": "s_intro_sudoku.html#s_intro_sudoku-3",
  "type": "Example",
  "number": "1.21",
  "title": "",
  "body": " A Sudoku puzzle Sudoku puzzle is a array of cells that when completed have the integers appearing exactly once in each row and each column. Also (and this is what makes the puzzles so fascinating), the numbers , , appear once in each of the nine subsquares identified by the darkened borders. To be considered a legitimate Sudoku puzzle, there should be a unique solution. In , we show two Sudoku puzzles. The one on the right is fairly easy, and the one on the left is far more challenging.   Sudoku puzzles    There are many sources of Sudoku puzzles, and software that generates Sudoku puzzles and then allows you to play them with an attractive GUI is available for all operating systems we know anything about (although not recommend to play them during class!). Also, you can find Sudoku puzzles on the web at: . On this site, the Evil ones are just that.  How does Rory make up good Sudoku puzzles, ones that are difficult for Mandy to solve? How could Mandy use a computer to solve puzzles that Rory has constructed? What makes some Sudoku puzzles easy and some of them hard?  The size of a Sudoku puzzle can be expanded in an obvious way, and many newspapers include a Sudoku puzzle in their Sunday edition (just next to a challenging crosswords puzzle). How difficult would it be to solve a Sudoku puzzle, even if you had access to a powerful computer?  "
},
{
  "id": "s_intro_discussion",
  "level": "1",
  "url": "s_intro_discussion.html",
  "type": "Section",
  "number": "1.8",
  "title": "Discussion",
  "body": " Discussion  Over coffee after their first combinatorics class, Xing remarked This doesn't seem to be going like calculus. I'm expecting the professor to teach us how to solve problems at least some kinds of problems. Instead, a whole bunch of problems were posed and we were asked whether we could solve them.  Yolanda jumped in, saying You may be judging things too quickly. I'm fascinated by these kinds of questions. They're different.  Zori grumpily laid bare her concerns: After getting out of Georgia Tech, who's going to pay me to count necklaces, distribute library books or solve Sudoku puzzles?  Bob politely countered, But the problems on networks and graphs seemed to have practical applications. I heard my uncle, a very successful business guy, talk about franchising problems that sound just like those.  Alice speculated, All those network problems sound the same to me. A fair to middling computer science major could probably write programs to solve any of them.  Dave mumbled, Maybe not. Similar sounding problems might actually be quite different in the end. Maybe we'll learn to tell the difference.  After a bit of quiet time interrupted only by lattes disappearing, Carlos said softly, It might not be so easy to distinguish hard problems from easy ones.  Alice followed, Regardless, what strikes me is that we all, well almost all of us, she said, rolling her eyes at Bob, seem to understand everything talked about in class today. It was so very concrete. I liked that.   "
},
{
  "id": "s_strings_intro",
  "level": "1",
  "url": "s_strings_intro.html",
  "type": "Section",
  "number": "2.1",
  "title": "Strings: A First Look",
  "body": " Strings: A First Look  Let be a positive integer. Throughout this text, we will use the shorthand notation to denote the -element set . Now let be a set. Then a function is also called an -string of length  string  . In discussions of -strings, it is customary to refer to the elements of as characters  characters  , while the element is the character of . Whenever practical, we prefer to denote a string by writing   , rather than the more cumbersome notation , , , .  There are a number of alternatives for the notation and terminology associated with strings. First, the characters in a string are frequently written using subscripts as , so the -term of can be denoted rather than . Strings are also called sequences  sequence  , especially when is a set of numbers and the function is defined by an algebraic rule. For example, the sequence of odd integers is defined by .  Alternatively, strings are called words  word  , the set is called the alphabet  alphabet  and the elements of are called letters  letter  . For example, is a -letter word on the -letter alphabet .  In many computing languages, strings are called arrays  array  . Also, when the character is constrained to belong to a subset , a string can be considered as an element of the cartesian product , which is normally viewed as -tuples of the form such that for all .    In the state of Georgia, license plates consist of four digits followed by a space followed by three capital letters. The first digit cannot be a . How many license plates are possible?    Let consist of the digits , let be the singleton set whose only element is a space, and let denote the set of capital letters. A valid license plate is just a string from so the number of different license plates is , since the size of a product of sets is the product of the sets' sizes. We can get a feel for why this is the case by focusing just on the digit part of the string here. We can think about the digits portion as being four blanks that need to be filled. The first blank has options (the digits through ). If we focus on just the digit strings beginning with , one perspective is that they range from to , so there are of them. However, we could also think about there being options for the second spot, options for the third spot, and options for the fourth. Multiplying gives . Since our analysis of filling the remaining digit blanks didn't depend on our choice of a for the first position, we see that each of the choices of initial digit gives strings, for a total of .    In the case that , an -string is called a string (also a binary string  string  binary  or bit string.  bit string  string, binary  ). When , an -string is also called a ternary  string  ternary  string.   A machine instruction in a -bit operating system is just a bit string of length . Thus, there are options for each of positions to fill, making the number of such strings . In general, the number of bit strings of length is .     Suppose that a website allows its users to pick their own usernames for accounts, but imposes some restrictions. The first character must be an upper-case letter in the English alphabet. The second through sixth characters can be letters (both upper-case and lower-case allowed) in the English alphabet or decimal digits ( ). The seventh position must be @ or . . The eighth through twelfth positions allow lower-case English letters, * , % , and # . The thirteenth position must be a digit. How many users can the website accept registrations from?    We can visualize the options by thinking of the positions in the string as blanks that need to be filled in and putting the options for that blank above. In , we've used U to denote the set of upper-case letters, L for the set of lower-case letters, and D for the set of digits.   String Template           #  #  #  #  #      D  D  D  D  D   %  %  %  %  %      L  L  L  L  L  .  *  *  *  *  *     U  U  U  U  U  U  @  L  L  L  L  L  D                   26  62  62  62  62  62  2  29  29  29  29  29  10     Below each position in the string, we've written the number of options for that position. (For example, there are 62 options for the second position, since there are letters once both cases are accounted for and digits.) We then multiply these possibilities together, since each choice is independent of the others. Therefore, we have total possible usernames.    "
},
{
  "id": "s_strings_intro-2",
  "level": "2",
  "url": "s_strings_intro.html#s_strings_intro-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "-string of length characters "
},
{
  "id": "s_strings_intro-3",
  "level": "2",
  "url": "s_strings_intro.html#s_strings_intro-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "sequences "
},
{
  "id": "s_strings_intro-4",
  "level": "2",
  "url": "s_strings_intro.html#s_strings_intro-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "words alphabet letters "
},
{
  "id": "s_strings_intro-5",
  "level": "2",
  "url": "s_strings_intro.html#s_strings_intro-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "arrays "
},
{
  "id": "exa_strings_ga-plate",
  "level": "2",
  "url": "s_strings_intro.html#exa_strings_ga-plate",
  "type": "Example",
  "number": "2.1",
  "title": "",
  "body": "  In the state of Georgia, license plates consist of four digits followed by a space followed by three capital letters. The first digit cannot be a . How many license plates are possible?    Let consist of the digits , let be the singleton set whose only element is a space, and let denote the set of capital letters. A valid license plate is just a string from so the number of different license plates is , since the size of a product of sets is the product of the sets' sizes. We can get a feel for why this is the case by focusing just on the digit part of the string here. We can think about the digits portion as being four blanks that need to be filled. The first blank has options (the digits through ). If we focus on just the digit strings beginning with , one perspective is that they range from to , so there are of them. However, we could also think about there being options for the second spot, options for the third spot, and options for the fourth. Multiplying gives . Since our analysis of filling the remaining digit blanks didn't depend on our choice of a for the first position, we see that each of the choices of initial digit gives strings, for a total of .   "
},
{
  "id": "s_strings_intro-7",
  "level": "2",
  "url": "s_strings_intro.html#s_strings_intro-7",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "binary string bit string. ternary "
},
{
  "id": "s_strings_intro-8",
  "level": "2",
  "url": "s_strings_intro.html#s_strings_intro-8",
  "type": "Example",
  "number": "2.2",
  "title": "",
  "body": " A machine instruction in a -bit operating system is just a bit string of length . Thus, there are options for each of positions to fill, making the number of such strings . In general, the number of bit strings of length is .  "
},
{
  "id": "s_strings_intro-9",
  "level": "2",
  "url": "s_strings_intro.html#s_strings_intro-9",
  "type": "Example",
  "number": "2.3",
  "title": "",
  "body": "  Suppose that a website allows its users to pick their own usernames for accounts, but imposes some restrictions. The first character must be an upper-case letter in the English alphabet. The second through sixth characters can be letters (both upper-case and lower-case allowed) in the English alphabet or decimal digits ( ). The seventh position must be @ or . . The eighth through twelfth positions allow lower-case English letters, * , % , and # . The thirteenth position must be a digit. How many users can the website accept registrations from?    We can visualize the options by thinking of the positions in the string as blanks that need to be filled in and putting the options for that blank above. In , we've used U to denote the set of upper-case letters, L for the set of lower-case letters, and D for the set of digits.   String Template           #  #  #  #  #      D  D  D  D  D   %  %  %  %  %      L  L  L  L  L  .  *  *  *  *  *     U  U  U  U  U  U  @  L  L  L  L  L  D                   26  62  62  62  62  62  2  29  29  29  29  29  10     Below each position in the string, we've written the number of options for that position. (For example, there are 62 options for the second position, since there are letters once both cases are accounted for and digits.) We then multiply these possibilities together, since each choice is independent of the others. Therefore, we have total possible usernames.   "
},
{
  "id": "s_strings_permutations",
  "level": "1",
  "url": "s_strings_permutations.html",
  "type": "Section",
  "number": "2.2",
  "title": "Permutations",
  "body": " Permutations  In the previous section, we considered strings in which repetition of symbols is allowed. For instance,   is a perfectly good bit string of length eight. However, in many applied settings where a string is an appropriate model, a symbol may be used in at most one position.   Imagine placing the letters of the English alphabet in a bag and drawing them out one at a time (without returning a letter once it's been drawn) to form a six-character string. We know there are strings of length six that can be formed from the English alphabet. However, if we restrict the manner of string formation, not all strings are possible. The string yellow has six characters, but it uses the letter l twice and thus cannot be formed by drawing letters from a bag. However, jacket can be formed in this manner. Starting from a full bag, we note there are choices for the first letter. Once it has been removed, there are letters remaining in the bag. After drawing the second letter, there are letters remaining. Continuing, we note that immediately before the sixth letter is drawn from the bag, there are letters in the bag. Thus, we can form six-character strings of English letters by drawing letters from a bag, a little more than half the total number of six-character strings on this alphabet.   To generalize the preceding example, we now introduce permutations. To do so, let be a finite set and let be a positive integer. An -string is called a permutation  permutation  if all characters used in are distinct. Clearly, the existence of an -permutation of length requires that .  When is a positive integer, we define (read   factorial   factorial  definition      factorial  ) by By convention, we set . As an example, . Now for integers with define by     number of permutations  For example, and . Also, a computer algebra system will quickly report that     If is an -element set and is a positive integer with , then the number of -strings of length that are permutations is .    The proposition is true since when constructing a permutation from an -element set, we see that there are choices for . After fixing , we have that for , there are choices, as we can use any element of . For , there are choices, since we can use any element in . For , there are choices, because we can use any element of except . Noting that our proof is complete.    Note that the answer we arrived at in is simply as we would expect in light of .    It's time to elect a slate of four class officers (President, Vice President, Secretary and Treasurer) from the pool of students enrolled in Applied Combinatorics. If any interested student could be elected to any position (Alice contends this is a big if since Bob is running), how many different slates of officers can be elected?    To count possible officer slates, work from a set containing the names of the interested students (yes, even poor Bob). A permutation of length four chosen from is then a slate of officers by considering the first name in the permutation as the President, the second as the Vice President, the third as the Secretary, and the fourth as the Treasurer. Thus, the number of officer slates is .     Let's return to the license plate question of . Suppose that Georgia required that the three letters be distinct from each other. Then, instead of having ways to fill the last three positions on the license plate, we'd have options, giving a total of license plates.  As another example, suppose that repetition of letters were allowed but the three digits in positions two through four must all be distinct from each other (but could repeat the first digit, which must still be nonzero). Then there are still options for the first position and options for the letters, but the three remaining digits can be completed in ways. The total number of license plates would then be . If we want to prohibit repetition of the digit in the first position as well, we need a bit more thought. We first have choices for that initial digit. Then, when filling in the next three positions with digits, we need a permutation of length chosen from the remaining digits. Thus, there are ways to complete the digits portion, giving a total of license plates.   "
},
{
  "id": "exa_strings_perm",
  "level": "2",
  "url": "s_strings_permutations.html#exa_strings_perm",
  "type": "Example",
  "number": "2.5",
  "title": "",
  "body": " Imagine placing the letters of the English alphabet in a bag and drawing them out one at a time (without returning a letter once it's been drawn) to form a six-character string. We know there are strings of length six that can be formed from the English alphabet. However, if we restrict the manner of string formation, not all strings are possible. The string yellow has six characters, but it uses the letter l twice and thus cannot be formed by drawing letters from a bag. However, jacket can be formed in this manner. Starting from a full bag, we note there are choices for the first letter. Once it has been removed, there are letters remaining in the bag. After drawing the second letter, there are letters remaining. Continuing, we note that immediately before the sixth letter is drawn from the bag, there are letters in the bag. Thus, we can form six-character strings of English letters by drawing letters from a bag, a little more than half the total number of six-character strings on this alphabet.  "
},
{
  "id": "s_strings_permutations-4",
  "level": "2",
  "url": "s_strings_permutations.html#s_strings_permutations-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "permutation "
},
{
  "id": "s_strings_permutations-5",
  "level": "2",
  "url": "s_strings_permutations.html#s_strings_permutations-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "factorial "
},
{
  "id": "prop_strings_permutations",
  "level": "2",
  "url": "s_strings_permutations.html#prop_strings_permutations",
  "type": "Proposition",
  "number": "2.6",
  "title": "",
  "body": "  If is an -element set and is a positive integer with , then the number of -strings of length that are permutations is .    The proposition is true since when constructing a permutation from an -element set, we see that there are choices for . After fixing , we have that for , there are choices, as we can use any element of . For , there are choices, since we can use any element in . For , there are choices, because we can use any element of except . Noting that our proof is complete.   "
},
{
  "id": "exa_strings_officers",
  "level": "2",
  "url": "s_strings_permutations.html#exa_strings_officers",
  "type": "Example",
  "number": "2.7",
  "title": "",
  "body": "  It's time to elect a slate of four class officers (President, Vice President, Secretary and Treasurer) from the pool of students enrolled in Applied Combinatorics. If any interested student could be elected to any position (Alice contends this is a big if since Bob is running), how many different slates of officers can be elected?    To count possible officer slates, work from a set containing the names of the interested students (yes, even poor Bob). A permutation of length four chosen from is then a slate of officers by considering the first name in the permutation as the President, the second as the Vice President, the third as the Secretary, and the fourth as the Treasurer. Thus, the number of officer slates is .   "
},
{
  "id": "s_strings_permutations-9",
  "level": "2",
  "url": "s_strings_permutations.html#s_strings_permutations-9",
  "type": "Example",
  "number": "2.8",
  "title": "",
  "body": " Let's return to the license plate question of . Suppose that Georgia required that the three letters be distinct from each other. Then, instead of having ways to fill the last three positions on the license plate, we'd have options, giving a total of license plates.  As another example, suppose that repetition of letters were allowed but the three digits in positions two through four must all be distinct from each other (but could repeat the first digit, which must still be nonzero). Then there are still options for the first position and options for the letters, but the three remaining digits can be completed in ways. The total number of license plates would then be . If we want to prohibit repetition of the digit in the first position as well, we need a bit more thought. We first have choices for that initial digit. Then, when filling in the next three positions with digits, we need a permutation of length chosen from the remaining digits. Thus, there are ways to complete the digits portion, giving a total of license plates.  "
},
{
  "id": "s_strings_combinations",
  "level": "1",
  "url": "s_strings_combinations.html",
  "type": "Section",
  "number": "2.3",
  "title": "Combinations",
  "body": " Combinations  To motivate the topic of this section, we consider another variant on the officer election problem from . Suppose that instead of electing students to specific offices, the class is to elect an executive council of four students from the pool of students. Each position on the executive council is equal, so there would be no difference between Alice winning the first seat on the executive council and her winning the fourth seat. In other words, we just want to pick four of the students without any regard to order. We'll return to this question after introducing our next concept.  Let be a finite set and let be an integer with . Then a -element subset of is also called a combination combination binomial coefficient of size . When , the number of -element subsets of is denoted . binomial coefficient Numbers of the form are called binomial coefficients , and many combinatorists read as  choose  . When we need an in-line version, the preferred notation is binomial coefficient (inline) . Also, the quantity is referred to as the number of combinations of things, taken at a time.  Bob notes that with this notation, the number of ways a four-member executive council can be elected from the interested students is . However, he's puzzled about how to compute the value of . Alice points out that it must be less than , since each executive council could be turned into different slates of officers. Carlos agrees and says that Alice has really hit upon the key idea in finding a formula to compute in general.  binomial coefficient formula for combination number of formula for   If and are integers with , then     If is an -element set, then counts the number of -permutations of length . Each of the  -element subsets of can be turned into permutations, and this accounts for each permutation exactly once. Therefore, and dividing by gives the formula for the number of -element subsets.    Using , we can now determine that is the number of ways a four-member executive council could be elected from the interested students.  Our argument above illustrates a common combinatorial counting strategy. We counted one thing and determined that the objects we wanted to count were overcounted the same number of times each, so we divided by that number ( in this case).  The following result is tantamount to saying that choosing elements to belong to a set (the executive council election winners) is the same as choosing those elements which are to be denied membership (the election losers).    For all integers and with ,      A Southern restaurant lists 21 items in the vegetable category of its menu. (Like any good Southern restaurant, macaroni and cheese is one of the vegetable options.) They sell a vegetable plate which gives the customer four different vegetables from the menu. Since there is no importance to the order the vegetables are placed on the plate, there are different ways for a customer to order a vegetable plate at the restaurant.   Our next example introduces an important correspondence between sets and bit strings that we will repeatedly exploit in this text.  string binary  Let be a positive integer and let be an -element set. Then there is a natural one-to-one correspondence between subsets of and bit strings of length . To be precise, let . Then a subset corresponds to the string where if and only if . For example, if , then the subset corresponds to the bit string . There are bit strings of length eight with precisely three 's. Thinking about this correspondence, what is the total number of subsets of an -element set?   "
},
{
  "id": "s_strings_combinations-3",
  "level": "2",
  "url": "s_strings_combinations.html#s_strings_combinations-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "combination binomial coefficients choose "
},
{
  "id": "prop_strings_binomraw",
  "level": "2",
  "url": "s_strings_combinations.html#prop_strings_binomraw",
  "type": "Proposition",
  "number": "2.9",
  "title": "",
  "body": "binomial coefficient formula for combination number of formula for   If and are integers with , then     If is an -element set, then counts the number of -permutations of length . Each of the  -element subsets of can be turned into permutations, and this accounts for each permutation exactly once. Therefore, and dividing by gives the formula for the number of -element subsets.   "
},
{
  "id": "prop_strings_symmetric",
  "level": "2",
  "url": "s_strings_combinations.html#prop_strings_symmetric",
  "type": "Proposition",
  "number": "2.10",
  "title": "",
  "body": "  For all integers and with ,    "
},
{
  "id": "s_strings_combinations-10",
  "level": "2",
  "url": "s_strings_combinations.html#s_strings_combinations-10",
  "type": "Example",
  "number": "2.11",
  "title": "",
  "body": " A Southern restaurant lists 21 items in the vegetable category of its menu. (Like any good Southern restaurant, macaroni and cheese is one of the vegetable options.) They sell a vegetable plate which gives the customer four different vegetables from the menu. Since there is no importance to the order the vegetables are placed on the plate, there are different ways for a customer to order a vegetable plate at the restaurant.  "
},
{
  "id": "s_strings_combinations-12",
  "level": "2",
  "url": "s_strings_combinations.html#s_strings_combinations-12",
  "type": "Example",
  "number": "2.12",
  "title": "",
  "body": "string binary  Let be a positive integer and let be an -element set. Then there is a natural one-to-one correspondence between subsets of and bit strings of length . To be precise, let . Then a subset corresponds to the string where if and only if . For example, if , then the subset corresponds to the bit string . There are bit strings of length eight with precisely three 's. Thinking about this correspondence, what is the total number of subsets of an -element set?  "
},
{
  "id": "s_strings_comb-proof",
  "level": "1",
  "url": "s_strings_comb-proof.html",
  "type": "Section",
  "number": "2.4",
  "title": "Combinatorial Proofs",
  "body": " Combinatorial Proofs  proof combinatorial  Combinatorial arguments are among the most beautiful in all of mathematics. Oftentimes, statements that can be proved by other, more complicated methods (usually involving large amounts of tedious algebraic manipulations) have very short proofs once you can make a connection to counting. In this section, we introduce a new way of thinking about combinatorial problems with several examples. Our goal is to help you develop a gut feeling for combinatorial problems.    Let be a positive integer. Use to explain why    The sum of the first integers      Consider an array of dots as depicted in . There are dots altogether, with exactly on the main diagonal. The off-diagonal entries split naturally into two equal size parts, those above and those below the diagonal.  Furthermore, each of those two parts has dots. It follows that and this is obvious! Now a little algebra on the right hand side of this expression produces the formula given earlier.      Let be a positive integer. Explain why    The sum of the first odd integers      The left hand side is just the sum of the first odd integers. But as suggested in , this is clearly equal to .     binomial coefficient identity involving   Let be a positive integer. Explain why     Both sides count the number of bit strings of length , with the left side first grouping them according to the number of 's.     binomial coefficient identity involving   Let and be integers with . Explain why     To prove this formula, we simply observe that both sides count the number of bit strings of length that contain  's with the right hand side first partitioning them according to the last occurence of a . (For example, if the last occurs in position , then the remaining  's must appear in the preceding positions, giving strings of this type.) Note that when (so ), we have the same formula as developed earlier for the sum of the first positive integers.     binomial coefficient identity involving   Explain the identity     Both sides count the number of -strings of length , the right hand side first partitioning them according to positions in the string which are not . (For instance, if of the positions are not , we must first choose those positions in ways and then there are ways to fill in those six positions by choosing either a or a for each position.)     binomial coefficient identity involving   Explain why, for each non-negative integer ,     Both sides count the number of bit strings of length with half the bits being 's, with the right side first partitioning them according to the number of 's occurring in the first positions of the string. Note that we are also using the trivial identity .    "
},
{
  "id": "ex_strings_comb-proof_sum-ints",
  "level": "2",
  "url": "s_strings_comb-proof.html#ex_strings_comb-proof_sum-ints",
  "type": "Example",
  "number": "2.13",
  "title": "",
  "body": "  Let be a positive integer. Use to explain why    The sum of the first integers      Consider an array of dots as depicted in . There are dots altogether, with exactly on the main diagonal. The off-diagonal entries split naturally into two equal size parts, those above and those below the diagonal.  Furthermore, each of those two parts has dots. It follows that and this is obvious! Now a little algebra on the right hand side of this expression produces the formula given earlier.   "
},
{
  "id": "s_strings_comb-proof-5",
  "level": "2",
  "url": "s_strings_comb-proof.html#s_strings_comb-proof-5",
  "type": "Example",
  "number": "2.15",
  "title": "",
  "body": "  Let be a positive integer. Explain why    The sum of the first odd integers      The left hand side is just the sum of the first odd integers. But as suggested in , this is clearly equal to .   "
},
{
  "id": "s_strings_comb-proof-6",
  "level": "2",
  "url": "s_strings_comb-proof.html#s_strings_comb-proof-6",
  "type": "Example",
  "number": "2.17",
  "title": "",
  "body": " binomial coefficient identity involving   Let be a positive integer. Explain why     Both sides count the number of bit strings of length , with the left side first grouping them according to the number of 's.   "
},
{
  "id": "s_strings_comb-proof-7",
  "level": "2",
  "url": "s_strings_comb-proof.html#s_strings_comb-proof-7",
  "type": "Example",
  "number": "2.18",
  "title": "",
  "body": " binomial coefficient identity involving   Let and be integers with . Explain why     To prove this formula, we simply observe that both sides count the number of bit strings of length that contain  's with the right hand side first partitioning them according to the last occurence of a . (For example, if the last occurs in position , then the remaining  's must appear in the preceding positions, giving strings of this type.) Note that when (so ), we have the same formula as developed earlier for the sum of the first positive integers.   "
},
{
  "id": "s_strings_comb-proof-8",
  "level": "2",
  "url": "s_strings_comb-proof.html#s_strings_comb-proof-8",
  "type": "Example",
  "number": "2.19",
  "title": "",
  "body": " binomial coefficient identity involving   Explain the identity     Both sides count the number of -strings of length , the right hand side first partitioning them according to positions in the string which are not . (For instance, if of the positions are not , we must first choose those positions in ways and then there are ways to fill in those six positions by choosing either a or a for each position.)   "
},
{
  "id": "ex_strings_comb-proof_2n-choose-n",
  "level": "2",
  "url": "s_strings_comb-proof.html#ex_strings_comb-proof_2n-choose-n",
  "type": "Example",
  "number": "2.20",
  "title": "",
  "body": " binomial coefficient identity involving   Explain why, for each non-negative integer ,     Both sides count the number of bit strings of length with half the bits being 's, with the right side first partitioning them according to the number of 's occurring in the first positions of the string. Note that we are also using the trivial identity .   "
},
{
  "id": "s_strings_bin-coeff",
  "level": "1",
  "url": "s_strings_bin-coeff.html",
  "type": "Section",
  "number": "2.5",
  "title": "The Ubiquitous Nature of Binomial Coefficients",
  "body": " The Ubiquitous Nature of Binomial Coefficients   binomial coefficient   In this section, we present several combinatorial problems that can be solved by appeal to binomial coefficients, even though at first glance, they do not appear to have anything to do with sets.   The office assistant is distributing supplies. In how many ways can he distribute 18 identical folders among four office employees: Audrey, Bart, Cecilia and Darren, with the additional restriction that each will receive at least one folder?  Imagine the folders placed in a row. Then there are 17 gaps between them. Of these gaps, choose three and place a divider in each. Then this choice divides the folders into four non-empty sets. The first goes to Audrey, the second to Bart, Thus the answer is . In , we illustrate this scheme with Audrey receiving folders, Bart getting , Cecilia and Darren 7.   Distributing Identical Objects into Distinct Cells       Suppose we redo the preceding problem but drop the restriction that each of the four employees gets at least one folder. Now how many ways can the distribution be made?    The solution involves a trick of sorts. First, we convert the problem to one that we already know how to solve. This is accomplished by artificially inflating everyone's allocation by one. In other words, if Bart will get folders, we say that he will get . Also, artificially inflate the number of folders by , one for each of the four persons. So now imagine a row of folders. Again, choose gaps. This determines a non-zero allocation for each person. The actual allocation is one less and may be zero. So the answer is .     Again we have the same problem as before, but now we want to count the number of distributions where only Audrey and Cecilia are guaranteed to get a folder. Bart and Darren are allowed to get zero folders. Now the trick is to artificially inflate Bart and Darren's allocation, but leave the numbers for Audrey and Cecilia as is. So the answer is .    Here is a reformulation of the preceding discussion expressed in terms of integer solutions of inequalities.  We count the number of integer solutions to the inequality subject to various sets of restrictions on the values of . Some of these restrictions will require that the inequality actually be an equation.  The number of integer solutions is:  , when all and equality holds;  , when all and equality holds;  , when , , , and equality holds;  , when all and the inequality is strict (Imagine a new variable which is the balance. Note that must be positive.);  , when all and the inequality is strict (Add a new variable as above. Now it is the only one which is required to be positive.); and  , when all .     A classical enumeration problem (with connections to several problems) involves counting lattice paths. A lattice path  lattice path  in the plane is a sequence of ordered pairs of integers: so that for all , either  and , or  and .    In , we show a lattice path from to .   A Lattice Path      lattice path  counting   The number of lattice paths from to is .  To see why this formula is valid, note that a lattice path is just an -string with , where stands for horizontal and stands for vertical . In this case, there are exactly moves, of which are horizontal.    Let be a non-negative integer. Then the number of lattice paths from to which never go above the diagonal line is the Catalan number  Catalan number   lattice path  number not crossing     To see that this formula holds, consider the family of all lattice paths from to . A lattice path from to is just a -string of length with exactly  's. So . We classify the paths in as good if they never go over the diagonal; otherwise, they are bad . A string is good if the number of 's in an initial segment of never exceeds the number of 's. For example, the string   is a good lattice path from to , while the path   is bad. In the second case, note that after moves, we have  's and 's.  Let and denote the family of all good and bad paths, respectively. Of course, our goal is to determine .  Consider a path . Then there is a least integer so that has more 's than 's in the first positions. By the minimality of , it is easy to see that must be odd (otherwise, we can back up a step), and if we set , then in the first positions of , there are exactly  's and  's. The remaining positions (the tail of ) have  's and  's. We now transform to a new string by replacing the 's in the tail of by 's and the 's in the tail of by 's and leaving the initial positions unchanged. For example, see , where the path is shown solid and agrees with until it crosses the line and then is the dashed path. Then is a string of length having  's and  's, so is a lattice path from to . Note that there are such lattice paths.   Transforming a Lattice Path    We can also observe that the transformation we've described is in fact a bijection between and , the set of lattice paths from to . To see that this is true, note that every path in must cross the line , so there is a first time it crosses it, say in position . Again, must be odd, so and there are  's and  's in the first positions of . Therefore the tail of contains  's and  's, so interchanging 's and 's in the tail of creates a new string that has  's and  's and thus represents a lattice path from to , but it's still a bad lattice path, as we did not adjust the first part of the path, which results in crossing the line in position . Therefore, and thus after a bit of algebra.   It is worth observing that in , we made use of two common enumerative techniques: giving a bijection between two classes of objects, one of which is easier to count than the other, and counting the objects we do not wish to enumerate and deducting their number from the total.  "
},
{
  "id": "s_strings_bin-coeff-4",
  "level": "2",
  "url": "s_strings_bin-coeff.html#s_strings_bin-coeff-4",
  "type": "Example",
  "number": "2.21",
  "title": "",
  "body": " The office assistant is distributing supplies. In how many ways can he distribute 18 identical folders among four office employees: Audrey, Bart, Cecilia and Darren, with the additional restriction that each will receive at least one folder?  Imagine the folders placed in a row. Then there are 17 gaps between them. Of these gaps, choose three and place a divider in each. Then this choice divides the folders into four non-empty sets. The first goes to Audrey, the second to Bart, Thus the answer is . In , we illustrate this scheme with Audrey receiving folders, Bart getting , Cecilia and Darren 7.   Distributing Identical Objects into Distinct Cells    "
},
{
  "id": "s_strings_bin-coeff-5",
  "level": "2",
  "url": "s_strings_bin-coeff.html#s_strings_bin-coeff-5",
  "type": "Example",
  "number": "2.23",
  "title": "",
  "body": "  Suppose we redo the preceding problem but drop the restriction that each of the four employees gets at least one folder. Now how many ways can the distribution be made?    The solution involves a trick of sorts. First, we convert the problem to one that we already know how to solve. This is accomplished by artificially inflating everyone's allocation by one. In other words, if Bart will get folders, we say that he will get . Also, artificially inflate the number of folders by , one for each of the four persons. So now imagine a row of folders. Again, choose gaps. This determines a non-zero allocation for each person. The actual allocation is one less and may be zero. So the answer is .   "
},
{
  "id": "s_strings_bin-coeff-6",
  "level": "2",
  "url": "s_strings_bin-coeff.html#s_strings_bin-coeff-6",
  "type": "Example",
  "number": "2.24",
  "title": "",
  "body": " Again we have the same problem as before, but now we want to count the number of distributions where only Audrey and Cecilia are guaranteed to get a folder. Bart and Darren are allowed to get zero folders. Now the trick is to artificially inflate Bart and Darren's allocation, but leave the numbers for Audrey and Cecilia as is. So the answer is .  "
},
{
  "id": "s_strings_bin-coeff-7",
  "level": "2",
  "url": "s_strings_bin-coeff.html#s_strings_bin-coeff-7",
  "type": "Example",
  "number": "2.25",
  "title": "",
  "body": " Here is a reformulation of the preceding discussion expressed in terms of integer solutions of inequalities.  We count the number of integer solutions to the inequality subject to various sets of restrictions on the values of . Some of these restrictions will require that the inequality actually be an equation.  The number of integer solutions is:  , when all and equality holds;  , when all and equality holds;  , when , , , and equality holds;  , when all and the inequality is strict (Imagine a new variable which is the balance. Note that must be positive.);  , when all and the inequality is strict (Add a new variable as above. Now it is the only one which is required to be positive.); and  , when all .    "
},
{
  "id": "s_strings_bin-coeff-8",
  "level": "2",
  "url": "s_strings_bin-coeff.html#s_strings_bin-coeff-8",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "lattice path "
},
{
  "id": "fig_latticepath",
  "level": "2",
  "url": "s_strings_bin-coeff.html#fig_latticepath",
  "type": "Figure",
  "number": "2.26",
  "title": "",
  "body": " A Lattice Path   "
},
{
  "id": "s_strings_bin-coeff-11",
  "level": "2",
  "url": "s_strings_bin-coeff.html#s_strings_bin-coeff-11",
  "type": "Example",
  "number": "2.27",
  "title": "",
  "body": "  lattice path  counting   The number of lattice paths from to is .  To see why this formula is valid, note that a lattice path is just an -string with , where stands for horizontal and stands for vertical . In this case, there are exactly moves, of which are horizontal.  "
},
{
  "id": "exa_lattice-Catalan",
  "level": "2",
  "url": "s_strings_bin-coeff.html#exa_lattice-Catalan",
  "type": "Example",
  "number": "2.28",
  "title": "",
  "body": " Let be a non-negative integer. Then the number of lattice paths from to which never go above the diagonal line is the Catalan number  Catalan number   lattice path  number not crossing     To see that this formula holds, consider the family of all lattice paths from to . A lattice path from to is just a -string of length with exactly  's. So . We classify the paths in as good if they never go over the diagonal; otherwise, they are bad . A string is good if the number of 's in an initial segment of never exceeds the number of 's. For example, the string   is a good lattice path from to , while the path   is bad. In the second case, note that after moves, we have  's and 's.  Let and denote the family of all good and bad paths, respectively. Of course, our goal is to determine .  Consider a path . Then there is a least integer so that has more 's than 's in the first positions. By the minimality of , it is easy to see that must be odd (otherwise, we can back up a step), and if we set , then in the first positions of , there are exactly  's and  's. The remaining positions (the tail of ) have  's and  's. We now transform to a new string by replacing the 's in the tail of by 's and the 's in the tail of by 's and leaving the initial positions unchanged. For example, see , where the path is shown solid and agrees with until it crosses the line and then is the dashed path. Then is a string of length having  's and  's, so is a lattice path from to . Note that there are such lattice paths.   Transforming a Lattice Path    We can also observe that the transformation we've described is in fact a bijection between and , the set of lattice paths from to . To see that this is true, note that every path in must cross the line , so there is a first time it crosses it, say in position . Again, must be odd, so and there are  's and  's in the first positions of . Therefore the tail of contains  's and  's, so interchanging 's and 's in the tail of creates a new string that has  's and  's and thus represents a lattice path from to , but it's still a bad lattice path, as we did not adjust the first part of the path, which results in crossing the line in position . Therefore, and thus after a bit of algebra.  "
},
{
  "id": "s_strings_binom-thm",
  "level": "1",
  "url": "s_strings_binom-thm.html",
  "type": "Section",
  "number": "2.6",
  "title": "The Binomial Theorem",
  "body": " The Binomial Theorem  Here is a truly basic result from combinatorics kindergarten.   Binomial Theorem   binomial theorem    binomial coefficient    Let and be real numbers with , and non-zero. Then for every non-negative integer ,     View as a product Each term of the expansion of the product results from choosing either or from one of these factors. If is chosen times and is chosen times, then the resulting product is . Clearly, the number of such terms is , , out of the factors, we choose the element from of them, while we take in the remaining .     There are times when we are interested not in the full expansion of a power of a binomial, but just the coefficient on one of the terms. The gives that the coefficient of in is .   "
},
{
  "id": "thm_binomial",
  "level": "2",
  "url": "s_strings_binom-thm.html#thm_binomial",
  "type": "Theorem",
  "number": "2.30",
  "title": "Binomial Theorem.",
  "body": " Binomial Theorem   binomial theorem    binomial coefficient    Let and be real numbers with , and non-zero. Then for every non-negative integer ,     View as a product Each term of the expansion of the product results from choosing either or from one of these factors. If is chosen times and is chosen times, then the resulting product is . Clearly, the number of such terms is , , out of the factors, we choose the element from of them, while we take in the remaining .   "
},
{
  "id": "s_strings_binom-thm-4",
  "level": "2",
  "url": "s_strings_binom-thm.html#s_strings_binom-thm-4",
  "type": "Example",
  "number": "2.31",
  "title": "",
  "body": " There are times when we are interested not in the full expansion of a power of a binomial, but just the coefficient on one of the terms. The gives that the coefficient of in is .  "
},
{
  "id": "s_strings_multinom",
  "level": "1",
  "url": "s_strings_multinom.html",
  "type": "Section",
  "number": "2.7",
  "title": "Multinomial Coefficients",
  "body": " Multinomial Coefficients  Let be a set of elements. Suppose that we have two colors of paint, say red and blue, and we are going to choose a subset of elements to be painted red with the rest painted blue. Then the number of different ways this can be done is just the binomial coefficient . Now suppose that we have three different colors, say red, blue, and green. We will choose to be colored red, to be colored blue, and the remaining are to be colored green. We may compute the number of ways to do this by first choosing of the elements to paint red, then from the remaining elements choosing to paint blue, and then painting the remaining elements green. It is easy to see that the number of ways to do this is Numbers of this form are called multinomial coefficients  multinomial coefficient  ; they are an obvious generalization of the binomial coefficients. The general notation is:      multinomial coefficient    For example,   Note that there is some overkill in this notation, since the value of is determined by and the values for , . For example, with the ordinary binomial coefficients, we just write and not .    How many different rearrangements of the string: are possible if all letters and characters must be used?    To answer this question, we note that there are a total of characters distributed as follows: 3 A's, 1 C, 1 D, 7 E's, 1 G, 1 H, 4 I's, 1 K, 5 L's, 2 M's, 2 N's, 1 O, 4 R's, 2 S's, 6 T's, 1 U, 1 W, and 2 !'s. So the number of rearrangements is     Just as with binomial coefficients and the Binomial Theorem, the multinomial coefficients arise in the expansion of powers of a multinomial:   Multinomial Theorem   multinomial theorem    Let be nonzero real numbers with . Then for every ,       What is the coefficient of in ? What about ?    By the Multinomial Theorem, the expansion of has terms of the form The arises when , , and , so it must have coefficient For , the exponent on is odd, which cannot arise in the expansion of , so the coefficient is .    "
},
{
  "id": "s_strings_multinom-2",
  "level": "2",
  "url": "s_strings_multinom.html#s_strings_multinom-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "multinomial coefficients "
},
{
  "id": "s_strings_multinom-5",
  "level": "2",
  "url": "s_strings_multinom.html#s_strings_multinom-5",
  "type": "Example",
  "number": "2.32",
  "title": "",
  "body": "  How many different rearrangements of the string: are possible if all letters and characters must be used?    To answer this question, we note that there are a total of characters distributed as follows: 3 A's, 1 C, 1 D, 7 E's, 1 G, 1 H, 4 I's, 1 K, 5 L's, 2 M's, 2 N's, 1 O, 4 R's, 2 S's, 6 T's, 1 U, 1 W, and 2 !'s. So the number of rearrangements is    "
},
{
  "id": "s_strings_multinom-7",
  "level": "2",
  "url": "s_strings_multinom.html#s_strings_multinom-7",
  "type": "Theorem",
  "number": "2.33",
  "title": "Multinomial Theorem.",
  "body": " Multinomial Theorem   multinomial theorem    Let be nonzero real numbers with . Then for every ,    "
},
{
  "id": "exa_strings_multinom",
  "level": "2",
  "url": "s_strings_multinom.html#exa_strings_multinom",
  "type": "Example",
  "number": "2.34",
  "title": "",
  "body": "  What is the coefficient of in ? What about ?    By the Multinomial Theorem, the expansion of has terms of the form The arises when , , and , so it must have coefficient For , the exponent on is odd, which cannot arise in the expansion of , so the coefficient is .   "
},
{
  "id": "s_strings_discussion",
  "level": "1",
  "url": "s_strings_discussion.html",
  "type": "Section",
  "number": "2.8",
  "title": "Discussion",
  "body": " Discussion  Over coffee, Xing said that he had been experimenting with the SageMath software discussed in . He understood that SageMath was treating a big integer as a string. Xing enthusiastically reported that he had asked SageMath to find the sum of two large integers and , each having more than digits. The software found the answer about as fast as he could hit the enter key on his netbook. That's not so impressive, Alice interjected. A human, even Bob, could do this in a couple of minutes using pencil and paper.   Thanks for your kind remarks, replied Bob, with the rest of the group noting that that Alice was being pretty harsh on Bob and not for any good reason.  Dave took up Bob's case by remarking, Very few humans, not even you Alice, would want to tackle finding the product of and by hand. Xing jumped back in with, That's the point. Even a tiny netbook can find the product very, very quickly. In fact, I tried it out with two integers, each having more than one thousand digits. It found the product in about one second. Ever the skeptic, Zori said, You mean you carefully typed in two integers of that size? Xing quickly replied Of course not. I just copied and pasted the data from one source to another. Yolanda said, What a neat trick that is. Really cuts down the chance of an error.   Dave said What about factoring? Can your netbook with its fancy software for strings factor big integers? Xing said that he would try some sample problems and report back. Carlos said Factoring an integer with several hundred digits is likely to be very challenging, not only for a netbook, but also for a super computer. For example, suppose the given integer was either a prime or the product of two large primes. Detecting which of these two statements holds could be very difficult.   Undeterred, Dave continued, What about exponentiation? Can your software calculate when and are large integers? Xing said That shouldn't be a problem. After all, is just multiplying times itself a total of times, and if you can do multiplication quickly, that's just a loop. Yolanda said that the way Xing was describing things, he was actually talking about a program with nested loops so it might take a long time for such a program to halt. Carlos was quiet but he thought there might be ways to speed up such computations.  By this time, Alice reinserted herself into the conversation: Hey guys. While you were talking, I was looking for big integer topics on the web and found this problem. Is a Catalan number? How would you answer this? Do you have to use special software?   Zori was not happy. She gloomily envisioned a future job hunt in which she was compelled to use big integer arithmetic as a job skill. Arrgghh.  "
},
{
  "id": "s_strings_exercises",
  "level": "1",
  "url": "s_strings_exercises.html",
  "type": "Exercises",
  "number": "2.9",
  "title": "Exercises",
  "body": "   The Hawaiian alphabet consists of letters. How many six-character strings can be made using the Hawaiian alphabet?      How many -digit positive integers can be formed if the digits in odd positions (counting the rightmost digit as position ) must be odd and the digits in even positions must be even and positive?      Matt is designing a website authentication system. He knows passwords are most secure if they contain letters, numbers, and symbols. However, he doesn't quite understand that this additional security is defeated if he specifies in which positions each character type appears. He decides that valid passwords for his system will begin with three letters (uppercase and lowercase both allowed), followed by two digits, followed by one of symbols, followed by two uppercase letters, followed by a digit, followed by one of symbols. How many different passwords are there for his website system? How does this compare to the total number of strings of length made from the alphabet of all uppercase and lowercase English letters, decimal digits, and symbols?      How many ternary strings of length are there in which the zeroes appear only in odd-numbered positions?      Suppose we are making license plates of the form where are capital letters in the English alphabet and are decimal digits ( , elements of the set ) subject to the restriction that at least one digit is nonzero and at least one letter is . How many license plates can we make?      Mrs. Steffen's third grade class has students in it. The students are divided into three groups (numbered , , and ), each having students.  The students in group earned extra minutes of recess by winning a class competition. Before going out for their extra recess time, they form a single file line. In how many ways can they line up?  When all students come in from recess together, they again form a single file line. However, this time the students are arranged so that the first student is from group , the second from group , the third from group , and from there on, the students continue to alternate by group in this order. In how many ways can they line up to come in from recess?        How many strings of the form are there where  for , is an uppercase letter in the English alphabet;  for , is a decimal digit;  is not a vowel ( , ); and  the digits , , and are distinct ( , ).        In this exercise, we consider strings made from uppercase letters in the English alphabet and decimal digits. How many strings of length can be constructed in each of the following scenarios?  The first and last characters of the string are letters.  The first character is a vowel, the second character is a consonant, and the last character is a digit.  Vowels (not necessarily distinct) appear in the third, sixth, and eighth positions and no other positions.  Vowels (not necessarily distinct) appear in exactly two positions.  Precisely four characters in the string are digits and no digit appears more than one time.        A database uses -character strings as record identifiers. The valid characters in these strings are upper-case letters in the English alphabet and decimal digits. (Recall there are letters in the English alphabet and decimal digits.) How many valid record identifiers are possible if a valid record identifier must meet all of the following criteria:  Letter(s) from the set occur in exactly three positions of the string.  The last three characters in the string are distinct decimal digits that do not appear elsewhere in the string.  The remaining characters of the string may be filled with any of the remaining letters or decimal digits.        Let be the set of the lowercase English letters and decimal digits. How many -strings of length satisfy all of the following properties (at the same time)?  The first and last symbols of the string are distinct digits (which may appear elsewhere in the string).  Precisely four of the symbols in the string are the letter ' '.  Precisely three characters in the string are elements of the set and these characters are all distinct.        A donut shop sells 12 types of donuts. A manager wants to buy six donuts, one each for himself and his five employees.  Suppose that he does this by selecting a specific type of donut for each person. (He can select the same type of donut for more than one person.) In how many ways can he do this?  How many ways could he select the donuts if he wants to ensure that he chooses a different type of donut for each person?  Suppose instead that he wishes to select one donut of each of six different types and place them in the breakroom. In how many ways can he do this? (The order of the donuts in the box is irrelevant.)        The sport of korfball is played by teams of eight players. Each team has four men and four women on it. Halliday High School has seven men and women interested in playing korfball. In how many ways can they form a korfball team from their 18 interested students?      Twenty students compete in a programming competition in which the top four students are recognized with trophies for first, second, third, and fourth places.  How many different outcomes are there for the top four places?  At the last minute, the judges decide that they will award honorable mention certificates to four individuals who did not receive trophies. In how many ways can the honorable mention recipients be selected (after the top four places have been determined)? How many total outcomes (trophies plus certificates) are there then?        An ice cream shop has a special on banana splits, and Xing is taking advantage of it. He's astounded at all the options he has in constructing his banana split:  He must choose three different flavors of ice cream to place in the asymmetric bowl the banana split is served in. The shop has 20 flavors of ice cream available.  Each scoop of ice cream must be topped by a sauce, chosen from six different options. Xing is free to put the same type of sauce on more than one scoop of ice cream.  There are sprinkled toppings available, and he must choose three of them to have sprinkled over the entire banana split.    How many different ways are there for Xing to construct a banana split at this ice cream shop?  Suppose that instead of requiring that Xing choose exactly three sprinkled toppings, he is allowed to choose between zero and three sprinkled toppings. In this scenario, how many different ways are there for him to construct a banana split?        Suppose that a teacher wishes to distribute identical pencils to Ahmed, Barbara, Casper, and Dieter such that Ahmed and Dieter receive at least one pencil each, Casper receives no more than five pencils, and Barbara receives at least four pencils. In how many ways can such a distribution be made?      How many integer-valued solutions are there to each of the following equations and inequalities?  , all  , all  , all  , all ,  , all ,        How many integer solutions are there to the equation provided that , and ? What if we add the restriction that ?      How many integer solutions are there to the inequality provided that , , and ?      A teacher has identical pieces of candy. He wants to distribute them to his class of students, although he is willing to take some leftover candy home. (He does not insist on taking any candy home, however.) The student who won a contest in the last class is to receive at least pieces of candy as a reward. Of the remaining students, of them insist on receiving at least one piece of candy, while the remaining students are willing to receive no candy.  In how many ways can he distribute the candy?  In how many ways can he distribute the candy if, in addition to the conditions above, one of his students is diabetic and can receive at most pieces of candy? (This student is one of the who insist on receiving at least one piece of candy.)        Give a combinatorial argument to prove the identity     Think of choosing a team with a captain.      Let and be positive integers. Give a combinatorial argument to prove that for integers ,       How many lattice paths are there from to ?      How many lattice paths are there from to ?      How many lattice paths are there from to that pass through ?      How many lattice paths from to are there that pass through and ?      How many lattice paths from to are there that do not pass through ?      A small-town bank robber is driving his getaway car from the bank he just robbed to his hideout. The bank is at the intersection of Street and Avenue. He needs to return to his hideout at the intersection of Street and Avenue. However, one of his lookouts has reported that the town's one police officer is parked at the intersection of Street and Avenue. Assuming that the bank robber does not want to get arrested and drives only on streets and avenues, in how many ways can he safely return to his hideout? (Streets and avenues are uniformly spaced and numbered consecutively in this small town.)      The setting for this problem is the fictional town of Mascotville, which is laid out as a grid. Mascots are allowed to travel only on the streets, and not as the yellow jacket flies. Buzz, the Georgia Tech mascot, wants to go visit his friend Thundar, the North Dakota State University mascot, who lives blocks east and blocks north of Buzz's hive. However, Uga VIII has recently moved into the doghouse blocks east and blocks north of Buzz's hive and already has a restraining order against Buzz. There's also a pair of tigers (mother and cub) from Clemson who live block east and blocks north of Uga VIII, and they're known for setting traps for Buzz. Buzz wants to travel from his hive to Thundar's pen every day without encountering Uga VIII or The Tiger and The Tiger Cub. However, he wants to avoid the boredom caused by using a route he's used in the past. What is the largest number of consecutive days on which Buzz can make the trip to visit Thundar without reusing a route (you may assume the routes taken by Buzz only go east and north)?      Determine the coefficient on in .      Determine the coefficient on in . (Be careful, as and now appear in multiple terms!)      For each word below, determine the number of rearrangements of the word in which all letters must be used.  OVERNUMEROUSNESSES  OPHTHALMOOTORHINOLARYNGOLOGY  HONORIFICABILITUDINITATIBUS (the longest word in the English language consisting strictly of alternating consonants and vowels )        How many ways are there to paint a set of elements such that are painted white, are painted old gold, are painted blue, are painted yellow, are painted green, and are painted red?      There are many useful sets that are enumerated by the Catalan numbers. (Volume two of R.P. Stanley's Enumerative Combinatorics contains a famous (or perhaps infamous) exercise in parts asking readers to find bijections that will show that the number of various combinatorial structures is , and his web page boasts an additional list of at least parts.) Give bijective arguments to show that each class of objects below is enumerated by . (All three were selected from the list in Stanley's book.)  The number of ways to fully-parenthesize a product of factors as if the multiplication operation in question were not necessarily associative. For example, there is one way to parenthesize a product of two factors , there are two ways to parenthesize a product of three factors ( and ), and there are five ways to parenthesize a product of four factors:   Sequences of  's and  's in which the sum of the first terms is nonnegative for all .  Sequences of integers with . For example, for , the sequences are        For part , think about drawing lattice paths on paper with grid lines and (basically) the number of boxes below a lattice path in a particular column.    "
},
{
  "id": "s_strings_exercises-1",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-1",
  "type": "Exercise",
  "number": "2.9.1",
  "title": "",
  "body": "  The Hawaiian alphabet consists of letters. How many six-character strings can be made using the Hawaiian alphabet?   "
},
{
  "id": "s_strings_exercises-2",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-2",
  "type": "Exercise",
  "number": "2.9.2",
  "title": "",
  "body": "  How many -digit positive integers can be formed if the digits in odd positions (counting the rightmost digit as position ) must be odd and the digits in even positions must be even and positive?   "
},
{
  "id": "s_strings_exercises-3",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-3",
  "type": "Exercise",
  "number": "2.9.3",
  "title": "",
  "body": "  Matt is designing a website authentication system. He knows passwords are most secure if they contain letters, numbers, and symbols. However, he doesn't quite understand that this additional security is defeated if he specifies in which positions each character type appears. He decides that valid passwords for his system will begin with three letters (uppercase and lowercase both allowed), followed by two digits, followed by one of symbols, followed by two uppercase letters, followed by a digit, followed by one of symbols. How many different passwords are there for his website system? How does this compare to the total number of strings of length made from the alphabet of all uppercase and lowercase English letters, decimal digits, and symbols?   "
},
{
  "id": "s_strings_exercises-4",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-4",
  "type": "Exercise",
  "number": "2.9.4",
  "title": "",
  "body": "  How many ternary strings of length are there in which the zeroes appear only in odd-numbered positions?   "
},
{
  "id": "s_strings_exercises-5",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-5",
  "type": "Exercise",
  "number": "2.9.5",
  "title": "",
  "body": "  Suppose we are making license plates of the form where are capital letters in the English alphabet and are decimal digits ( , elements of the set ) subject to the restriction that at least one digit is nonzero and at least one letter is . How many license plates can we make?   "
},
{
  "id": "s_strings_exercises-6",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-6",
  "type": "Exercise",
  "number": "2.9.6",
  "title": "",
  "body": "  Mrs. Steffen's third grade class has students in it. The students are divided into three groups (numbered , , and ), each having students.  The students in group earned extra minutes of recess by winning a class competition. Before going out for their extra recess time, they form a single file line. In how many ways can they line up?  When all students come in from recess together, they again form a single file line. However, this time the students are arranged so that the first student is from group , the second from group , the third from group , and from there on, the students continue to alternate by group in this order. In how many ways can they line up to come in from recess?     "
},
{
  "id": "s_strings_exercises-7",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-7",
  "type": "Exercise",
  "number": "2.9.7",
  "title": "",
  "body": "  How many strings of the form are there where  for , is an uppercase letter in the English alphabet;  for , is a decimal digit;  is not a vowel ( , ); and  the digits , , and are distinct ( , ).     "
},
{
  "id": "s_strings_exercises-8",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-8",
  "type": "Exercise",
  "number": "2.9.8",
  "title": "",
  "body": "  In this exercise, we consider strings made from uppercase letters in the English alphabet and decimal digits. How many strings of length can be constructed in each of the following scenarios?  The first and last characters of the string are letters.  The first character is a vowel, the second character is a consonant, and the last character is a digit.  Vowels (not necessarily distinct) appear in the third, sixth, and eighth positions and no other positions.  Vowels (not necessarily distinct) appear in exactly two positions.  Precisely four characters in the string are digits and no digit appears more than one time.     "
},
{
  "id": "s_strings_exercises-9",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-9",
  "type": "Exercise",
  "number": "2.9.9",
  "title": "",
  "body": "  A database uses -character strings as record identifiers. The valid characters in these strings are upper-case letters in the English alphabet and decimal digits. (Recall there are letters in the English alphabet and decimal digits.) How many valid record identifiers are possible if a valid record identifier must meet all of the following criteria:  Letter(s) from the set occur in exactly three positions of the string.  The last three characters in the string are distinct decimal digits that do not appear elsewhere in the string.  The remaining characters of the string may be filled with any of the remaining letters or decimal digits.     "
},
{
  "id": "s_strings_exercises-10",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-10",
  "type": "Exercise",
  "number": "2.9.10",
  "title": "",
  "body": "  Let be the set of the lowercase English letters and decimal digits. How many -strings of length satisfy all of the following properties (at the same time)?  The first and last symbols of the string are distinct digits (which may appear elsewhere in the string).  Precisely four of the symbols in the string are the letter ' '.  Precisely three characters in the string are elements of the set and these characters are all distinct.     "
},
{
  "id": "s_strings_exercises-11",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-11",
  "type": "Exercise",
  "number": "2.9.11",
  "title": "",
  "body": "  A donut shop sells 12 types of donuts. A manager wants to buy six donuts, one each for himself and his five employees.  Suppose that he does this by selecting a specific type of donut for each person. (He can select the same type of donut for more than one person.) In how many ways can he do this?  How many ways could he select the donuts if he wants to ensure that he chooses a different type of donut for each person?  Suppose instead that he wishes to select one donut of each of six different types and place them in the breakroom. In how many ways can he do this? (The order of the donuts in the box is irrelevant.)     "
},
{
  "id": "s_strings_exercises-12",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-12",
  "type": "Exercise",
  "number": "2.9.12",
  "title": "",
  "body": "  The sport of korfball is played by teams of eight players. Each team has four men and four women on it. Halliday High School has seven men and women interested in playing korfball. In how many ways can they form a korfball team from their 18 interested students?   "
},
{
  "id": "s_strings_exercises-13",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-13",
  "type": "Exercise",
  "number": "2.9.13",
  "title": "",
  "body": "  Twenty students compete in a programming competition in which the top four students are recognized with trophies for first, second, third, and fourth places.  How many different outcomes are there for the top four places?  At the last minute, the judges decide that they will award honorable mention certificates to four individuals who did not receive trophies. In how many ways can the honorable mention recipients be selected (after the top four places have been determined)? How many total outcomes (trophies plus certificates) are there then?     "
},
{
  "id": "s_strings_exercises-14",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-14",
  "type": "Exercise",
  "number": "2.9.14",
  "title": "",
  "body": "  An ice cream shop has a special on banana splits, and Xing is taking advantage of it. He's astounded at all the options he has in constructing his banana split:  He must choose three different flavors of ice cream to place in the asymmetric bowl the banana split is served in. The shop has 20 flavors of ice cream available.  Each scoop of ice cream must be topped by a sauce, chosen from six different options. Xing is free to put the same type of sauce on more than one scoop of ice cream.  There are sprinkled toppings available, and he must choose three of them to have sprinkled over the entire banana split.    How many different ways are there for Xing to construct a banana split at this ice cream shop?  Suppose that instead of requiring that Xing choose exactly three sprinkled toppings, he is allowed to choose between zero and three sprinkled toppings. In this scenario, how many different ways are there for him to construct a banana split?     "
},
{
  "id": "s_strings_exercises-15",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-15",
  "type": "Exercise",
  "number": "2.9.15",
  "title": "",
  "body": "  Suppose that a teacher wishes to distribute identical pencils to Ahmed, Barbara, Casper, and Dieter such that Ahmed and Dieter receive at least one pencil each, Casper receives no more than five pencils, and Barbara receives at least four pencils. In how many ways can such a distribution be made?   "
},
{
  "id": "s_strings_exercises-16",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-16",
  "type": "Exercise",
  "number": "2.9.16",
  "title": "",
  "body": "  How many integer-valued solutions are there to each of the following equations and inequalities?  , all  , all  , all  , all ,  , all ,     "
},
{
  "id": "s_strings_exercises-17",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-17",
  "type": "Exercise",
  "number": "2.9.17",
  "title": "",
  "body": "  How many integer solutions are there to the equation provided that , and ? What if we add the restriction that ?   "
},
{
  "id": "s_strings_exercises-18",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-18",
  "type": "Exercise",
  "number": "2.9.18",
  "title": "",
  "body": "  How many integer solutions are there to the inequality provided that , , and ?   "
},
{
  "id": "s_strings_exercises-19",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-19",
  "type": "Exercise",
  "number": "2.9.19",
  "title": "",
  "body": "  A teacher has identical pieces of candy. He wants to distribute them to his class of students, although he is willing to take some leftover candy home. (He does not insist on taking any candy home, however.) The student who won a contest in the last class is to receive at least pieces of candy as a reward. Of the remaining students, of them insist on receiving at least one piece of candy, while the remaining students are willing to receive no candy.  In how many ways can he distribute the candy?  In how many ways can he distribute the candy if, in addition to the conditions above, one of his students is diabetic and can receive at most pieces of candy? (This student is one of the who insist on receiving at least one piece of candy.)     "
},
{
  "id": "s_strings_exercises-20",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-20",
  "type": "Exercise",
  "number": "2.9.20",
  "title": "",
  "body": "  Give a combinatorial argument to prove the identity     Think of choosing a team with a captain.   "
},
{
  "id": "s_strings_exercises-21",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-21",
  "type": "Exercise",
  "number": "2.9.21",
  "title": "",
  "body": "  Let and be positive integers. Give a combinatorial argument to prove that for integers ,    "
},
{
  "id": "s_strings_exercises-22",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-22",
  "type": "Exercise",
  "number": "2.9.22",
  "title": "",
  "body": "  How many lattice paths are there from to ?   "
},
{
  "id": "s_strings_exercises-23",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-23",
  "type": "Exercise",
  "number": "2.9.23",
  "title": "",
  "body": "  How many lattice paths are there from to ?   "
},
{
  "id": "s_strings_exercises-24",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-24",
  "type": "Exercise",
  "number": "2.9.24",
  "title": "",
  "body": "  How many lattice paths are there from to that pass through ?   "
},
{
  "id": "s_strings_exercises-25",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-25",
  "type": "Exercise",
  "number": "2.9.25",
  "title": "",
  "body": "  How many lattice paths from to are there that pass through and ?   "
},
{
  "id": "s_strings_exercises-26",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-26",
  "type": "Exercise",
  "number": "2.9.26",
  "title": "",
  "body": "  How many lattice paths from to are there that do not pass through ?   "
},
{
  "id": "s_strings_exercises-27",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-27",
  "type": "Exercise",
  "number": "2.9.27",
  "title": "",
  "body": "  A small-town bank robber is driving his getaway car from the bank he just robbed to his hideout. The bank is at the intersection of Street and Avenue. He needs to return to his hideout at the intersection of Street and Avenue. However, one of his lookouts has reported that the town's one police officer is parked at the intersection of Street and Avenue. Assuming that the bank robber does not want to get arrested and drives only on streets and avenues, in how many ways can he safely return to his hideout? (Streets and avenues are uniformly spaced and numbered consecutively in this small town.)   "
},
{
  "id": "s_strings_exercises-28",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-28",
  "type": "Exercise",
  "number": "2.9.28",
  "title": "",
  "body": "  The setting for this problem is the fictional town of Mascotville, which is laid out as a grid. Mascots are allowed to travel only on the streets, and not as the yellow jacket flies. Buzz, the Georgia Tech mascot, wants to go visit his friend Thundar, the North Dakota State University mascot, who lives blocks east and blocks north of Buzz's hive. However, Uga VIII has recently moved into the doghouse blocks east and blocks north of Buzz's hive and already has a restraining order against Buzz. There's also a pair of tigers (mother and cub) from Clemson who live block east and blocks north of Uga VIII, and they're known for setting traps for Buzz. Buzz wants to travel from his hive to Thundar's pen every day without encountering Uga VIII or The Tiger and The Tiger Cub. However, he wants to avoid the boredom caused by using a route he's used in the past. What is the largest number of consecutive days on which Buzz can make the trip to visit Thundar without reusing a route (you may assume the routes taken by Buzz only go east and north)?   "
},
{
  "id": "s_strings_exercises-29",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-29",
  "type": "Exercise",
  "number": "2.9.29",
  "title": "",
  "body": "  Determine the coefficient on in .   "
},
{
  "id": "s_strings_exercises-30",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-30",
  "type": "Exercise",
  "number": "2.9.30",
  "title": "",
  "body": "  Determine the coefficient on in . (Be careful, as and now appear in multiple terms!)   "
},
{
  "id": "s_strings_exercises-31",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-31",
  "type": "Exercise",
  "number": "2.9.31",
  "title": "",
  "body": "  For each word below, determine the number of rearrangements of the word in which all letters must be used.  OVERNUMEROUSNESSES  OPHTHALMOOTORHINOLARYNGOLOGY  HONORIFICABILITUDINITATIBUS (the longest word in the English language consisting strictly of alternating consonants and vowels )     "
},
{
  "id": "s_strings_exercises-32",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-32",
  "type": "Exercise",
  "number": "2.9.32",
  "title": "",
  "body": "  How many ways are there to paint a set of elements such that are painted white, are painted old gold, are painted blue, are painted yellow, are painted green, and are painted red?   "
},
{
  "id": "s_strings_exercises-33",
  "level": "2",
  "url": "s_strings_exercises.html#s_strings_exercises-33",
  "type": "Exercise",
  "number": "2.9.33",
  "title": "",
  "body": "  There are many useful sets that are enumerated by the Catalan numbers. (Volume two of R.P. Stanley's Enumerative Combinatorics contains a famous (or perhaps infamous) exercise in parts asking readers to find bijections that will show that the number of various combinatorial structures is , and his web page boasts an additional list of at least parts.) Give bijective arguments to show that each class of objects below is enumerated by . (All three were selected from the list in Stanley's book.)  The number of ways to fully-parenthesize a product of factors as if the multiplication operation in question were not necessarily associative. For example, there is one way to parenthesize a product of two factors , there are two ways to parenthesize a product of three factors ( and ), and there are five ways to parenthesize a product of four factors:   Sequences of  's and  's in which the sum of the first terms is nonnegative for all .  Sequences of integers with . For example, for , the sequences are        For part , think about drawing lattice paths on paper with grid lines and (basically) the number of boxes below a lattice path in a particular column.   "
},
{
  "id": "s_induction_intro",
  "level": "1",
  "url": "s_induction_intro.html",
  "type": "Section",
  "number": "3.1",
  "title": "Introduction",
  "body": " Introduction  A professor decides to liven up the next combinatorics class by giving a door prize. As students enter class (on time, because to be late is a bit insensitive to the rest of the class), they draw a ticket from a box. On each ticket, a positive integer has been printed. No information about the range of ticket numbers is given, although they are guaranteed to be distinct. The box of tickets was shaken robustly before the drawing, so the contents are thoroughly mixed, and the selection is done without looking inside the box.  After each student has selected a ticket, the professor announces that a cash prize of one dollar (this is a university, you know) will be awarded to the student holding the lowest numbered ticket from among those drawn.  Must the prize be awarded? In other words, given a set of positive integers, in this case the set of ticket numbers chosen by the students, must there be a least one? More generally, is it true that in any set of positive integers, there is always a least one? What happens if there is an enrollment surge and there are infinitely many students in the class and each has a ticket?  "
},
{
  "id": "s_induction_posintsord",
  "level": "1",
  "url": "s_induction_posintsord.html",
  "type": "Section",
  "number": "3.2",
  "title": "The Positive Integers are Well Ordered",
  "body": " The Positive Integers are Well Ordered  Most likely, you answered the questions posed in with an enthusiastic yes , in part because you wanted the shot at the money, but more concretely because it seems so natural. But you may be surprised to learn that this is really a much more complex subject than you might think at first. In , we discuss the development of the number systems starting from the Peano Postulates. Although we will not devote much space in this chapter to this topic, it is important to know that the positive integers come with some assembly required. In particular, the basic operations of addition and multiplication don't come for free; instead they have to be defined.  As a by-product of this development, we get the following fundamentally important property of the set of positive integers:   Well Ordered Property of the Positive Integers  well ordered property  Every non-empty set of positive integers has a least element.   An immediate consequence of the well ordered property is that the professor will indeed have to pay someone a dollar even if there are infinitely many students in the class.  "
},
{
  "id": "princ_well-order",
  "level": "2",
  "url": "s_induction_posintsord.html#princ_well-order",
  "type": "Principle",
  "number": "3.1",
  "title": "Well Ordered Property of the Positive Integers.",
  "body": " Well Ordered Property of the Positive Integers  well ordered property  Every non-empty set of positive integers has a least element.  "
},
{
  "id": "s_induction_statements",
  "level": "1",
  "url": "s_induction_statements.html",
  "type": "Section",
  "number": "3.3",
  "title": "The Meaning of Statements",
  "body": " The Meaning of Statements  statements meaning of  Have you ever taken standardized tests where they give you the first few terms of a sequence and then ask you for the next one? Here are some sample questions. In each case, see if you can determine a reasonable answer for the next term.         Pretty easy stuff! OK, now try the following somewhat more challenging sequence. Here, we'll give you a lot more terms and challenge you to find the next one. Trust us when we say that we really have in mind something very concrete, and once it's explained, you'll agree that it's obvious. But for now, it's far from it.  Here's another danger lurking around the corner when we encounter formulas like What do the dots in this statement mean? In fact, let's consider a much simpler question. What is meant by the following expression: Are we talking about the sum of the first six positive integers, or are we talking about the sum of the first terms from the more complicated challenge sequence given above? You are supposed to answer that you don't know, and that's the correct answer.  The point here is that without a clarifying comment or two, the notation isn't precisely defined. Let's see how to make things right.  First, let be a function. Set and if , define  Sigma-notation definition of To see that these two statements imply that the expression is defined for all positive integers, apply the Well Ordered Property to the set of all positive integers for which the expression is not defined and use the recursive definition to define it for the least element.  So if we want to talk about the sum of the first six positive integers, then we should write: Now it is clear that we are talking about a computation that yields as an answer.  A second example: previously, we defined by writing By this point, you should realize that there's a problem here. Multiplication, like addition, is a binary operation. And what do those dots mean? Here's a way to do the job more precisely. Define to be if . And when , set . factorial recursive definition   Definitions like these are called recursive definitions recursive definition . They can be made with different starting points. For example, we could have set when , and when , set .  Here's a code snippet in SageMath, which is based on Python, so this also works as Python code.   What is the value of sumrecursive(4) ? (In order to make sure you understand how this recursive function works, calculate out sumrecursive(4) should be by hand before modifying the SageMath cell above.) Does it make sense to say that sumrecursive(n) is defined for all positive integers ? Did you recognize that this program provides a precise meaning to the expression:   "
},
{
  "id": "s_induction_statements-10",
  "level": "2",
  "url": "s_induction_statements.html#s_induction_statements-10",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "recursive definitions "
},
{
  "id": "s_induction_bincoeffs",
  "level": "1",
  "url": "s_induction_bincoeffs.html",
  "type": "Section",
  "number": "3.4",
  "title": "Binomial Coefficients Revisited",
  "body": " Binomial Coefficients Revisited  The binomial coefficient was originally defined in terms of the factorial notation, and with our recursive definitions of the factorial notation, we also have a complete and legally-correct definition of binomial coefficients. The following recursive formula provides an efficient computational scheme.  Let and be integers with . If or , set . If , set  binomial coefficient  recursive formula for   This recursion has a natural combinatorial interpretation. Both sides count the number of -element subsets of , with the right-hand side first grouping them into those which contain the element and then those which don't. The traditional form of displaying this recursion is shown in . This pattern is called Pascal's triangle. Other than the s at the ends of each row, an entry of the triangle is determined by adding the entry to the left and the entry to the right in the row above.   Pascal's Triangle            1                   1   1                 1   2   1               1   3   3   1             1   4   6   4   1           1   5   10   10   5   1         1   6   15   20   15   6   1       1   7   21   35   35   21   7   1     1   8   28   56   70   56   28   8   1     Xing was intrigued by the fact that he now had two fundamentally different ways to calculate binomial coefficients. One way is to write and just carry out the specified arithmetic. The second way is to use the recursion of Pascal's triangle, so that you are just performing additions. So he experimented by writing a computer program to calculate binomial coefficients, using a library that treats big integers as strings. Which of the two ways do you think proved to be faster when say was between and and was around ?  "
},
{
  "id": "fig_pascal",
  "level": "2",
  "url": "s_induction_bincoeffs.html#fig_pascal",
  "type": "Figure",
  "number": "3.2",
  "title": "",
  "body": " Pascal's Triangle            1                   1   1                 1   2   1               1   3   3   1             1   4   6   4   1           1   5   10   10   5   1         1   6   15   20   15   6   1       1   7   21   35   35   21   7   1     1   8   28   56   70   56   28   8   1    "
},
{
  "id": "s_induction_recursion",
  "level": "1",
  "url": "s_induction_recursion.html",
  "type": "Section",
  "number": "3.5",
  "title": "Solving Combinatorial Problems Recursively",
  "body": " Solving Combinatorial Problems Recursively   In this section, we present examples of combinatorial problems for which solutions can be computed recursively. In , we return to these problems and obtain even more compact solutions. Our first problem is one discussed in our introductory chapter.   A family of lines is drawn in the plane with (1) each pair of lines crossing and (2) no three lines crossing in the same point. Let denote the number of regions into which the plane is partitioned by these lines. Evidently, , , and . To determine for all positive integers, it is enough to note that , and when , . This formula follows from the observation that if we label the lines as , , then the points on line where it crosses the other lines in the family divide into segments, two of which are infinite. Each of these segments is associated with a region determined by the first lines that has now been subdivided into two, giving us more regions than were determined by lines. This situation is illustrated in , where the line containing the three dots is . The other lines divide it into four segments, which then divide larger regions to create regions and , and , and , and and .   Lines and regions in the plane    With the recursive formula, we thus have , and . Even by hand, it wouldn't be all that much trouble to calculate . We could do it before lunch.    A checkerboard will be tiled with rectangles of size and . Find a recursive formula for the number of tilings. Clearly, and . When , consider the rectangle that covers the square in the upper right corner. If it is vertical, then preceding it, we have a tiling of the first columns. If it is horizontal, then so is the rectangle immediately underneath it, and proceeding them is a tiling of the first columns. This shows that . In particular, , and .   Again, if compelled, we could get by hand, and a computer algebra system could get .   Call a ternary string good if it never contains a followed immediately by a ; otherwise, call it bad . Let be the number of good strings of length . Obviously , since all strings of length are good. Also, since the only bad string of length is . Now consider a value of larger than .  Partition the set of good strings of length into three parts, according to the last character. Good strings ending in can be preceded by any good string of length , so there are such strings. The same applies for good strings ending in . For good strings ending in , however, we have to be more careful. We can precede the by a good string of length provided that the string does not end in . There are good strings of length and of these, exactly end in a . Therefore there are good strings of length that end in a . Hence the total number of good strings of length satisfies the recursive formula . Thus and .   Once more, is doable by hand, while even a modest computer can be coaxed into giving us .    Finding Greatest Common Divisors  There is more meat than you might think to the following elementary theorem, which seems to simply state a fact that you've known since second grade.   Division Theorem   division theorem    Let and be positive integers. Then there exist unique integers and so that We call the quotient and the remainder .    We settle the claim for existence. The uniqueness part is just high-school algebra. If the theorem fails to hold, then let be the least positive integer for which there are integers and with , but there do not exist integers and with and .  First, we note that , for if , then we could take and . Also, we cannot have , for if , then we can take and . Now the statement holds for the pair , so there are integers and so that Since , we know that . If , then On the other hand, if , then The contradiction completes the proof.    Recall that an integer is a divisor  divisor  of an integer if there is an integer such that . (We write and read   divides   .  divides  ) An integer is a common divisor  divisor  common  of integers and if is a divisor of both and . The greatest common divisor  divisor  greatest common   greatest common divisor  divisor, greatest common  of and , written , is the largest of all the common divisors of and .  Here's a particularly elegant application of the preceding basic theorem:   Euclidean Algorithm   Euclidean algorithm    Let be positive integers with and let and be the unique integers for which If , then . If , then divides , and .    Consider the expression , which is equivalent to . If a number is a divisor of and , then must also divide . Similarly, if is a divisor of and , then must also divide .    Here is a code snippet that computes the greatest common divisor of and when and are positive integers with . We use the familiar notation m%n to denote the remainder in the expression , with .   Feel free to change the values 12 and 5 above in the SageMath cell in the HTML version of the text to calculate the greatest common divisor of some other integers. Just remember that the code assumes when you do so!  The disadvantage of this approach is the somewhat wasteful use of memory due to recursive function calls. It is not difficult to develop code for computing the greatest common divisor of and using only a loop, , there are no recursive calls. With minimal extra work, such code can also be designed to solve the following diophantine equation problem:    linear diophantine equation    Let , , and be positive integers. Then there exist integers and , not necessarily non-negative, solving the linear diophantine equation if and only if is a multiple of the greatest common divisor of and .    Let's see how the Euclidean algorithm can be used to write in the form with with the following example.    Find the greatest common divisor of and and find integers and such that .    In solving the problem, we demonstrate how to perform the Euclidean algorithm so that we can find and by working backward. First, we note that Now the Euclidean algorithm tells us that , so we write Continuing, we have and , so .  To find and , we now work backward through the equations we found earlier, solving them for the remainder term and then substituting. We begin with But we know that , so Finally, , so now we have Therefore and .      Sorting  One of the most common and most basic computing problems is sorting: Given a sequence of distinct integers, rearrange them so that they are in increasing order. We describe here an easy recursive strategy for accomplishing this task. This strategy is known as Merge Sort  merge sort   sorting  , and it is one of several optimal algorithms for sorting. Introductory computer science courses treat this topic in greater depth. In our course, we simply need some good strategy and merge sort works fine for our purposes.  To present merge sort  merge sort  , must first develop a strategy for solving a special case of the sorting problem. Suppose we have distinct integers arranged as two lists with and . How do we merge these two sequences into a single increasing sequence of length . Imagine the two sequences placed on two horizontal lines, one immediately under the other. Then let be the least integer in the first sequence and the least integer in the second. At the moment, this implies that and , but integers will be deleted from the two sequences as the process is carried out. Regardless, the meaning of and will be preserved. Also, set . Then take as the minimum of and and delete from the sequence in which it occurs. Then increase by and repeat. Here is a code snippet for accomplishing a merge operation, with now written as u[p] and now written as v[q] .   Now that we have a good strategy for merging, it is easy to develop a recursive strategy for sorting. Given a sequence of distinct integers, we set and . Then let for and , for . Sort the two subsequences and then merge them. For a concrete example, given the sequence , we split into and . These subsequences are sorted (by a recursive call) into and , and then these two sorted sequences are merged.  For running time, if is the number of operations it takes to sort a sequence of distinct integers, then , since it clearly takes steps to merge two sorted sequences of length . This leads to the bound for some positive constant , and in computer science courses, you will learn (here it is an exercise) that this is optimal.   "
},
{
  "id": "s_induction_recursion-2-2",
  "level": "2",
  "url": "s_induction_recursion.html#s_induction_recursion-2-2",
  "type": "Example",
  "number": "3.3",
  "title": "",
  "body": " A family of lines is drawn in the plane with (1) each pair of lines crossing and (2) no three lines crossing in the same point. Let denote the number of regions into which the plane is partitioned by these lines. Evidently, , , and . To determine for all positive integers, it is enough to note that , and when , . This formula follows from the observation that if we label the lines as , , then the points on line where it crosses the other lines in the family divide into segments, two of which are infinite. Each of these segments is associated with a region determined by the first lines that has now been subdivided into two, giving us more regions than were determined by lines. This situation is illustrated in , where the line containing the three dots is . The other lines divide it into four segments, which then divide larger regions to create regions and , and , and , and and .   Lines and regions in the plane    With the recursive formula, we thus have , and . Even by hand, it wouldn't be all that much trouble to calculate . We could do it before lunch.  "
},
{
  "id": "s_induction_recursion-2-3",
  "level": "2",
  "url": "s_induction_recursion.html#s_induction_recursion-2-3",
  "type": "Example",
  "number": "3.5",
  "title": "",
  "body": " A checkerboard will be tiled with rectangles of size and . Find a recursive formula for the number of tilings. Clearly, and . When , consider the rectangle that covers the square in the upper right corner. If it is vertical, then preceding it, we have a tiling of the first columns. If it is horizontal, then so is the rectangle immediately underneath it, and proceeding them is a tiling of the first columns. This shows that . In particular, , and .  "
},
{
  "id": "s_induction_recursion-2-5",
  "level": "2",
  "url": "s_induction_recursion.html#s_induction_recursion-2-5",
  "type": "Example",
  "number": "3.6",
  "title": "",
  "body": " Call a ternary string good if it never contains a followed immediately by a ; otherwise, call it bad . Let be the number of good strings of length . Obviously , since all strings of length are good. Also, since the only bad string of length is . Now consider a value of larger than .  Partition the set of good strings of length into three parts, according to the last character. Good strings ending in can be preceded by any good string of length , so there are such strings. The same applies for good strings ending in . For good strings ending in , however, we have to be more careful. We can precede the by a good string of length provided that the string does not end in . There are good strings of length and of these, exactly end in a . Therefore there are good strings of length that end in a . Hence the total number of good strings of length satisfies the recursive formula . Thus and .  "
},
{
  "id": "thm_division",
  "level": "2",
  "url": "s_induction_recursion.html#thm_division",
  "type": "Theorem",
  "number": "3.7",
  "title": "Division Theorem.",
  "body": " Division Theorem   division theorem    Let and be positive integers. Then there exist unique integers and so that We call the quotient and the remainder .    We settle the claim for existence. The uniqueness part is just high-school algebra. If the theorem fails to hold, then let be the least positive integer for which there are integers and with , but there do not exist integers and with and .  First, we note that , for if , then we could take and . Also, we cannot have , for if , then we can take and . Now the statement holds for the pair , so there are integers and so that Since , we know that . If , then On the other hand, if , then The contradiction completes the proof.   "
},
{
  "id": "s_induction_gcd-4",
  "level": "2",
  "url": "s_induction_recursion.html#s_induction_gcd-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "divisor divides common divisor greatest common divisor "
},
{
  "id": "thm_euclideanalg",
  "level": "2",
  "url": "s_induction_recursion.html#thm_euclideanalg",
  "type": "Theorem",
  "number": "3.8",
  "title": "Euclidean Algorithm.",
  "body": " Euclidean Algorithm   Euclidean algorithm    Let be positive integers with and let and be the unique integers for which If , then . If , then divides , and .    Consider the expression , which is equivalent to . If a number is a divisor of and , then must also divide . Similarly, if is a divisor of and , then must also divide .   "
},
{
  "id": "thm_gcd-dioph",
  "level": "2",
  "url": "s_induction_recursion.html#thm_gcd-dioph",
  "type": "Theorem",
  "number": "3.9",
  "title": "",
  "body": "  linear diophantine equation    Let , , and be positive integers. Then there exist integers and , not necessarily non-negative, solving the linear diophantine equation if and only if is a multiple of the greatest common divisor of and .   "
},
{
  "id": "s_induction_gcd-13",
  "level": "2",
  "url": "s_induction_recursion.html#s_induction_gcd-13",
  "type": "Example",
  "number": "3.10",
  "title": "",
  "body": "  Find the greatest common divisor of and and find integers and such that .    In solving the problem, we demonstrate how to perform the Euclidean algorithm so that we can find and by working backward. First, we note that Now the Euclidean algorithm tells us that , so we write Continuing, we have and , so .  To find and , we now work backward through the equations we found earlier, solving them for the remainder term and then substituting. We begin with But we know that , so Finally, , so now we have Therefore and .   "
},
{
  "id": "s_induction_recursion_sorting-2",
  "level": "2",
  "url": "s_induction_recursion.html#s_induction_recursion_sorting-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Merge Sort "
},
{
  "id": "s_induction_induction",
  "level": "1",
  "url": "s_induction_induction.html",
  "type": "Section",
  "number": "3.6",
  "title": "Mathematical Induction",
  "body": " Mathematical Induction  Now we move on to induction, the powerful twin of recursion.  Let be a positive integer. Consider the following mathematical statements, each of which involve :  .  .  .  .  .  .  .    Such statements are called open statements statement open . Open statements can be considered as equations , , statements that are valid for certain values of . Statement 1 is valid only when . Statement 2 is never valid, , it has no solutions among the positive integers. Statement 3 has exactly two solutions, and Statement 4 has six solutions. On the other hand, Statements 5, 6 and 7 are valid for all positive integers.  At this point, you are probably scratching your head, thinking that this discussion is trivial. But let's consider some statements that are a bit more complex.  The sum of the first positive integers is .  The sum of the first odd positive integers is .  when .    How can we establish the validity of such statements, provided of course that they are actually true? The starting point for providing an answer is the following property:   Principle of Mathematical Induction  induction principle of mathematical   Let be an open statement involving a positive integer . If is true, and if for each positive integer , assuming that the statement is true implies that the statement is true, then is true for every positive integer .    With a little thought, you should see that the is logically equivalent to the . If you haven't already done so, now might be a good time to look over on background material.  "
},
{
  "id": "s_induction_induction-4",
  "level": "2",
  "url": "s_induction_induction.html#s_induction_induction-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "open statements equations "
},
{
  "id": "princ_math-induction",
  "level": "2",
  "url": "s_induction_induction.html#princ_math-induction",
  "type": "Principle",
  "number": "3.11",
  "title": "Principle of Mathematical Induction.",
  "body": " Principle of Mathematical Induction  induction principle of mathematical   Let be an open statement involving a positive integer . If is true, and if for each positive integer , assuming that the statement is true implies that the statement is true, then is true for every positive integer .   "
},
{
  "id": "s_induction_inductdefs",
  "level": "1",
  "url": "s_induction_inductdefs.html",
  "type": "Section",
  "number": "3.7",
  "title": "Inductive Definitions",
  "body": " Inductive Definitions  Although it is primarily a matter of taste, recursive definitions can also be recast in an inductive setting. As a first example, set and whenever has been defined, set .  As a second example, set In this second example, we are already using an abbreviated form, as we have omitted some English phrases. But the meaning should be clear.  Now let's back up and give an example which would really be part of the development of number systems. Suppose you knew everything there was to know about the addition of positive integers but had never heard anything about multiplication . Here's how this operation can be defined.  Let be a positive integer. Then set You should see that this defines multiplication but doesn't do anything in terms of establishing such familiar properties as the commutative and associative properties. Check out some of the details in .  "
},
{
  "id": "s_induction_proofs",
  "level": "1",
  "url": "s_induction_proofs.html",
  "type": "Section",
  "number": "3.8",
  "title": "Proofs by Induction",
  "body": " Proofs by Induction  No discussion of recursion and induction would be complete without some obligatory examples of proofs using induction. We start with the Hello World example.    For every positive integer , the sum of the first positive integers is , ,     For our first version of a proof of , we clearly identify the open statement and describe the proof carefully in terms of . As you develop more experience with writing proofs by induction, this will become less essential, as you'll see in the second version of the proof.   Let be a positive integer, and let be the open statement We will prove that is true for all positive integers by induction. For the basis step, we must prove that is true. When , the left-hand side of is just , while the right-hand side evaluates to . Therefore, is true.  Next we assume that for some positive integer , is true. That is, we assume We now seek to prove that is true, and begin by considering the left-hand side of . We notice that since our inductive hypothesis that is true gives us the simpler formula for the summation. Now continuing with a bit of algebra, we find Therefore, is true. Since we have shown that is true and that for every positive integer , if is true, then is true, we conclude that is true for all positive integers by the .   Before looking at a refined version of this proof, let's take a moment to discuss the key steps in every proof by induction. The first step is the basis step  basis step  , in which the open statement is shown to be true. (It's worth noting that there's nothing special about here. If we want to prove only that is true for all integers , then proving that is true is our basis step.) When proving the basis step, if is an equation, we do not just write down and move on. We need to prove that is true. Notice how in the proof above, we discussed the left-hand side of and the right-hand side of and concluded that they were equal.  After the basis step comes the inductive step  inductive step  , in which we assume that is true for some positive integer and prove that is true. When doing this, we call our inductive hypothesis  inductive hypothesis  . In the inductive step, the most common mistake students make is starting with the entirety of and manipulating it until they obtain a true statement. This is dangerous, as it is possible to start with something false and through valid algebraic steps, obtain a true statement. Instead, the best option is to work as with the basis step: if is an equation or inequality, work on one side until you find a place to apply the inductive hypothesis and then continue until you obtain the other side. If the algebra gets tricky along the way, you can also work with the left-hand side of and separately work with the right-hand side of . If you're able to manipulate both sides to be in the same form, then you have shown they are equal and is true.  Now let's take a look at a more refined proof of . From here on, when we give a proof by induction, we'll use this style. As you're getting started with induction proofs, you may find it useful to be more explicit about the steps as we did in the first proof above.   We first prove the assertion when . For this value of , the left-hand side is just , while the right-hand side evaluates to .  Now assume that for some positive integer , the formula holds when , , assume that Then it follows that Thus the formula also holds when . By the , it holds for all positive integers .   The preceding arguments are 100% correct but some combinatorial mathematicians would argue that they may actually hide what is really going on. These folks would much prefer a combinatorial proof, as was provided in . Our perspective is that you should prefer to give a combinatorial proof when you can find one. But if pressed, you should be able to give a formal proof by mathematical induction.  Here's a second example, also quite a classic. Again, recall that we gave a combinatorial proof in the last chapter. As you read the proof, make sure you can identify the open statement , the basis step, and the inductive step.    For each positive integer , the sum of the first odd positive integers is , ,     We will prove this by induction. First, note that the formula holds when . Now suppose that is a positive integer and that the formula holds when , , assume Then Therefore, the proposition follows by the .    Here's a more general version of the first result in this section, and again we note that we gave a combinatorial proof in .    Let and be non-negative integers with . Then     Fix a non-negative integer . We then prove the formula by induction on . If , note that the left hand side is just , while the right hand side is which is also . Now assume that is a non-negative integer, with , and that the formula holds when , , assume that Then Therefore, the proposition follows by the Principle of Mathematical Induction.    "
},
{
  "id": "prop_sumints",
  "level": "2",
  "url": "s_induction_proofs.html#prop_sumints",
  "type": "Proposition",
  "number": "3.12",
  "title": "",
  "body": "  For every positive integer , the sum of the first positive integers is , ,    "
},
{
  "id": "s_induction_proofs-5",
  "level": "2",
  "url": "s_induction_proofs.html#s_induction_proofs-5",
  "type": "Proof",
  "number": "3.8.1",
  "title": "",
  "body": " Let be a positive integer, and let be the open statement We will prove that is true for all positive integers by induction. For the basis step, we must prove that is true. When , the left-hand side of is just , while the right-hand side evaluates to . Therefore, is true.  Next we assume that for some positive integer , is true. That is, we assume We now seek to prove that is true, and begin by considering the left-hand side of . We notice that since our inductive hypothesis that is true gives us the simpler formula for the summation. Now continuing with a bit of algebra, we find Therefore, is true. Since we have shown that is true and that for every positive integer , if is true, then is true, we conclude that is true for all positive integers by the .  "
},
{
  "id": "s_induction_proofs-6",
  "level": "2",
  "url": "s_induction_proofs.html#s_induction_proofs-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "basis step "
},
{
  "id": "s_induction_proofs-7",
  "level": "2",
  "url": "s_induction_proofs.html#s_induction_proofs-7",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "inductive step inductive hypothesis "
},
{
  "id": "s_induction_proofs-9",
  "level": "2",
  "url": "s_induction_proofs.html#s_induction_proofs-9",
  "type": "Proof",
  "number": "3.8.2",
  "title": "",
  "body": " We first prove the assertion when . For this value of , the left-hand side is just , while the right-hand side evaluates to .  Now assume that for some positive integer , the formula holds when , , assume that Then it follows that Thus the formula also holds when . By the , it holds for all positive integers .  "
},
{
  "id": "prop_sumodd",
  "level": "2",
  "url": "s_induction_proofs.html#prop_sumodd",
  "type": "Proposition",
  "number": "3.13",
  "title": "",
  "body": "  For each positive integer , the sum of the first odd positive integers is , ,     We will prove this by induction. First, note that the formula holds when . Now suppose that is a positive integer and that the formula holds when , , assume Then Therefore, the proposition follows by the .   "
},
{
  "id": "prop_sum-bincoeffs",
  "level": "2",
  "url": "s_induction_proofs.html#prop_sum-bincoeffs",
  "type": "Proposition",
  "number": "3.14",
  "title": "",
  "body": "  Let and be non-negative integers with . Then     Fix a non-negative integer . We then prove the formula by induction on . If , note that the left hand side is just , while the right hand side is which is also . Now assume that is a non-negative integer, with , and that the formula holds when , , assume that Then Therefore, the proposition follows by the Principle of Mathematical Induction.   "
},
{
  "id": "s_induction_strong-induction",
  "level": "1",
  "url": "s_induction_strong-induction.html",
  "type": "Section",
  "number": "3.9",
  "title": "Strong Induction",
  "body": " Strong Induction  There are occasions where the , at least as we have studied it up to this point, does not seem sufficient. Here is a concrete example. The professor asked Bob to study a function defined recursively by with and . Specifically, the professor asked Bob to compute , which seems like a daunting task. Over coffee, Bob scribbled on a napkin and determined that and , and on the basis of these calculations alone, he thought that it might just be possible that for all . If this were true, he could simply report that .  Bob was beginning to understand proofs by induction, so he tried to prove that for all by induction. For the base step, he noted that , so all is ok to this point. For the inductive step, he assumed that for some and then tried to prove that . If this step could be completed, then the proof by induction would be done.  But at this point, Bob seemed to hit a barrier, because using the inductive hypothesis to replace by . However, he's was totally perplexed about what to do with the . If he knew that , then the right hand side would result in , which is exactly what he wants. Bob always plays by the rules, and he has to admit that he doesn't know that . He only knows that .  Bob was about to throw in the towel and ask his computer to start making the calculations recursively, when Carlos comes along and asks what he's doing. Carlos sees right away that the approach Bob was taking to prove that by induction won't work but after a moment's reflection, Carlos says that there's a stronger form of an inductive proof that will do the trick. Carlos patiently explained to Bob a proposition which is called the Strong Principle of Mathematical Induction induction strong . To prove that an open statement is valid for all , it is enough to  Show that is valid, and  Show that is valid whenever is valid for all integers with .    The validity of this proposition is trivial since it is stronger than the principle of induction. What is novel here is that in order to prove a statement, it is sometimes to your advantage to prove something even stronger. Combinatorial mathematicians call this the bootstrap phenomenon.  Equipped with this observation, Bob saw clearly that the strong principle of induction was enough to prove that for all . So he could power down his computer and enjoy his coffee.  "
},
{
  "id": "s_induction_strong-induction-5",
  "level": "2",
  "url": "s_induction_strong-induction.html#s_induction_strong-induction-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Strong Principle of Mathematical Induction "
},
{
  "id": "s_induction_discussion",
  "level": "1",
  "url": "s_induction_discussion.html",
  "type": "Section",
  "number": "3.10",
  "title": "Discussion",
  "body": " Discussion  The group was debating the value of combinatorial proofs versus formal proofs by induction. Xing said that he actually preferred to do a proof by induction, as a combinatorial proof, it could be argued, wasn't really a proof. Dave mumbled Combinatorial proofs can always be made rigorous. They went back and forth for a while and then Alice said But the professor never explained that weird sequence did he?   Dave was on a roll. He asked, Who has change for a dollar? but nobody understood why he would derail an argument over proofs when everybody had already paid for the coffee. Alice was more to the point You know Dave, sometimes I just don't understand why you say the things you do. Dave smiled (maybe it was more of a smirk) It's about making change. The terms in this sequence are the fewest number of coins required to make change. Bob said I don't get it. Dave continued The term is the fewest number of U.S. coins required to total to cents. Now everyone groaned, everyone except Carlos, who thought that at least this time, Dave was really clever.  Well , said Bob, that takes care of the strange sequence, but I still don't see any difference between induction and recursion. Dave couldn't keep quiet No one does. Xing thought differently and said In many programming languages, you try to avoid recursion, preferring to use loops instead. Otherwise, you wind up overloading the stack. As just one example, you can compute the greatest common divisor of and , as well as find and so that using a loop with very little storage. The recursive approach discussed previously, with the inherent back tracking at the end, isn't really necessary. Yolanda was impressed with Xing's extensive programming experience and knowledge, but Alice was less so.  Zori was losing her patience and was especially grumpy today I don't see any value to any of this stuff. Who's going to pay me to find greatest common divisors? Dave said Nobody. Alice said, But maybe there are some principles here that have practical application. Carlos joined in, saying I think the basic principles behind establishing that a computer program does what you intend have a lot to do with induction and recursion. Bob said I don't understand. When I write a program, I just pay attention to details and after just a few corrections, they always work. Alice was brutal Maybe that's because you don't do anything complicated. Carlos was more gentle Big software projects might have hundreds of thousands of lines of code, and pieces of the final product might be written by different groups of programmers at different moments in time. Establishing correctness can be a very difficult task. Zori's ears perked up as she thought she saw something in this last bit of conversation that might be a way to earn a salary.  "
},
{
  "id": "s_induction_exercises",
  "level": "1",
  "url": "s_induction_exercises.html",
  "type": "Exercises",
  "number": "3.11",
  "title": "Exercises",
  "body": "   A database uses record identifiers that are alphanumeric strings in which the decimal digits and upper-case letters are valid symbols. The criteria that define a valid record identifier are recursive. A valid record identifier of length can be constructed in the following ways:  beginning with any upper-case letter other than and followed by any valid record identifier of length ;  beginning with , , or and followed by any valid record identifier of length ; or  beginning with and followed by any string of decimal digits.  Let denote the number of valid record identifiers of length . We take and note that . Find a recursion for when and use it to compute .      Consider a checkerboard. The squares of the checkerboard are to be painted white and gold, but no two consecutive squares may both be painted white. Let denote the number of ways to paint the checkerboard subject to this rule. Find a recursive formula for valid for .      Give a recursion for the number of ternary strings of length that do not contain as a substring.      A checkerboard is to be tiled using two types of tiles. The first tile is a square tile. The second tile is called an -tile and is formed by removing the upper-right square from a tile. The -tiles can be used in any of the four ways they can be rotated. (That is, the missing square can be in any of four positions.) Let denote the number of tilings of the checkerboard using tiles and -tiles. Find a recursive formula for and use it to determine .      Let be the set of strings on the alphabet that do not contain or as a substring. Give a recursion for the number of strings in of length .    Check your recursion by manually computing , , , and .      Find as well as integers and such that .      Find as well as integers and such that .      Let , , , and be integers and suppose that . What can you say about ?      (A challenging problem) For each formula, give both a proof using the Principle of Mathematical Induction and a combinatorial proof. One of the two will be easier while the other will be more challenging.          Show that for all integers , .      Show that for all positive integers ,       Show that for all positive integers , is divisible by .      Show that for all positive integers , is divisible by .      It turns out that if and are positive integers with , then there is a positive integer such that is divisible by for all positive integers . Determine in terms of and and prove that it is a divisor of for all positive integers .      Use mathematical induction to prove that for all integers , is divisible by .      Give a proof by induction of the Binomial Theorem ( ). How do you think it compares to the combinatorial argument given in ?      Consider the recursion given by for with and . Use mathematical induction to prove that for all integers .      Consider the recursion given by for with . Show that is divisible by if and only if is divisible by .      Suppose that and . Prove that for all integers , .      Show that there is a positive constant so that any algorithm that sorts a sequence of positive integers must, in worst case, take steps.    Hint: There are permutations of a set of distinct integers. Each operation reduces the number of possibilities by a multiplicative fraction which is at most . So if there are operations, then . Now look up Stirling's approximation for and continue from there.    "
},
{
  "id": "s_induction_exercises-1",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-1",
  "type": "Exercise",
  "number": "3.11.1",
  "title": "",
  "body": "  A database uses record identifiers that are alphanumeric strings in which the decimal digits and upper-case letters are valid symbols. The criteria that define a valid record identifier are recursive. A valid record identifier of length can be constructed in the following ways:  beginning with any upper-case letter other than and followed by any valid record identifier of length ;  beginning with , , or and followed by any valid record identifier of length ; or  beginning with and followed by any string of decimal digits.  Let denote the number of valid record identifiers of length . We take and note that . Find a recursion for when and use it to compute .   "
},
{
  "id": "s_induction_exercises-2",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-2",
  "type": "Exercise",
  "number": "3.11.2",
  "title": "",
  "body": "  Consider a checkerboard. The squares of the checkerboard are to be painted white and gold, but no two consecutive squares may both be painted white. Let denote the number of ways to paint the checkerboard subject to this rule. Find a recursive formula for valid for .   "
},
{
  "id": "s_induction_exercises-3",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-3",
  "type": "Exercise",
  "number": "3.11.3",
  "title": "",
  "body": "  Give a recursion for the number of ternary strings of length that do not contain as a substring.   "
},
{
  "id": "s_induction_exercises-4",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-4",
  "type": "Exercise",
  "number": "3.11.4",
  "title": "",
  "body": "  A checkerboard is to be tiled using two types of tiles. The first tile is a square tile. The second tile is called an -tile and is formed by removing the upper-right square from a tile. The -tiles can be used in any of the four ways they can be rotated. (That is, the missing square can be in any of four positions.) Let denote the number of tilings of the checkerboard using tiles and -tiles. Find a recursive formula for and use it to determine .   "
},
{
  "id": "s_induction_exercises-5",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-5",
  "type": "Exercise",
  "number": "3.11.5",
  "title": "",
  "body": "  Let be the set of strings on the alphabet that do not contain or as a substring. Give a recursion for the number of strings in of length .    Check your recursion by manually computing , , , and .   "
},
{
  "id": "s_induction_exercises-6",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-6",
  "type": "Exercise",
  "number": "3.11.6",
  "title": "",
  "body": "  Find as well as integers and such that .   "
},
{
  "id": "s_induction_exercises-7",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-7",
  "type": "Exercise",
  "number": "3.11.7",
  "title": "",
  "body": "  Find as well as integers and such that .   "
},
{
  "id": "s_induction_exercises-8",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-8",
  "type": "Exercise",
  "number": "3.11.8",
  "title": "",
  "body": "  Let , , , and be integers and suppose that . What can you say about ?   "
},
{
  "id": "s_induction_exercises-9",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-9",
  "type": "Exercise",
  "number": "3.11.9",
  "title": "",
  "body": "  (A challenging problem) For each formula, give both a proof using the Principle of Mathematical Induction and a combinatorial proof. One of the two will be easier while the other will be more challenging.       "
},
{
  "id": "s_induction_exercises-10",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-10",
  "type": "Exercise",
  "number": "3.11.10",
  "title": "",
  "body": "  Show that for all integers , .   "
},
{
  "id": "s_induction_exercises-11",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-11",
  "type": "Exercise",
  "number": "3.11.11",
  "title": "",
  "body": "  Show that for all positive integers ,    "
},
{
  "id": "s_induction_exercises-12",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-12",
  "type": "Exercise",
  "number": "3.11.12",
  "title": "",
  "body": "  Show that for all positive integers , is divisible by .   "
},
{
  "id": "s_induction_exercises-13",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-13",
  "type": "Exercise",
  "number": "3.11.13",
  "title": "",
  "body": "  Show that for all positive integers , is divisible by .   "
},
{
  "id": "s_induction_exercises-14",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-14",
  "type": "Exercise",
  "number": "3.11.14",
  "title": "",
  "body": "  It turns out that if and are positive integers with , then there is a positive integer such that is divisible by for all positive integers . Determine in terms of and and prove that it is a divisor of for all positive integers .   "
},
{
  "id": "s_induction_exercises-15",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-15",
  "type": "Exercise",
  "number": "3.11.15",
  "title": "",
  "body": "  Use mathematical induction to prove that for all integers , is divisible by .   "
},
{
  "id": "s_induction_exercises-16",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-16",
  "type": "Exercise",
  "number": "3.11.16",
  "title": "",
  "body": "  Give a proof by induction of the Binomial Theorem ( ). How do you think it compares to the combinatorial argument given in ?   "
},
{
  "id": "s_induction_exercises-17",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-17",
  "type": "Exercise",
  "number": "3.11.17",
  "title": "",
  "body": "  Consider the recursion given by for with and . Use mathematical induction to prove that for all integers .   "
},
{
  "id": "s_induction_exercises-18",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-18",
  "type": "Exercise",
  "number": "3.11.18",
  "title": "",
  "body": "  Consider the recursion given by for with . Show that is divisible by if and only if is divisible by .   "
},
{
  "id": "s_induction_exercises-19",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-19",
  "type": "Exercise",
  "number": "3.11.19",
  "title": "",
  "body": "  Suppose that and . Prove that for all integers , .   "
},
{
  "id": "s_induction_exercises-20",
  "level": "2",
  "url": "s_induction_exercises.html#s_induction_exercises-20",
  "type": "Exercise",
  "number": "3.11.20",
  "title": "",
  "body": "  Show that there is a positive constant so that any algorithm that sorts a sequence of positive integers must, in worst case, take steps.    Hint: There are permutations of a set of distinct integers. Each operation reduces the number of possibilities by a multiplicative fraction which is at most . So if there are operations, then . Now look up Stirling's approximation for and continue from there.   "
},
{
  "id": "s_basics_pigeonhole",
  "level": "1",
  "url": "s_basics_pigeonhole.html",
  "type": "Section",
  "number": "4.1",
  "title": "The Pigeon Hole Principle",
  "body": " The Pigeon Hole Principle  A function is said to be (read one-to-one function one-to-one ) when for all with . A function is also called an injection or we say that is injective function injective injection . When is , we note that . Conversely, we have the following self-evident statement, which is popularly called the Pigeon Hole principle.   Pigeon Hole Principle  pigeon hole principle   If is a function and , then there exists an element and distinct elements so that .    In more casual language, if you must put pigeons into holes, then you must put two pigeons into the same hole.  Here is a classic result, whose proof follows immediately from the .   Erdős\/Szekeres Theorem   If and are non-negative integers, then any sequence of distinct real numbers either has an increasing subsequence of terms, or it has a decreasing subsequence of terms.    Let be a sequence of distinct real numbers. For each , let be the maximum number of terms in a increasing subsequence of with the first term. Also, let be the maximum number of terms in a decreasing subsequence of with the last term. If there is some for which , then has an increasing subsequence of terms. Conversely, if for some , we have , then we conclude that has a decreasing subsequence of terms.  It remains to consider the case where and for all . Since there are ordered pairs of the form where and , we conclude from the Pigeon Hole principle that there must be integers and with for which . Since and are distinct, we either have or . In the first case, any increasing subsequence with as its first term can be extended by prepending at the start. This shows that . In the second case, any decreasing sequence of with as its last element can be extended by adding at the very end. This shows .    In , we will explore some powerful generalizations of the . All these results have the flavor of the general assertion that total disarray is impossible.  "
},
{
  "id": "s_basics_pigeonhole-2",
  "level": "2",
  "url": "s_basics_pigeonhole.html#s_basics_pigeonhole-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "one-to-one injection injective "
},
{
  "id": "prop_pigeon",
  "level": "2",
  "url": "s_basics_pigeonhole.html#prop_pigeon",
  "type": "Proposition",
  "number": "4.1",
  "title": "Pigeon Hole Principle.",
  "body": " Pigeon Hole Principle  pigeon hole principle   If is a function and , then there exists an element and distinct elements so that .   "
},
{
  "id": "thm_ErdosSzekeres",
  "level": "2",
  "url": "s_basics_pigeonhole.html#thm_ErdosSzekeres",
  "type": "Theorem",
  "number": "4.2",
  "title": "Erdős\/Szekeres Theorem.",
  "body": " Erdős\/Szekeres Theorem   If and are non-negative integers, then any sequence of distinct real numbers either has an increasing subsequence of terms, or it has a decreasing subsequence of terms.    Let be a sequence of distinct real numbers. For each , let be the maximum number of terms in a increasing subsequence of with the first term. Also, let be the maximum number of terms in a decreasing subsequence of with the last term. If there is some for which , then has an increasing subsequence of terms. Conversely, if for some , we have , then we conclude that has a decreasing subsequence of terms.  It remains to consider the case where and for all . Since there are ordered pairs of the form where and , we conclude from the Pigeon Hole principle that there must be integers and with for which . Since and are distinct, we either have or . In the first case, any increasing subsequence with as its first term can be extended by prepending at the start. This shows that . In the second case, any decreasing sequence of with as its last element can be extended by adding at the very end. This shows .   "
},
{
  "id": "s_basics_complexity",
  "level": "1",
  "url": "s_basics_complexity.html",
  "type": "Section",
  "number": "4.2",
  "title": "An Introduction to Complexity Theory",
  "body": " An Introduction to Complexity Theory    Bob says that he's really getting to like this combinatorial mathematics stuff. The concrete nature of the subject is appealing. But he's not sure that he understands the algorithmic component. Sometimes he sees how one might actually compute the answer to a problem provided he had access to a powerful computer. At other times, it seems that a computational approach might be out of reach, even with the world's best and fastest computers at ready access. Carlos says it can be much worse than that. There are easily stateable problems that no one knows how to attack even if all the world's computational power is used in concert. And there's nothing on the horizon that will change that. In fact, build faster computers and you just change the threshold for what is computable. There will still be easily understood problems that will remain unresolved.     Three Questions  We consider three problems with a common starting point. You are given The particulars of how the set is given to you aren't important to the discussion. For example, the data could be given as a text file, with one number on each line. a set of distinct positive integers, each at most , and then asked the following questions.  Is one of the integers in the set ?  Are there three integers in whose sum is ?  Can the set be partitioned as with , so that .    The first of the three problems sounds easy, and it is. You just consider the numbers in the set one by one and test to see if any of them is . You can stop if you ever find this number and report that the answer is yes. If you return a no answer, then you will have to have read every number in the list. Either way, you halt with a correct answer to the question having done at most tests, and even the most modest netbook can do this in a heartbeat. And if the list is expanded to integers, all at most a billion, you can still do it easily. More generally, if you're given a set of numbers and an integer with the question Is a member of ? , you can answer this question in steps, with each step an operation of testing a number in to see if it is exactly equal to . So the running time of this algorithm is proportional to , with the constant depending on the amount of time it takes a computer to perform the basic operation of asking whether a particular integer is equal to the target value.  The second of the three problems is a bit more challenging. Now it seems that we must consider the -element subsets of a set of size . There are such sets. On the one hand, testing three numbers to see if their sum is is very easy, but there are lots and lots of sets to test. Note that , and not too many computers will handle this many operations. Moreover, if the list is expanded to a million numbers, then we have more than triples to test, and that's off the table with today's hardware.  Nevertheless, we can consider the general case. We are given a set of integers and a number . Then we are asked whether there are three integers in whose sum is . The algorithm we have described would have running time proportional to , where the constant of proportionality depends on the time it takes to test a triple of numbers to see if there sum is . Of course, this depends in turn on just how large the integer and the integers in can be.  The third of the three problems is different. First, it seems to be much harder. There are complementary pairs of subsets of a set of size , and one of these involves the empty set and the entire set. But that leaves pairs to test. Each of these tests is not all that tough. A netbook can easily report whether a two subsets have the same sum, even when the two sets form a partition of a set of size , but there are approximately partitions to test and no piece of hardware on the planet will touch that assignment. And if we go up to a set of size , then the combined computing power of all the machines on earth won't get the job done.  In this setting, we have an algorithm, namely testing all partitions, but it is totally unworkable for element sets when is large since it has running time proportional to .    Certificates  certificate  Each of the three problems we have posed is in the form of a yes\/no question. A yes answer to any of the three can be justified by providing a certificate that can be checked efficiently. For example, if you answer the first question with a yes, then you might provide the additional information that you will find as the integer on line in the input file. Of course, you could also provide the source code for the computer program, and let a referee run the entire procedure.  Similarly, if you answer the second question with a yes, then you could specify the three numbers and specify where in the input file they are located. An impartial referee could then verify, if it mattered, that the sum of the three integers was really and that they were located at the specified places in the input file. Alternatively, you could again provide the source code which would require the referee to test all triples and verify that there is one that works.  Likewise, a yes for the third question admits a modest size certificate. You need only specify the elements of the subset . The referee, who is equipped with a computer, can (a) check to see that all numbers in belong to ; (b) form a list of the subset consisting of those integers in that do not belong to ; and (c) compute the sums of the integers in and the integers in and verify that the two sums are equal. But in this case, you would not provide source code for the algorithm, as there does not appear (at least nothing in our discussion thus far provides one) to be a reasonable strategy for deciding this problem when the problem size is large.  Now let's consider the situation with a no answer. When the answer to the first question is no, the certificate can again be a computer program that will enable the referee to consider all the elements of and be satisfied that the number in question is not present. A similar remark holds for the second question, , the program is the certificate.  But the situation with the third question is again very different. Now we can't say to the referee We checked all the possibilities and none of them worked. This could not possibly be a true statement. And we have no computer program that can be run by us or by the referee. The best we could say is that we tried to find a suitable partition and were unable to do so. As a result, we don't know what the correct answer to the question actually is.    Operations  Many of the algorithms we develop in this book, as well as many of the computer programs that result from these algorithms involve basic steps that are called operations operations . The meaning of the word operation is intentionally left as an imprecise notion. An operation might be just comparing two integers to see if they are equal; it might be updating the value of a variable and replacing it by ; and it might be checking whether two set sums are equal. In the third instance, we would typically limit the size of the two subsets as well as the integers in them. As a consequence, we want to be able to say that there is some constant so that an operation can be carried out in time at most on a computer. Different computers yield different values of , but that is a discrepancy which we can safely ignore.    Input Size  input size  Problems come in various sizes. The three problems we have discussed in this chapter have the same input size. Roughly speaking this size is blocks, with each block able to hold an integer of size at most . In this text, we will say that the input size of this problem is , and in some sense ignoring the question of the size of the integers in the set. There are obvious limitations to this approach. We could be given a set of size and a candidate element and be asked whether belongs to . Now suppose that is a bit string the size of a typical compact disk, , some megabytes in length. Just reading the single entry in to see if it's exactly will take some time.  In a similar vein, consider the problem of determining whether a file is located anywhere in the directory structure under in a unix file system. If you go on the basis of name only, then this may be relatively easy. But what if you want to be sure that an exact copy of is present? Now it is much more challenging.   "
},
{
  "id": "s_basics_complexity-2-1",
  "level": "2",
  "url": "s_basics_complexity.html#s_basics_complexity-2-1",
  "type": "Discussion",
  "number": "4.3",
  "title": "",
  "body": " Bob says that he's really getting to like this combinatorial mathematics stuff. The concrete nature of the subject is appealing. But he's not sure that he understands the algorithmic component. Sometimes he sees how one might actually compute the answer to a problem provided he had access to a powerful computer. At other times, it seems that a computational approach might be out of reach, even with the world's best and fastest computers at ready access. Carlos says it can be much worse than that. There are easily stateable problems that no one knows how to attack even if all the world's computational power is used in concert. And there's nothing on the horizon that will change that. In fact, build faster computers and you just change the threshold for what is computable. There will still be easily understood problems that will remain unresolved.  "
},
{
  "id": "s_basics_complexity-5-2",
  "level": "2",
  "url": "s_basics_complexity.html#s_basics_complexity-5-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "operations "
},
{
  "id": "s_basics_big-oh",
  "level": "1",
  "url": "s_basics_big-oh.html",
  "type": "Section",
  "number": "4.3",
  "title": "The Big “Oh” and Little “Oh” Notations",
  "body": " The Big Oh and Little Oh Notations  Let and be functions. We write , and say is Big Oh big Oh notation of , when there is a constant and an integer so that whenever . Although this notation has a long history, we can provide a quite modern justification. If and both describe the number of operations required for two algorithms given input size , then the meaning of is that is no harder than when the problem size is large.  We are particularly interested in comparing functions against certain natural benchmarks, , , , , where , , , , where is a constant, , , , ,   For example, in we learned that there are sorting algorithms with running time where is the number of integers to be sorted. As a second example, we will learn that we can find all shortest paths in an oriented graph on vertices with non-negative weights on edges with an algorithm having running time . At the other extreme, no one knows whether there is a constant and an algorithm for determining whether the chromatic number of a graph is at most three which has running time .  It is important to remember that when we write , we are implying in some sense that is no bigger than , but it may in fact be much smaller. By contrast, there will be times when we really know that one function dominates another. And we have a second kind of notation to capture this relationship.  Let and be functions with and for all . We write , and say that is Little oh little oh notation of , when . For example ; whenever ; and for every . In particular, we write when .  "
},
{
  "id": "s_basics_big-oh-2",
  "level": "2",
  "url": "s_basics_big-oh.html#s_basics_big-oh-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Big Oh "
},
{
  "id": "s_basics_big-oh-6",
  "level": "2",
  "url": "s_basics_big-oh.html#s_basics_big-oh-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Little oh "
},
{
  "id": "s_basics_exact",
  "level": "1",
  "url": "s_basics_exact.html",
  "type": "Section",
  "number": "4.4",
  "title": "Exact Versus Approximate",
  "body": " Exact Versus Approximate   Many combinatorial problems admit exact solutions, and in these cases, we will usually try hard to find them. The from earlier in this chapter is a good example of an exact result Exact results are also called best possible , sharp or tight. . By this statement, we mean that for each pair and of positive integers, there is a sequence of distinct real numbers that has neither an increasing subsequence of size nor a decreasing subsequence of size . To see this, consider the sequence defined as follows: For each , let . Note that each is a block of consecutive integers. Then define a permutation of the first integers by setting if there exist distinct integers and so that and . Also, for each , set in when . Clearly, any increasing subsequence of contains at most one member from each block, so has no increasing sequence of size . On the other hand, any decreasing sequence in is contained in a single block, so has no decreasing sequence of size .  As another example of an exact solution, the number of integer solutions to with for is exactly . On the other hand, nothing we have discussed thus far allows us to provide an exact solution for the number of partitions of an integer .    Approximate and Asymptotic Solutions  Here's an example of a famous problem that we can only discuss in terms of approximate solutions, at least when the input size is suitably large. For an integer , let denote the number of primes among the first positive integers. For example, since , , , and are primes. The exact value of is known when , and in fact:   On the other hand, you might ask whether tends to infinity as grows larger and larger. The answer is yes, and here's a simple and quite classic argument. Suppose to the contrary that there were only primes, where is a positive integer. Suppose these primes are listed in increasing order as , and consider the number . Then is not divisible by any of these primes, and it is larger than , which implies that is either a prime number larger than or divisible by a prime number larger than .  So we know that . In a situation like this, mathematicians typically want to know more about how fast goes to infinity. Some functions go to infinity slowly , such as or . Some go to infinity quickly, like , or . Since , it can't go to infinity as fast as these last three functions, but it might go infinity like or maybe .  On the basis of computational results (done by hand, long before there were computers), Legendre conjectured in 1796 that goes to infinity like . To be more precise, he conjectured that In 1896, exactly one hundred years after Legendre's conjecture, Hadamard and de la Vallée-Poussin independently published proofs of the conjecture, using techniques whose roots are in the Riemann's pioneering work in complex analysis. This result, now known simply as the Prime Number Theorem , continues to this day to be much studied topic at the boundary of analysis and number theory.    Polynomial Time Algorithms  algorithm polynomial time  Throughout this text, we will place considerable emphasis on problems for which a certificate can be found in polynomial time. This refers to problems for which there is some constant so that there is an algorithm for solving the problem which has running time where is the input size. The symbol is suggestive of polynomial . polynomial time problems     ?  Perhaps the most famous question at the boundary of combinatorial mathematics, theoretical computer science and mathematical logic is the notoriously challenging question of deciding whether is the same as . This problem has the shorthand form: ? Here, we present a brief informal discussion of this problem.  First, we have already introduced the class consisting of all yes-no combinatorial problems which admit polynomial time algorithms. The first two problems discussed in this chapter belong to since they can be solved with algorithms that have running time and , respectively. Also, determining whether a graph is -colorable and whether it is connected both admit polynomial time algorithms.  We should emphasize that it may be very difficult to determine whether a problem belongs to class or not. For example, we don't see how to give a fast algorithm for solving the third problem (subset sum), but that doesn't mean that there isn't one. Maybe we all need to study harder!  Setting that issue aside for the moment, the class nondeterministic polynomial time problems consists of yes no problems for which there is a certificate for a yes answer whose correctness can be verified in polynomial time. More formally, this is called the class of nondeterministic polynomial time problems. Our third problem definitely belongs to this class. nondeterministic polynomial time   The famous question is to determine whether the two classes are the same. Evidently, any problem belonging to also belongs to , i.e, , but are they equal? It seems difficult to believe that there is a polynomial time algorithm for settling the third problem (the subset sum problem), and no one has come close to settling this issue. But if you get a good idea, be sure to discuss it with one or both authors of this text before you go public with your news. If it turns out that you are right, you are certain to treasure a photo opportunity with yours truly.   "
},
{
  "id": "s_basics_exact-5-5",
  "level": "2",
  "url": "s_basics_exact.html#s_basics_exact-5-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "nondeterministic polynomial time "
},
{
  "id": "s_basics_discussion",
  "level": "1",
  "url": "s_basics_discussion.html",
  "type": "Section",
  "number": "4.5",
  "title": "Discussion",
  "body": " Discussion  Carlos, Dave and Yolanda were fascinated by the discussion on complexity. Zori was less enthusiastic but even she sensed that the question of which problems could be solved quickly had practical implications. She could even predict that people could earn a nice income solving problems faster and more accurately than their competition.  Bob remarked, I'm not sure I understand what's being talked about here. I don't see why it can't be the case that all problems can be solved. Maybe we just don't know how to do it. Xing said, Any finite problem can be solved. There is always a way to list all the possibilities, compare them one by one and take the best one as the answer. Alice joined in, Well, a problem might take a long time just because it is big. For example, suppose you are given two DVD 's, each completely full with the data for a large integer. How are you possibly going to multiply them together, even with a large computer and fancy software. Carlos then offered, But I think there are really hard problems that any algorithm will take a long time to solve and not just because the input size is large. At this point, I don't know how to formulate such a problem but I suspect that they exist.   "
},
{
  "id": "s_basics_exercises",
  "level": "1",
  "url": "s_basics_exercises.html",
  "type": "Exercises",
  "number": "4.6",
  "title": "Exercises",
  "body": "   Suppose you are given a list of integers, each of size at most . How many operations would it take you to do the following tasks (in answering these questions, we are interested primarily in whether it will take , , , , , , steps. In other words, ignore multiplicative constants.):  Determine if the number is in the list.  Determine if there are two numbers in the list whose sum is .  Determine if there are two numbers in the list whose product is (This one is more subtle than it might appear! It may be to your advantage to sort the integers in the list).  Determine if there is a number for which all the numbers in the list are between and .  Determine the longest sequence of consecutive integers belonging to the list.  Determine the number of primes in the list.  Determine whether there are three integers , and from the list so that .  Determine whether there are three integers , and from the list so that .  Determine whether there are three integers , and from the list so that .  Determine whether there are three integers , and from the list so that .  Determine whether there are two integers and from the list so that is a prime.  Determine the longest arithmetic progression in the list (a sequence is an arithmetic progression when there is a constant so that , for each ).  Determine the number of distinct sums that can be formed from members of the list (arbitrarily many integers from the list are allowed to be terms in the sum).  Determine the number of distinct products that can be formed from members of the list (arbitrarily many integers from the list are allowed to be factors in the product).  Determine for which integers , the list contains at least of the integers from .        If you have to put pigeons into holes, you have to put two pigeons into the same hole. What happens if you have to put pigeons into holes?      Consider the set and suppose you have two holes. Also suppose that you have pigeons: the -element subsets of . Can you put these pigeons into the two holes in a way that there is no -element subset for which all pigeons from go in the same hole? Then answer the same question if with pigeons.      Let . Suppose a friend tells you that he has a secret family of subsets of , and if you guess it correctly, he will give you one million dollars. You think you know the family of subsets he has in mind and it contains exactly half the subsets, , the family has subsets. Discuss how you can share your hunch with your friend in an effort to win the prize.      Let denote the set of positive integers. When is a function, let be the function defined by . What is ?    "
},
{
  "id": "s_basics_exercises-1",
  "level": "2",
  "url": "s_basics_exercises.html#s_basics_exercises-1",
  "type": "Exercise",
  "number": "4.6.1",
  "title": "",
  "body": "  Suppose you are given a list of integers, each of size at most . How many operations would it take you to do the following tasks (in answering these questions, we are interested primarily in whether it will take , , , , , , steps. In other words, ignore multiplicative constants.):  Determine if the number is in the list.  Determine if there are two numbers in the list whose sum is .  Determine if there are two numbers in the list whose product is (This one is more subtle than it might appear! It may be to your advantage to sort the integers in the list).  Determine if there is a number for which all the numbers in the list are between and .  Determine the longest sequence of consecutive integers belonging to the list.  Determine the number of primes in the list.  Determine whether there are three integers , and from the list so that .  Determine whether there are three integers , and from the list so that .  Determine whether there are three integers , and from the list so that .  Determine whether there are three integers , and from the list so that .  Determine whether there are two integers and from the list so that is a prime.  Determine the longest arithmetic progression in the list (a sequence is an arithmetic progression when there is a constant so that , for each ).  Determine the number of distinct sums that can be formed from members of the list (arbitrarily many integers from the list are allowed to be terms in the sum).  Determine the number of distinct products that can be formed from members of the list (arbitrarily many integers from the list are allowed to be factors in the product).  Determine for which integers , the list contains at least of the integers from .     "
},
{
  "id": "s_basics_exercises-2",
  "level": "2",
  "url": "s_basics_exercises.html#s_basics_exercises-2",
  "type": "Exercise",
  "number": "4.6.2",
  "title": "",
  "body": "  If you have to put pigeons into holes, you have to put two pigeons into the same hole. What happens if you have to put pigeons into holes?   "
},
{
  "id": "s_basics_exercises-3",
  "level": "2",
  "url": "s_basics_exercises.html#s_basics_exercises-3",
  "type": "Exercise",
  "number": "4.6.3",
  "title": "",
  "body": "  Consider the set and suppose you have two holes. Also suppose that you have pigeons: the -element subsets of . Can you put these pigeons into the two holes in a way that there is no -element subset for which all pigeons from go in the same hole? Then answer the same question if with pigeons.   "
},
{
  "id": "s_basics_exercises-4",
  "level": "2",
  "url": "s_basics_exercises.html#s_basics_exercises-4",
  "type": "Exercise",
  "number": "4.6.4",
  "title": "",
  "body": "  Let . Suppose a friend tells you that he has a secret family of subsets of , and if you guess it correctly, he will give you one million dollars. You think you know the family of subsets he has in mind and it contains exactly half the subsets, , the family has subsets. Discuss how you can share your hunch with your friend in an effort to win the prize.   "
},
{
  "id": "s_basics_exercises-5",
  "level": "2",
  "url": "s_basics_exercises.html#s_basics_exercises-5",
  "type": "Exercise",
  "number": "4.6.5",
  "title": "",
  "body": "  Let denote the set of positive integers. When is a function, let be the function defined by . What is ?   "
},
{
  "id": "s_graphs_intro",
  "level": "1",
  "url": "s_graphs_intro.html",
  "type": "Section",
  "number": "5.1",
  "title": "Basic Notation and Terminology for Graphs",
  "body": " Basic Notation and Terminology for Graphs  A graph  graph   is a pair where is a set (almost always finite) and is a set of -element subsets of . Elements of are called vertices  vertex  and elements of are called edges  edge  . We call the vertex set of and is the edge set . For convenience, it is customary to abbreviate the edge as just . Remember though that means exactly the same as . If and are distinct vertices from , and are adjacent  adjacent vertices  when ; otherwise, we say they are non-adjacent . We say the edge is incident to  incident to  the vertices and .  For example, we could define a graph with vertex set and edge set . Notice that no edge is incident to , which is perfectly permissible based on our definition. It is quite common to identify a graph with a visualization in which we draw a point for each vertex and a line connecting two vertices if they are adjacent. The graph we've just defined is shown in . It's important to remember that while a drawing of a graph is a helpful tool, it is not the same as the graph. We could draw in any of several different ways without changing what it is as a graph.   A graph on vertices      As is often the case in science and mathematics, different authors use slightly different notation and terminology for graphs. As an example, some use nodes and arcs rather than vertices and edges. Others refer to vertices as points and in this case, they often refer to lines rather than edges. We will try to stick to vertices and edges but confess that we may occasionally lapse into referring to vertices as points. Also, following the patterns of many others, we will also say that adjacent vertices are neighbors  neighbor  . And we will use the more or less standard terminology that the neighborhood  neighborhood (of a vertex)  of a vertex is the set of vertices adjacent to . Thus, using the graph we have depicted in , vertices and are neighbors, and the neighborhood of is while the neighborhood of is the empty set. Also, the degree  degree of a vertex  of a vertex in a graph , denoted , is then the number of vertices in its neighborhood, or equivalently, the number of edges incident to it. For example, we have , , and . If the graph being discussed is clear from context, it is not uncommon to omit the subscript and simply write     degree of vertex in graph  for the degree of .  When and are graphs, we say is a subgraph  subgraph  of when and . We say is an induced subgraph  subgraph  induced  when and . In other words, an induced subgraph is defined completely by its vertex set and the original graph . We say is a spanning subgraph  subgraph  spanning  when . In , we show a graph, a subgraph and an induced subgraph. Neither of these subgraphs is a spanning subgraph.   A Graph, a Subgraph and an Induced Subgraph    A graph is called a complete graph  graph  complete  when is an edge in for every distinct pair . Conversely, is an independent graph  graph  independent  if , for every distinct pair . It is customary to denote a complete graph on vertices by      complete graph on vertices  and an independent graph on vertices by     independent graph on vertices  . In , we show the complete graphs with at most vertices.   Small complete graphs      A sequence of vertices in a graph is called a walk  walk  when is an edge for each . Note that the vertices in a walk need not be distinct. On the other hand, if the vertices are distinct, then the sequence is called a path  path  , and often to emphasize where a path starts and ends, we will say that a sequence of distinct vertices is a path from to in . Similarly, when , a path of distinct vertices is called a cycle  cycle  when is also an edge in . It is customary to denote a path on vertices by     path with vertices  , while     path with vertices  denotes a cycle on vertices. The length  length  of path or cycle  of a path or a cycle is the number of edges it contains. Therefore, the length of is and the length of is . In , we show the paths of length at most , and in , we show the cycles of length at most .   Short paths       Small cycles      If and are graphs, we say is isomorphic  isomorphism  of graphs  to and write when there exists a bijection so that is adjacent to in if and only if is adjacent to in . Often writers will say that  contains  when there is a subgraph of which is isomorphic to . In particular, it is customary to say that contains the cycle (same for and ) when contains a subgraph isomorphic to . The graphs in are isomorphic. An isomorphism between these graphs is given by    A pair of isomorphic graphs      On the other hand, the graphs shown in are not isomorphic, even though they have the same number of vertices and the same number of edges. Can you tell why?   A pair of nonisomorphic graphs      A graph is connected  graph  connected  when there is a path from to in , for every ; otherwise, we say is disconnected  graph  disconnected  . The graph of is disconnected (a sufficient justification for this is that there is no path from to ), while those in are connected. If is disconnected, we call a maximal connected subgraph of a component  component  . By this we mean that a subgraph of is a component of provided that there does not exist a connected subgraph of such that is a subgraph of .  A graph is acyclic  graph  acyclic  when it does not contain any cycle on three or more vertices. Acyclic graphs are also called forests  forest  . A connected acyclic graph is called a tree  tree  . When is a connected graph, a subgraph of is called a spanning tree  tree  spanning  if is both a spanning subgraph of and a tree. In , we show a graph and one of its spanning trees. We will return to the subject of spanning trees in .   A Graph and a Spanning Tree    The following theorem is very elementary, and some authors refer to it as the first theorem of graph theory . However, this basic result can be surprisingly useful.    Let denote the degree of vertex in graph . Then .    We consider how many times an edge contributes to each side of . The and terms on the left hand side each count once, so is counted twice on that side. On the right hand side, is clearly counted twice. Therefore, we have the equality claimed.      For any graph, the number of vertices of odd degree is even.    We will return to the topic of trees later, but before moving on, let us prove one elementary proposition about trees. First, a leaf  leaf  in a tree is a vertex with .    Every tree on vertices has at least two leaves.    Our proof is by induction on . For , there is precisely one tree, which is isomorphic to . Both vertices in this graph are leaves, so the proposition holds for . Now suppose that for some integer , every tree on at most vertices has at least two leaves and let be a tree on vertices. Pick an edge and form a new graph by deleting from . That is, and . Now since does not contain a path from one endpoint of to its other endpoint, is not connected. However, deleting an edge cannot create a cycle, so is a forest. Furthermore, it has precisely two components, each of which is a tree with at most vertices. If each component has at least two vertices, then by induction, each has at least two leaves. In the worst case scenario, two of these leaves are the endpoints of , so at least two of the vertices are leaves in , too. If each component of has only one vertex, then , which has two leaves. If exactly one of the components has only one vertex, then it must be a leaf in . Thus, applying the inductive hypothesis to the other component ensures that there is a second leaf in .    "
},
{
  "id": "s_graphs_intro-2",
  "level": "2",
  "url": "s_graphs_intro.html#s_graphs_intro-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "graph vertices edges vertex set edge set adjacent non-adjacent incident to "
},
{
  "id": "fig_small_graph",
  "level": "2",
  "url": "s_graphs_intro.html#fig_small_graph",
  "type": "Figure",
  "number": "5.1",
  "title": "",
  "body": " A graph on vertices     "
},
{
  "id": "s_graphs_intro-5",
  "level": "2",
  "url": "s_graphs_intro.html#s_graphs_intro-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "nodes arcs points lines neighbors neighborhood degree "
},
{
  "id": "s_graphs_intro-6",
  "level": "2",
  "url": "s_graphs_intro.html#s_graphs_intro-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "subgraph induced subgraph spanning subgraph "
},
{
  "id": "fig_subgraphs",
  "level": "2",
  "url": "s_graphs_intro.html#fig_subgraphs",
  "type": "Figure",
  "number": "5.2",
  "title": "",
  "body": " A Graph, a Subgraph and an Induced Subgraph   "
},
{
  "id": "s_graphs_intro-8",
  "level": "2",
  "url": "s_graphs_intro.html#s_graphs_intro-8",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "complete graph independent graph "
},
{
  "id": "fig_complete_graphs",
  "level": "2",
  "url": "s_graphs_intro.html#fig_complete_graphs",
  "type": "Figure",
  "number": "5.3",
  "title": "",
  "body": " Small complete graphs     "
},
{
  "id": "s_graphs_intro-10",
  "level": "2",
  "url": "s_graphs_intro.html#s_graphs_intro-10",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "walk path cycle length "
},
{
  "id": "fig_paths",
  "level": "2",
  "url": "s_graphs_intro.html#fig_paths",
  "type": "Figure",
  "number": "5.4",
  "title": "",
  "body": " Short paths     "
},
{
  "id": "fig_cycles",
  "level": "2",
  "url": "s_graphs_intro.html#fig_cycles",
  "type": "Figure",
  "number": "5.5",
  "title": "",
  "body": " Small cycles     "
},
{
  "id": "s_graphs_intro-13",
  "level": "2",
  "url": "s_graphs_intro.html#s_graphs_intro-13",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "isomorphic "
},
{
  "id": "fig_isomorphic",
  "level": "2",
  "url": "s_graphs_intro.html#fig_isomorphic",
  "type": "Figure",
  "number": "5.6",
  "title": "",
  "body": " A pair of isomorphic graphs     "
},
{
  "id": "fig_nonisomorphic",
  "level": "2",
  "url": "s_graphs_intro.html#fig_nonisomorphic",
  "type": "Figure",
  "number": "5.7",
  "title": "",
  "body": " A pair of nonisomorphic graphs     "
},
{
  "id": "s_graphs_intro-17",
  "level": "2",
  "url": "s_graphs_intro.html#s_graphs_intro-17",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "connected disconnected component "
},
{
  "id": "s_graphs_intro-18",
  "level": "2",
  "url": "s_graphs_intro.html#s_graphs_intro-18",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "acyclic forests tree spanning tree "
},
{
  "id": "fig_spantree",
  "level": "2",
  "url": "s_graphs_intro.html#fig_spantree",
  "type": "Figure",
  "number": "5.8",
  "title": "",
  "body": " A Graph and a Spanning Tree   "
},
{
  "id": "s_graphs_intro-21",
  "level": "2",
  "url": "s_graphs_intro.html#s_graphs_intro-21",
  "type": "Theorem",
  "number": "5.9",
  "title": "",
  "body": "  Let denote the degree of vertex in graph . Then .    We consider how many times an edge contributes to each side of . The and terms on the left hand side each count once, so is counted twice on that side. On the right hand side, is clearly counted twice. Therefore, we have the equality claimed.   "
},
{
  "id": "s_graphs_intro-22",
  "level": "2",
  "url": "s_graphs_intro.html#s_graphs_intro-22",
  "type": "Corollary",
  "number": "5.10",
  "title": "",
  "body": "  For any graph, the number of vertices of odd degree is even.   "
},
{
  "id": "s_graphs_intro-23",
  "level": "2",
  "url": "s_graphs_intro.html#s_graphs_intro-23",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "leaf "
},
{
  "id": "prop_tree-leaves",
  "level": "2",
  "url": "s_graphs_intro.html#prop_tree-leaves",
  "type": "Proposition",
  "number": "5.11",
  "title": "",
  "body": "  Every tree on vertices has at least two leaves.    Our proof is by induction on . For , there is precisely one tree, which is isomorphic to . Both vertices in this graph are leaves, so the proposition holds for . Now suppose that for some integer , every tree on at most vertices has at least two leaves and let be a tree on vertices. Pick an edge and form a new graph by deleting from . That is, and . Now since does not contain a path from one endpoint of to its other endpoint, is not connected. However, deleting an edge cannot create a cycle, so is a forest. Furthermore, it has precisely two components, each of which is a tree with at most vertices. If each component has at least two vertices, then by induction, each has at least two leaves. In the worst case scenario, two of these leaves are the endpoints of , so at least two of the vertices are leaves in , too. If each component of has only one vertex, then , which has two leaves. If exactly one of the components has only one vertex, then it must be a leaf in . Thus, applying the inductive hypothesis to the other component ensures that there is a second leaf in .   "
},
{
  "id": "s_graphs_multigraphs",
  "level": "1",
  "url": "s_graphs_multigraphs.html",
  "type": "Section",
  "number": "5.2",
  "title": "Multigraphs:  Loops and Multiple Edges",
  "body": " Multigraphs: Loops and Multiple Edges  Consider a graph in which the vertices represent cities and the edges represent highways. Certain pairs of cities are joined by an edge while other pairs are not. The graph may or may not be connected (although a disconnected graph is likely to result in disgruntled commuters). However, certain aspects of real highway networks are not captured by this model. First, between two nearby cities, there can actually be several interconnecting highways, and traveling on one of them is fundamentally different from traveling on another. This leads to the concept of multiple edges edge multiple , , allowing for more than one edge between two adjacent vertices. Also, we could have a highway which leaves a city, goes through the nearby countryside and the returns to the same city where it originated. This leads to the concept of a loop loop , , an edge with both end points being the same vertex. Also, we can allow for more than one loop with the same end point.  Accordingly, authors frequently lead off a discussion on a graph theory topic with a sentence or two like:  In this paper, all graphs will be simple , , we will not allow loops or multiple edges.  In this paper, graphs can have loops and multiple edges.    The terminology is far from standard, but in this text, a graph will always be a simple graph simple graph, , no loops or multiple edges. When we want to allow for loops and multiple edges, we will use the term multigraph multigraph . This suggests the question of what we would call a graph if it is allowed to have loops but not multiple edges, or if multiple edges are allowed but not loops. If we really needed to talk about such graphs, then the English language comes to our rescue, and we just state the restriction explicitly!  "
},
{
  "id": "s_graphs_multigraphs-2",
  "level": "2",
  "url": "s_graphs_multigraphs.html#s_graphs_multigraphs-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "multiple edges loop "
},
{
  "id": "s_graphs_multigraphs-3",
  "level": "2",
  "url": "s_graphs_multigraphs.html#s_graphs_multigraphs-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "simple "
},
{
  "id": "s_graphs_multigraphs-4",
  "level": "2",
  "url": "s_graphs_multigraphs.html#s_graphs_multigraphs-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "simple multigraph "
},
{
  "id": "s_graphs_eulerham",
  "level": "1",
  "url": "s_graphs_eulerham.html",
  "type": "Section",
  "number": "5.3",
  "title": "Eulerian and Hamiltonian Graphs",
  "body": " Eulerian and Hamiltonian Graphs  Graph theory is an area of mathematics that has found many applications in a variety of disciplines. Throughout this text, we will encounter a number of them. However, graph theory traces its origins to a problem in Königsberg, Prussia (now Kaliningrad, Russia) nearly three centuries ago. The river Pregel passes through the city, and there are two large islands in the middle of the channel. These islands were connected to the mainland by seven bridges as indicated in . It is said that the citizens of Königsberg often wondered if it was possible for one to leave his home, walk through the city in such a way that he crossed each bridge precisely one time, and end up at home again. Leonhard Euler settled this problem in 1736 by using graph theory in the form of .   The bridges of Königsberg    Let be a graph without isolated vertices. We say that is eulerian  graph  eulerian  provided that there is a sequence of vertices from , with repetition allowed, so that  ;  for every , is an edge of ;  for every edge , there is a unique integer with for which .    When is eulerian, a sequence satisfying these three conditions is called an eulerian circuit  eulerian  circuit  . A sequence of vertices is called a circuit  circuit  when it satisfies only the first two of these conditions. Note that a sequence consisting of a single vertex is a circuit. Before proceeding to Euler's elegant characterization of eulerian graphs, let's use SageMath to generate some graphs that are and are not eulerian.  Run the code below. It will execute until it finds a graph that is eulerian. The output that will be produced is a list of the degrees of the vertices of the graph followed by a drawing of .   We encourage you to evaluate the run the code above multiple times, even changing the number of vertices and edges. If it seems to be running a log time, it may be that you have made the number of edges too small, so try increasing it a bit. Do you notice anything about the degrees of the vertices in the graphs produced?  Now let's try to find a graph that is not eulerian. Again, the output is the list of degrees of followed by a drawing of .   One thing you probably noticed in running this second block of code is that it tended to come back much faster than the first. That would suggest that the non-eulerian graphs outnumber the eulerian graphs. Did you notice anything different about the degrees of the vertices in these graphs compared to the ones that were eulerian?  The following elementary theorem completely characterizes eulerian graphs. Its proof gives an algorithm that is easily implemented.    A graph is eulerian if and only if it is connected and every vertex has even degree.    Clearly, an eulerian graph must be connected. Also, if is an eulerian circuit in , then for each , we can view the edge as exiting and entering . The degree of every vertex must be even, since for each vertex , the number of edges exiting equals the number of edges entering . Furthermore, each edge incident with either exits from or enters .  We now describe a deterministic process that will either (a) find an eulerian circuit, (b) show that the graph is disconnected, or (c) find a vertex of odd degree. The description is simplified by assuming that the vertices in have been labelled with the positive integers , where is the number of vertices in . Furthermore, we take .  We launch our algorithm with a trivial circuit consisting of the vertex . Thereafter suppose that we have a partial circuit defined by with . The edges of the form have been traversed , while the remaining edges in (if any) have not. If the third condition for an euler circuit is satisfied, we are done, so we assume it does not hold.  We then choose the least integer for which there is an edge incident with that has not already been traversed. If there is no such integer, since there are edges that have not yet been traversed, then we have discovered that the graph is disconnected. So we may assume that the integer exists. Set . We define a sequence recursively. If , set If , we take as the least positive integer in . If , then and we take and halt this subroutine.  When the subroutine halts, we consider two cases. If , then and are vertices of odd degree in . So we are left to consider the case where . In this case, we simply expand our original sequence by replacing the integer by the sequence .    As an example, consider the graph shown in . Evidently, this graph is connected and all vertices have even degree. Here is the sequence of circuits starting with the trivial circuit consisting only of the vertex .    An Eulerian Graph    You should note that holds for loopless graphs in which multiple edges are allowed. Euler used his theorem to show that the multigraph of Königsberg shown in , in which each land mass is a vertex and each bridge is an edge, is not eulerian, and thus the citizens could not find the route they desired. (Note that in there are multiple edges between the same pair of vertices.)   The multigraph of Königsberg's bridges    A graph is said to be hamiltonian  graph  hamiltonian  if there exists a sequence so that  every vertex of appears exactly once in the sequence;  is an edge of ; and  for each , is an edge in .  Such a sequence of vertices is called a hamiltonian cycle .  hamiltonian  cycle    The first graph shown in both eulerian and hamiltonian. The second is hamiltonian but not eulerian.   Eulerian and Hamiltonian Graphs    In , we show a famous graph known as the Petersen graph. It is not hamiltonian.   The Petersen Graph    Unlike the situation with eulerian circuits, there is no known method for quickly determining whether a graph is hamiltonian. However, there are a number of interesting conditions which are sufficient. Here is one quite well known example, due to Dirac.    If is a graph on vertices and each vertex in has at least neighbors, then is hamiltonian.    Suppose the theorem fails and let be the least positive integer for which there exists a graph on vertices so that each vertex in has at least neighbors, yet there is no hamiltonian cycle in . Clearly, .  Now let be the largest integer for which has a path on vertices. Clearly all neighbors of both and appear on this path. By the pigeon hole principle, there is some integer with so that and are edges in . However, this implies that is a cycle of length in . In turn, this requires . But if is any vertex not on the cycle, then must have a neighbor on , which implies that has a path on vertices. The contradiction completes the proof.       Write a couple of sentences to explain informally the difference between a graph being eulerian and a graph being hamiltonian. if possible, give an example (other than the rather silly bridge problem in the text) where each concept would be useful.       Briefly but specifically explain why the graph in is not eulerian.       Try your hand at finding the eulerian circuit in in by following the method illustrated in the text. Instead of giving all the steps or the final circuit here, just give the circuit that you come up with after the initial trivial circuit .      "
},
{
  "id": "fig_bridges",
  "level": "2",
  "url": "s_graphs_eulerham.html#fig_bridges",
  "type": "Figure",
  "number": "5.12",
  "title": "",
  "body": " The bridges of Königsberg   "
},
{
  "id": "s_graphs_eulerham-4",
  "level": "2",
  "url": "s_graphs_eulerham.html#s_graphs_eulerham-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "eulerian "
},
{
  "id": "s_graphs_eulerham-5",
  "level": "2",
  "url": "s_graphs_eulerham.html#s_graphs_eulerham-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "eulerian circuit circuit "
},
{
  "id": "thm_eulerian",
  "level": "2",
  "url": "s_graphs_eulerham.html#thm_eulerian",
  "type": "Theorem",
  "number": "5.13",
  "title": "",
  "body": "  A graph is eulerian if and only if it is connected and every vertex has even degree.    Clearly, an eulerian graph must be connected. Also, if is an eulerian circuit in , then for each , we can view the edge as exiting and entering . The degree of every vertex must be even, since for each vertex , the number of edges exiting equals the number of edges entering . Furthermore, each edge incident with either exits from or enters .  We now describe a deterministic process that will either (a) find an eulerian circuit, (b) show that the graph is disconnected, or (c) find a vertex of odd degree. The description is simplified by assuming that the vertices in have been labelled with the positive integers , where is the number of vertices in . Furthermore, we take .  We launch our algorithm with a trivial circuit consisting of the vertex . Thereafter suppose that we have a partial circuit defined by with . The edges of the form have been traversed , while the remaining edges in (if any) have not. If the third condition for an euler circuit is satisfied, we are done, so we assume it does not hold.  We then choose the least integer for which there is an edge incident with that has not already been traversed. If there is no such integer, since there are edges that have not yet been traversed, then we have discovered that the graph is disconnected. So we may assume that the integer exists. Set . We define a sequence recursively. If , set If , we take as the least positive integer in . If , then and we take and halt this subroutine.  When the subroutine halts, we consider two cases. If , then and are vertices of odd degree in . So we are left to consider the case where . In this case, we simply expand our original sequence by replacing the integer by the sequence .   "
},
{
  "id": "fig_graphs_eulerexample",
  "level": "2",
  "url": "s_graphs_eulerham.html#fig_graphs_eulerexample",
  "type": "Figure",
  "number": "5.14",
  "title": "",
  "body": " An Eulerian Graph   "
},
{
  "id": "fig_bridges-graph",
  "level": "2",
  "url": "s_graphs_eulerham.html#fig_bridges-graph",
  "type": "Figure",
  "number": "5.15",
  "title": "",
  "body": " The multigraph of Königsberg's bridges   "
},
{
  "id": "s_graphs_eulerham-18",
  "level": "2",
  "url": "s_graphs_eulerham.html#s_graphs_eulerham-18",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "hamiltonian hamiltonian cycle "
},
{
  "id": "fig_eulham",
  "level": "2",
  "url": "s_graphs_eulerham.html#fig_eulham",
  "type": "Figure",
  "number": "5.16",
  "title": "",
  "body": " Eulerian and Hamiltonian Graphs   "
},
{
  "id": "fig_petersen",
  "level": "2",
  "url": "s_graphs_eulerham.html#fig_petersen",
  "type": "Figure",
  "number": "5.17",
  "title": "",
  "body": " The Petersen Graph   "
},
{
  "id": "thm_graphs_dirac",
  "level": "2",
  "url": "s_graphs_eulerham.html#thm_graphs_dirac",
  "type": "Theorem",
  "number": "5.18",
  "title": "",
  "body": "  If is a graph on vertices and each vertex in has at least neighbors, then is hamiltonian.    Suppose the theorem fails and let be the least positive integer for which there exists a graph on vertices so that each vertex in has at least neighbors, yet there is no hamiltonian cycle in . Clearly, .  Now let be the largest integer for which has a path on vertices. Clearly all neighbors of both and appear on this path. By the pigeon hole principle, there is some integer with so that and are edges in . However, this implies that is a cycle of length in . In turn, this requires . But if is any vertex not on the cycle, then must have a neighbor on , which implies that has a path on vertices. The contradiction completes the proof.   "
},
{
  "id": "graphs_eulerham_reading_compare",
  "level": "2",
  "url": "s_graphs_eulerham.html#graphs_eulerham_reading_compare",
  "type": "Reading Question",
  "number": "5.3.1",
  "title": "",
  "body": "  Write a couple of sentences to explain informally the difference between a graph being eulerian and a graph being hamiltonian. if possible, give an example (other than the rather silly bridge problem in the text) where each concept would be useful.    "
},
{
  "id": "graphs_eulerham_reading_noneuler",
  "level": "2",
  "url": "s_graphs_eulerham.html#graphs_eulerham_reading_noneuler",
  "type": "Reading Question",
  "number": "5.3.2",
  "title": "",
  "body": "  Briefly but specifically explain why the graph in is not eulerian.    "
},
{
  "id": "graphs_eulerham_reading_euler",
  "level": "2",
  "url": "s_graphs_eulerham.html#graphs_eulerham_reading_euler",
  "type": "Reading Question",
  "number": "5.3.3",
  "title": "",
  "body": "  Try your hand at finding the eulerian circuit in in by following the method illustrated in the text. Instead of giving all the steps or the final circuit here, just give the circuit that you come up with after the initial trivial circuit .    "
},
{
  "id": "s_graphs_color",
  "level": "1",
  "url": "s_graphs_color.html",
  "type": "Section",
  "number": "5.4",
  "title": "Graph Coloring",
  "body": " Graph Coloring   Let's return now to the subject of , assigning frequencies to radio stations so that they don't interfere. The first thing that we will need to do is to turn the map of radio stations into a suitable graph, which should be pretty natural at this juncture. We define a graph in which is the set of radio stations and if and only if radio station and radio station are within miles of each other. With this as our model, then we need to assign different frequencies to two stations if their corresponding vertices are joined by an edge. This leads us to our next topic, coloring graphs.  When is a graph and is a set of elements called colors , a proper coloring  coloring  proper  of is a function such that whenever is an edge in . The least for which has a proper coloring using a set of colors is called the chromatic number  chromatic number  of and is denoted     chromatic number of a graph  . In , we show a proper coloring of a graph using colors. Now we can see that our radio frequency assignment problem is the much-studied question of finding the chromatic number of an appropriate graph.   A proper coloring using colors     Everyone agrees that the graph in has chromatic number at most . However, there's a bit of debate going on about if . Bob figures the authors would not have used five colors if they didn't need to. Carlos says he's glad they're having the discussion, since all having a proper coloring does is provide them with an upper bound on . Bob sees that the graph has a vertex of degree and claims that must mean . Alice groans and draws a graph with vertices, one of which has degree , but with chromatic number . Bob is shocked, but agrees with her. Xing wonders if the fact that the graph does not contain a has any bearing on the chromatic number. Dave's in a hurry to get to the gym, but on his way out the door he says they can get a proper -coloring pretty easily, so . The rest decide it's time to keep reading.   What graph did Alice draw that shocked Bob?    What changes did Dave make to the coloring in to get a proper coloring using four colors?        Bipartite Graphs  A graph with is called a -colorable graph  graph  -colorable  . A couple of minutes of reflection should convince you that for , the cycle with vertices is -colorable. On the other hand, is clearly not -colorable. Furthermore, no odd cycle for is -colorable. It turns out that the property of containing an odd cycle is the only impediment to being -colorable, which means that recognizing -colorable graphs is easy, as the following theorem shows.    A graph is -colorable if and only if it does not contain an odd cycle.    Let be a -colorable graph whose coloring function partitions as . Since there are no edges between vertices on the same side of the partition, any cycle in must alternate vertices between and . In order to complete the cycle, therefore, the number of vertices in the cycle from must be the same as the number from , implying that the cycle has even length.  Now suppose that does not contain an odd cycle. Note that we may assume that is connected, as each component may be colored individually. The distance  between vertices is the length of a shortest path from to , and of course . Fix a vertex and define We claim that coloring the vertices of with color and the vertices of with color is a proper coloring. suppose not. Then without loss of generality, there are vertices such that . Since , and are both even. Let and be shortest paths from to and , respectively. If for all and , then since and are both even, is an odd cycle in , which is a contradiction. Thus, there must be such that , and we may take as large as possible. (That is, after , the two paths do not intersect again.) Thus, is a cycle in . How many vertices are there in this cycle? A quick count shows that it has vertices. We know that and are even, and notice that and are either both even or both odd, since and the odd-subscripted vertices of our path belong to while those with even subscripts belong to . Thus, is even, so is odd, giving a contradiction.    A graph is called a bipartite graph  graph  bipartite  when there is a partition of the vertex set into two sets and so that the subgraphs induced by and are independent graphs, , no edge of has both of its endpoints in or in . Evidently, bipartite graphs are -colorable. On the other hand, when a -colorable graph is disconnected, there is more than one way to define a suitable partition of the vertex set into two independent sets.  Bipartite graphs are commonly used as models when there are two distinct types of objects being modeled and connections are only allowed between two objects of different types. For example, on one side, list candidates who attend a career fair and on the other side list the available positions. The edges might naturally correspond to candidate\/position pairs which link a person to a responsibility they are capable of handling.  As a second example, a bipartite graph could be used to visualize the languages spoken by a group of students. The vertices on one side would be the students with the languages listed on the other side. We would then have an edge when student spoke language . A concrete example of this graph for our favorite group of students is shown in , although Alice isn't so certain there should be an edge connecting Dave and English.   A bipartite graph    One special class of bipartite graphs that bears mention is the class of complete bipartite graphs . The complete bipartite graph has vertex set with and . It has an edge if and only if and . The complete bipartite graph is shown in .   The complete bipartite graph      Cliques and Chromatic Number  A clique  clique  in a graph is a set such that the subgraph induced by is isomorphic to the complete graph . Equivalently, we can say that every pair of vertices in are adjacent. The maximum clique size  clique  maximum size  or clique number  clique number  of a graph , denoted     clique number of  , is the largest for which there exists a clique with . For example, the graph in has clique number while the graph in has maximum clique size .  For every graph , it is obvious that . On the other hand, the inequality may be far from tight. Before showing how bad it can be, we need to introduce a more general version of the . Consider a function with . Since , the Pigeon Hole Principle as stated in only tells us that there are distinct with . However, we can say more here. Suppose that each element of has at most two elements of mapped to it. Then adding up the number of elements of based on how many are mapped to each element of would only allow to have (at most) elements. Thus, there must be so that there are three distinct elements with . This argument generalizes to give the following version of the Pigeon Hole Principle:   Generalized Pigeon Hole Principle   pigeon hole principle  generalized    If is a function and , then there exists an element and distinct elements so that for .    We are now prepared to present the following proposition showing that clique number and chromatic number need not be close at all. We give two proofs. The first is the work of J. Kelly and L. Kelly, while the second is due to J. Mycielski.    For every , there exists a graph so that and .    We proceed by induction on . For , we take to be the cycle on five vertices. Now assume that for some , we have determined the graph . Suppose that has vertices. Label the vertices of as . Construct as follows. Begin with an independent set of cardinality . For every subset of with , label the elements of as . For this particular -element subset attach a copy of with adjacent to for . Vertices in copies of for distinct -element subsets of are nonadjacent, and a vertex in has at most one neighbor in a particular copy of .  To see that , it will suffice to argue that contains no triangle ( ). Since is triangle-free, any triangle in must contain a vertex of . Since none of the vertices of are adjacent, any triangle in contains only one point of . Since each vertex of is adjacent to at most one vertex of any fixed copy of , if is part of a triangle, the other two vertices must come from distinct copies of . However, vertices in different copies of are not adjacent, so . Notice that since contains . On the other hand, since we may use colors on the copies of and a new color on the independent set . To see that , observe that if we use only colors, then by the generalized Pigeon Hole Principle, there is an -element subset of in which all vertices have the same color. Then this color cannot be used in the copy of which is attached to that -element subset.    We again start with as the cycle . As before we assume that we have constructed for some a graph with and . Again, label the vertices of as . To construct , we now start with an independent set , but now has only points, which we label as . We then add a copy of with adjacent to if and only if is adjacent to . Finally, attach a new vertex adjacent to all vertices in .  Clearly, . Also, , since it contains as a subgraph. Furthermore, , since we can color with colors from , use color on the independent set , and then assign color to the new vertex . We claim that in fact . Suppose not. Then we must have . Let be a proper coloring of . Without loss of generality, uses the colors in and assigns color to . Then consider the nonempty set of vertices in the copy of to which assigns color . For each in , change the color on so that it matches the color assigned to by , which cannot be , as is colored . What results is a proper coloring of the copy of with only colors since and are adjacent to the same vertices of the copy of . The contradiction shows that , as claimed.    Since a -clique looks like a triangle, is often stated as There exist triangle-free graphs with large chromatic number. As an illustration of the construction in the proof of Mycielski, we again refer to . The graph shown is . We will return to the topic of graphs with large chromatic number in where we show that there are graphs with large chromatic number which lack not only cliques of more than two vertices but also cycles of fewer than vertices for any value of . In other words, there is a graph with but no cycle with fewer than vertices!    Can We Determine Chromatic Number?  Suppose you are given a graph . It's starting to look like it is not easy to find an algorithm that answers the question Is ? It's easy to verify a certificate (a proper coloring using at most colors), but how could you even find a proper coloring, not to mention one with the fewest number of colors? Similarly for the question Is ? , it is easy to verify a certificate. However, finding a maximum clique appears to be a very hard problem. Of course, since the gap between and can be arbitrarily large, being able to find one value would not (generally) help in finding the value of the other. No polynomial-time algorithm is known for either of these problems, and many believe that no such algorithm exists. In this subsection, we look at one approach to finding chromatic number and see a case where it does work efficiently.  A very naïve algorithmic way to approach graph coloring is the First Fit, or greedy , algorithm. For this algorithm, fix an ordering of the vertex set . We define the coloring function one vertex at a time in increasing order of subscript. We begin with and then we define (assuming vertices have been colored) to be the least positive integer color that has not already been used on any of its neighbors in the set .   Two orderings of the vertices of a bipartite graph.      shows two different orderings of the same graph. demonstrates that the ordering of is vital to the ability of the First Fit algorithm to color using colors. In general, finding an optimal ordering is just as difficult as coloring . Thus, this very simple algorithm does not work well in general. However, for some classes of graphs, there is a natural ordering that leads to optimal performance of First Fit. Here is one such example one that we will study again in the next chapter in a different context.  Given an indexed family of sets , we associate with a graph defined as follows. The vertex set of is the set and vertices and in are adjacent in if and only if . We call an intersection graph  graph  intersection  . It is easy to see that every graph is an intersection graph ( Why? ), so it makes sense to restrict the sets which belong to . For example, we call an interval graph  graph  interval  if it is the intersection graph of a family of closed intervals of the real line . For example, in , we show a collection of six intervals of the real line on the left. On the right, we show the corresponding interval graph having an edge between vertices and if and only if intervals and overlap.   A collection of intervals and its interval graph      If is an interval graph, then .    For each , let be a closed interval of the real line so that is an edge in if and only if . Order the vertex set as such that . (Ties may be broken arbitrarily.) Apply the First Fit coloring algorithm to with this ordering on . Now when the First Fit coloring algorithm colors , all of its neighbors have left end point at most . Since they are neighbors of , however, we know that their right endpoints are all at least . Thus, and its previously-colored neighbors form a clique. Hence, is adjacent to at most other vertices that have already been colored, so when the algorithm colors , there will be a color from not already in use on its neighbors. The algorithm will assign the smallest such color. Thus, we never need to use more than colors, so .    A graph is said to be perfect  graph  perfect  if for every induced subgraph . Since an induced subgraph of an interval graph is an interval graph, shows interval graphs are perfect. The study of perfect graphs originated in connection with the theory of communications networks and has proved to be a major area of research in graph theory for many years now.      Describe reasonably clearly a graph Alice could have drawn to shock Bob in .       Describe a way in which Dave could have recolored the graph in to get a proper coloring using four colors.       Use the First Fit algorithm to color the vertices of the graph in following each of the orderings given. How many colors does First Fit use when you use the ordering shown on the left? How many colors does First Fit use when you use the ordering shown on the right? Describe a way to trick First Fit to use colors to color a bipartite graph on vertices.      "
},
{
  "id": "s_graphs_color-2-2",
  "level": "2",
  "url": "s_graphs_color.html#s_graphs_color-2-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "colors proper coloring chromatic number "
},
{
  "id": "fig_graphs_chi4",
  "level": "2",
  "url": "s_graphs_color.html#fig_graphs_chi4",
  "type": "Figure",
  "number": "5.19",
  "title": "",
  "body": " A proper coloring using colors   "
},
{
  "id": "disc-graphs_color-intro",
  "level": "2",
  "url": "s_graphs_color.html#disc-graphs_color-intro",
  "type": "Discussion",
  "number": "5.20",
  "title": "",
  "body": " Everyone agrees that the graph in has chromatic number at most . However, there's a bit of debate going on about if . Bob figures the authors would not have used five colors if they didn't need to. Carlos says he's glad they're having the discussion, since all having a proper coloring does is provide them with an upper bound on . Bob sees that the graph has a vertex of degree and claims that must mean . Alice groans and draws a graph with vertices, one of which has degree , but with chromatic number . Bob is shocked, but agrees with her. Xing wonders if the fact that the graph does not contain a has any bearing on the chromatic number. Dave's in a hurry to get to the gym, but on his way out the door he says they can get a proper -coloring pretty easily, so . The rest decide it's time to keep reading.   What graph did Alice draw that shocked Bob?    What changes did Dave make to the coloring in to get a proper coloring using four colors?     "
},
{
  "id": "s_graphs_color-3-2",
  "level": "2",
  "url": "s_graphs_color.html#s_graphs_color-3-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "-colorable graph "
},
{
  "id": "thm_graphs_bipartite",
  "level": "2",
  "url": "s_graphs_color.html#thm_graphs_bipartite",
  "type": "Theorem",
  "number": "5.21",
  "title": "",
  "body": "  A graph is -colorable if and only if it does not contain an odd cycle.    Let be a -colorable graph whose coloring function partitions as . Since there are no edges between vertices on the same side of the partition, any cycle in must alternate vertices between and . In order to complete the cycle, therefore, the number of vertices in the cycle from must be the same as the number from , implying that the cycle has even length.  Now suppose that does not contain an odd cycle. Note that we may assume that is connected, as each component may be colored individually. The distance  between vertices is the length of a shortest path from to , and of course . Fix a vertex and define We claim that coloring the vertices of with color and the vertices of with color is a proper coloring. suppose not. Then without loss of generality, there are vertices such that . Since , and are both even. Let and be shortest paths from to and , respectively. If for all and , then since and are both even, is an odd cycle in , which is a contradiction. Thus, there must be such that , and we may take as large as possible. (That is, after , the two paths do not intersect again.) Thus, is a cycle in . How many vertices are there in this cycle? A quick count shows that it has vertices. We know that and are even, and notice that and are either both even or both odd, since and the odd-subscripted vertices of our path belong to while those with even subscripts belong to . Thus, is even, so is odd, giving a contradiction.   "
},
{
  "id": "s_graphs_color-3-4",
  "level": "2",
  "url": "s_graphs_color.html#s_graphs_color-3-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "bipartite graph "
},
{
  "id": "fig_graphs_languages",
  "level": "2",
  "url": "s_graphs_color.html#fig_graphs_languages",
  "type": "Figure",
  "number": "5.22",
  "title": "",
  "body": " A bipartite graph   "
},
{
  "id": "s_graphs_color-3-8",
  "level": "2",
  "url": "s_graphs_color.html#s_graphs_color-3-8",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "complete bipartite graphs "
},
{
  "id": "fig_graphs_k33",
  "level": "2",
  "url": "s_graphs_color.html#fig_graphs_k33",
  "type": "Figure",
  "number": "5.23",
  "title": "",
  "body": " The complete bipartite graph   "
},
{
  "id": "s_graphs_color-4-2",
  "level": "2",
  "url": "s_graphs_color.html#s_graphs_color-4-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "clique maximum clique size clique number "
},
{
  "id": "prop_graphs_pigeon-general",
  "level": "2",
  "url": "s_graphs_color.html#prop_graphs_pigeon-general",
  "type": "Proposition",
  "number": "5.24",
  "title": "Generalized Pigeon Hole Principle.",
  "body": " Generalized Pigeon Hole Principle   pigeon hole principle  generalized    If is a function and , then there exists an element and distinct elements so that for .   "
},
{
  "id": "prop_triangle-free",
  "level": "2",
  "url": "s_graphs_color.html#prop_triangle-free",
  "type": "Proposition",
  "number": "5.25",
  "title": "",
  "body": "  For every , there exists a graph so that and .    We proceed by induction on . For , we take to be the cycle on five vertices. Now assume that for some , we have determined the graph . Suppose that has vertices. Label the vertices of as . Construct as follows. Begin with an independent set of cardinality . For every subset of with , label the elements of as . For this particular -element subset attach a copy of with adjacent to for . Vertices in copies of for distinct -element subsets of are nonadjacent, and a vertex in has at most one neighbor in a particular copy of .  To see that , it will suffice to argue that contains no triangle ( ). Since is triangle-free, any triangle in must contain a vertex of . Since none of the vertices of are adjacent, any triangle in contains only one point of . Since each vertex of is adjacent to at most one vertex of any fixed copy of , if is part of a triangle, the other two vertices must come from distinct copies of . However, vertices in different copies of are not adjacent, so . Notice that since contains . On the other hand, since we may use colors on the copies of and a new color on the independent set . To see that , observe that if we use only colors, then by the generalized Pigeon Hole Principle, there is an -element subset of in which all vertices have the same color. Then this color cannot be used in the copy of which is attached to that -element subset.    We again start with as the cycle . As before we assume that we have constructed for some a graph with and . Again, label the vertices of as . To construct , we now start with an independent set , but now has only points, which we label as . We then add a copy of with adjacent to if and only if is adjacent to . Finally, attach a new vertex adjacent to all vertices in .  Clearly, . Also, , since it contains as a subgraph. Furthermore, , since we can color with colors from , use color on the independent set , and then assign color to the new vertex . We claim that in fact . Suppose not. Then we must have . Let be a proper coloring of . Without loss of generality, uses the colors in and assigns color to . Then consider the nonempty set of vertices in the copy of to which assigns color . For each in , change the color on so that it matches the color assigned to by , which cannot be , as is colored . What results is a proper coloring of the copy of with only colors since and are adjacent to the same vertices of the copy of . The contradiction shows that , as claimed.   "
},
{
  "id": "fig_k44minus",
  "level": "2",
  "url": "s_graphs_color.html#fig_k44minus",
  "type": "Figure",
  "number": "5.26",
  "title": "",
  "body": " Two orderings of the vertices of a bipartite graph.     "
},
{
  "id": "s_graphs_color-5-6",
  "level": "2",
  "url": "s_graphs_color.html#s_graphs_color-5-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "intersection graph interval graph "
},
{
  "id": "fig_graphs_interval-graph",
  "level": "2",
  "url": "s_graphs_color.html#fig_graphs_interval-graph",
  "type": "Figure",
  "number": "5.27",
  "title": "",
  "body": " A collection of intervals and its interval graph   "
},
{
  "id": "thm_intgraphcol",
  "level": "2",
  "url": "s_graphs_color.html#thm_intgraphcol",
  "type": "Theorem",
  "number": "5.28",
  "title": "",
  "body": "  If is an interval graph, then .    For each , let be a closed interval of the real line so that is an edge in if and only if . Order the vertex set as such that . (Ties may be broken arbitrarily.) Apply the First Fit coloring algorithm to with this ordering on . Now when the First Fit coloring algorithm colors , all of its neighbors have left end point at most . Since they are neighbors of , however, we know that their right endpoints are all at least . Thus, and its previously-colored neighbors form a clique. Hence, is adjacent to at most other vertices that have already been colored, so when the algorithm colors , there will be a color from not already in use on its neighbors. The algorithm will assign the smallest such color. Thus, we never need to use more than colors, so .   "
},
{
  "id": "s_graphs_color-5-9",
  "level": "2",
  "url": "s_graphs_color.html#s_graphs_color-5-9",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "perfect "
},
{
  "id": "graphs_color_reading_high-degree",
  "level": "2",
  "url": "s_graphs_color.html#graphs_color_reading_high-degree",
  "type": "Reading Question",
  "number": "5.4.4.1",
  "title": "",
  "body": "  Describe reasonably clearly a graph Alice could have drawn to shock Bob in .    "
},
{
  "id": "graphs_color_reading_recolor",
  "level": "2",
  "url": "s_graphs_color.html#graphs_color_reading_recolor",
  "type": "Reading Question",
  "number": "5.4.4.2",
  "title": "",
  "body": "  Describe a way in which Dave could have recolored the graph in to get a proper coloring using four colors.    "
},
{
  "id": "graphs_color_reading_firstfit",
  "level": "2",
  "url": "s_graphs_color.html#graphs_color_reading_firstfit",
  "type": "Reading Question",
  "number": "5.4.4.3",
  "title": "",
  "body": "  Use the First Fit algorithm to color the vertices of the graph in following each of the orderings given. How many colors does First Fit use when you use the ordering shown on the left? How many colors does First Fit use when you use the ordering shown on the right? Describe a way to trick First Fit to use colors to color a bipartite graph on vertices.    "
},
{
  "id": "s_graphs_planar",
  "level": "1",
  "url": "s_graphs_planar.html",
  "type": "Section",
  "number": "5.5",
  "title": "Planar Graphs",
  "body": " Planar Graphs  Let's return to the problem of providing lines for water, electricity, and natural gas to three homes which we discussed in the introduction to this chapter. How can we model this problem using a graph? The best way is to have a vertex for each utility and a vertex for each of the three homes. Then what we're asking is if we can draw the graph that has an edge from each utility to each home so that none of the edges cross. This graph is shown in . You should recognize it as the complete bipartite graph we introduced earlier in the chapter.   A graph of connecting homes to utilities      While this example of utility lines might seem a bit contrived, since there's really no good reason that the providers can't bury their lines at different depths, the question of whether a graph can be drawn in the plane such that edges intersect only at vertices is a long-studied question in mathematics that does have useful applications. One area where it arises is in the design of microchips and circuit boards. In those contexts, the material is so thin that the option of placing connections at different depths either does not exist or is severely restricted. There is much deep mathematics that underlies this area, and this section is intended to introduce a few of the key concepts.  By a drawing drawing of a graph of a graph, we mean a way of associating its vertices with points in the Cartesian plane and its edges with simple polygonal arcs whose endpoints are the points associated to the vertices that are the endpoints of the edge. You can think of a polygonal arc as just a finite sequence of line segments such that the endpoint of one line segment is the starting point of the next line segment, and a simple polygonal arc is one that does not cross itself. (Our choice of polygonal arcs rather than arbitrary curves actually doesn't cause an impediment, since by taking very, very, very short line segments we can approximate any curve.) A planar drawing drawing of a graph planar planar drawing drawing of a graph, planar of a graph is one in which the polygonal arcs corresponding to two edges intersect only at a point corresponding to a vertex to which they are both incident. A graph is planar graph planar if it has a planar drawing. A face face of a planar drawing of a graph is a region bounded by edges and vertices and not containing any other vertices or edges.  shows a planar drawing of a graph with vertices and edges. Notice how one of the edges is drawn as a true polygonal arc rather than a straight line segment. This drawing determines regions, since we also count the unbounded region that surrounds the drawing.   A planar drawing of a graph    shows a planar drawing of the complete graph . There are vertices, edges, and faces in the drawing.   A planar drawing of    What happens if we compute the number of vertices minus the number of edges plus the number of faces for these drawings? We have   While it might seem like a coincidence that this computation results in for these planar drawings, there's a more general principle at work here, and in fact it holds for any planar drawing of any planar graph.  In fact, the number here actually results from a fundamental property of the plane, and there are a corresponding theorems for other surfaces. However, we only need the result as stated above.   Euler's Formula  Euler's formula   Let be a connected planar graph with vertices and edges. Every planar drawing of has faces, where satisfies     Our proof is by induction on the number of edges. If , then since is connected, our graph has a single vertex, and so there is one face. Thus as needed. Now suppose that we have proven Euler's formula for all graphs with less than edges and let have edges. Pick an edge of . What happens if we form a new graph by deleting from ? If is connected, our inductive hypothesis applies. Say that has vertices, edges, and faces. Then by induction, these numbers satisfy Since we only deleted one edge, and . What did the removal of do to the number of faces? In there's a new face that was formerly two faces divided by in . Thus, . Substituting these into , we have Thus, if is connected, we are done. If is disconnected, however, we cannot apply the inductive assumption to directly. Fortunately, since we removed only one edge, has two components, which we can view as two connected graphs and . Each of these has fewer than edges, so we may apply the inductive hypothesis to them. For , let be the number of vertices of , the number of edges of , and the number of faces of . Then by induction we have Adding these together, we have But now , and , so the equality becomes The only thing we have yet to figure out is how relates to , and we have to hope that it will allow us to knock the down to a . Every face of and is a face of , since the fact that removing disconnects means that must be part of the boundary of the unbounded face. Further, the unbounded face is counted twice in the sum , so . This gives exactly what we need to complete the proof.    Taken by itself, Euler's formula doesn't seem that useful, since it requires counting the number of faces in a planar embedding. However, we can use this formula to get a quick way to determine that a graph is not planar. Consider a drawing without edge crossings of a graph on vertices and edges, with . We consider pairs where is an edge of and is a face that has as part of its boundary. How many such pairs are there? Let's call the number of pairs . Each edge can bound either one or two faces, so we have that . We can also bound by counting the number of pairs in which a face appears. Each face is bounded by at least edges, so it appears in at least pairs, and so . Thus or . Now, utilizing Euler's formula, we have Thus, we've proven the following theorem.    A planar graph on vertices has at most edges when .    The contrapositive of this theorem, namely that an -vertex graph with more than edges is not planar, is usually the most useful formulation of this result. For instance, we've seen ( ) that is planar. What about ? It has vertices and edges, so it is not planar, and thus for , is not planar, since it contains . It's important to note that is not the be-all, end-all of determining if a graph is planar. To see this, let's return to the subject of drawing in the plane. This graph has vertices and edges, so it passes the test of . However, if you spend a couple minutes trying to find a way to draw in the plane without any crossing edges, you'll pretty quickly begin to believe that it can't be done and you'd be right!  To see why is not planar, we'll have to return to Euler's formula, and we again work with edge-face pairs. For , we see that every edge would have to be part of the boundary of two faces, and faces are bounded by cycles. Also, since the graph is bipartite, there are no odd cycles. Thus, counting edge-face pairs from the edge perspective, we see that there are pairs. If we let be the number of faces bounded by a cycle of length , then . Thus, counting edge-face pairs from the face perspective, there are pairs. From Euler's formula, we see that the number of faces must be , so then . But from our count of edge-face pairs, we have , giving , which is clearly absurd. Thus, is not planar.  At this point, you're probably asking yourself So what? We've invested a fair amount of effort to establish that and are nonplanar. Clearly any graph that contains them is also nonplanar, but there are a lot of graphs, so you might think that we could be at this forever. Fortunately, we won't be, since at its core, planarity really comes down to just these two graphs, as we shall soon see.  If is a graph and , then we may form a new graph called an elementary subdivision subdivision elementary of by adding a new vertex and replacing the edge by edges and . In other words, has vertex set and edge set . Two graphs and are homeomorphic homeomorphic if they can be obtained from the same graph by a (potentially trivial) sequence of elementary subdivisions.  The purpose of discussing homeomorphic graphs is that two homeomorphic graphs have the same properties when it comes to being drawn in the plane. To see this, think about what happens to if we form an elementary subdivision of it via any one of its edges. Clearly it remains nonplanar. In fact, if you take any nonplanar graph and form the elementary subdivision using any one of its edges, the resulting graph is nonplanar. The following very deep theorem was proved by the Polish mathematician Kazimierz Kuratowski in 1930. Its proof is beyond the scope of this text.   Kuratowski's Theorem   A graph is planar if and only if it does not contain a subgraph homeomorphic to either or .    Kuratowski's Theorem gives a useful way for checking if a graph is planar. Although it's not always easy to find a subgraph homeomorphic to or by hand, there are efficient algorithms for planarity testing that make use of this characterization. To see this theorem at work, let's consider the Petersen graph shown in . The Petersen graph has vertices and edges, so it passes the test of , and our argument using Euler's formula to prove that is nonplanar was complex enough, we probably don't want to try it for the Petersen graph. To use Kuratowski's Theorem here, we need to decide if we would rather find a subgraph homeomorphic to or to . Although the Petersen graph looks very similar to , it's actually simultaneously too similar and too different for us to be able to find a subgraph homeomorphic to , since each vertex has degree . Thus, we set out to find a subgraph of the Petersen graph homeomorphic to . To do so, note that contains a cycle of length and three edges that are in place between vertices opposite each other on the cycle. We identify a six-cycle in the Petersen graph and draw it as a hexagon and place the remaining four vertices inside the cycle. Such a drawing is shown in . The subgraph homeomorphic to is found by deleting the black vertex, as then the white vertices have degree two, and we can replace each of them and their two incident edges (shown in bold) by a single edge.   A more illustrative drawing of the Petersen graph    We close this section with a problem that brings the current section together with the topic of graph coloring. In 1852 Francis Guthrie, an Englishman who was at the time studying to be lawyer but subsequently became a professor of mathematics in South Africa, was trying to color a map of the counties of England so that any two counties that shared a boundary segment (meaning they touched in more than a single point) were colored with different colors. He noticed that he only needed four colors to do this, and was unable to draw any sort of map that would require five colors. (He was able to find a map that required four colors, an example of which is shown in .)   A map that requires four colors    Could it possibly be true that every map could be colored with only four colors? He asked his brother Frederick Guthrie, who was a mathematics student at University College, London, about the problem, and Frederick eventually communicated the problem to Augustus de Morgan (of de Morgan's laws fame), one of his teachers. It was in this way that one of the most famous (or infamous) problems, known for a century as the Four Color Problem and now the Four Color Theorem, in graph theory was born. De Morgan was very interested in the Four Color Problem, and communicated it to Sir William Rowan Hamilton, a prominent Irish mathematician and the one for whom hamiltonian cycles are named, but Hamilton did not find the problem interesting. Hamilton is one of the few people who considered the Four Color Problem but did not become captivated by it.  We'll continue our discussion of the history of the Four Color Theorem in a moment, but first, we must consider how we can turn the problem of coloring a map into a graph theory question. Well, it seems natural that each region should be assigned a corresponding vertex. We want to force regions that share a boundary to have different colors, so this suggests that we should place an edge between two vertices if and only if their corresponding regions have a common boundary. (As an example, the map in corresponds to the graph .) It is not difficult to see that this produces a planar graph, since we may draw the edges through the common boundary segment. Furthermore, with a little bit of thought, you should see that given a planar drawing of a graph, you can create a map in which each vertex leads to a region and edges lead to common boundary segments. Thus, the Four Color Problem could be stated as Does every planar graph have chromatic number at most four?   Interest in the Four Color Problem languished until 1877, when the British mathematician Arthur Cayley wrote a letter to the Royal Society asking if the problem had been resolved. This brought the problem to the attention of many more people, and the first proof of the Four Color Theorem, due to Alfred Bray Kempe, was completed in 1878 and published a year later. It took years before Percy John Heawood found a flaw in the proof but was able to salvage enough of it to show that every planar graph has chromatic number at most five. In 1880, Peter Guthrie Tait, a British physicist best known for his book Treatise on Natural Philosophy with Sir William Thomson (Lord Kelvin), made an announcement that suggested he had a proof of the Four Color Theorem utilizing hamiltonian cycles in certain planar graphs. However, consistent with the way Tait approached some conjectures in the mathematical theory of knots, it appears that he subsequently realized around 1883 that he could not prove that the hamiltonian cycles he was using actually existed and so Tait likely only believed he had a proof of the Four Color Theorem for a short time, if at all. However, it would take until 1946 to find a counterexample to the conjecture Tait had used in his attempt to prove the Four Color Theorem.  In the first half of the twentieth century, some incremental progress toward resolving the Four Color Problem was made, but few prominent mathematicians took a serious interest in it. The final push to prove the Four Color Theorem came with about at the same time that the first electronic computers were coming into widespread use in industry and research. In 1976, two mathematicians at the University of Illinois announced their computer-assisted proof of the Four Color Theorem. The proof by Kenneth Appel and Wolfgang Haken led the University of Illinois to add the phrase FOUR COLORS SUFFICE to its postage meter's imprint. A photograph of an envelope with such a meter mark on it can be found in the book The Four-Color Theorem: History, Topological Foundations, and Idea of Proof by Rudolf and Gerda Fritsch. (Springer, 1998)    Four Color Theorem   Every planar graph has chromatic number at most four.    Appel and Haken's proof of the Four Color Theorem was at a minimum unsatisfactory for many mathematicians, and to some it simply wasn't a proof. These mathematicians felt that the using a computer to check various cases was simply too uncertain; how could you be certain that the code that checked the 1,482 unavoidable configurations didn't contain any logic errors? In fact, there were several mistakes found in the cases analyzed, but none were found to be fatal flaws. In 1989, Appel and Haken published a 741-page tome entitled Every Planar Map is Four Colorable which provided corrections to all known flaws in their original argument. This still didn't satisfy many, and in the early 1990's a team consisting of Neil Robertson from The Ohio State University; Daniel P. Sanders, a graduate student at the Georgia Institute of Technology; Paul Seymour of Bellcore; and Robin Thomas from Georgia Tech announced a new proof of the Four Color Theorem. However, it still required the use of computers. The proof did gain more widespread acceptance than that of Appel and Haken, in part because the new proof used fewer than half ( ) of the number of configurations the Appel-Haken proof used and the computer code was provided online for anyone to verify. While still unsatisfactory to many, the proof by Robertson, et al. was generally accepted, and today the issue of the Four Color Theorem has largely been put to rest. However, many still wonder if anyone will ever find a proof of this simple statement that does not require the assistance of a computer.  "
},
{
  "id": "fig_graphs_utils",
  "level": "2",
  "url": "s_graphs_planar.html#fig_graphs_utils",
  "type": "Figure",
  "number": "5.29",
  "title": "",
  "body": " A graph of connecting homes to utilities     "
},
{
  "id": "s_graphs_planar-5",
  "level": "2",
  "url": "s_graphs_planar.html#s_graphs_planar-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "drawing planar drawing planar face "
},
{
  "id": "fig_planar",
  "level": "2",
  "url": "s_graphs_planar.html#fig_planar",
  "type": "Figure",
  "number": "5.30",
  "title": "",
  "body": " A planar drawing of a graph   "
},
{
  "id": "fig_k4-planar",
  "level": "2",
  "url": "s_graphs_planar.html#fig_k4-planar",
  "type": "Figure",
  "number": "5.31",
  "title": "",
  "body": " A planar drawing of   "
},
{
  "id": "s_graphs_planar-13",
  "level": "2",
  "url": "s_graphs_planar.html#s_graphs_planar-13",
  "type": "Theorem",
  "number": "5.32",
  "title": "Euler’s Formula.",
  "body": " Euler's Formula  Euler's formula   Let be a connected planar graph with vertices and edges. Every planar drawing of has faces, where satisfies     Our proof is by induction on the number of edges. If , then since is connected, our graph has a single vertex, and so there is one face. Thus as needed. Now suppose that we have proven Euler's formula for all graphs with less than edges and let have edges. Pick an edge of . What happens if we form a new graph by deleting from ? If is connected, our inductive hypothesis applies. Say that has vertices, edges, and faces. Then by induction, these numbers satisfy Since we only deleted one edge, and . What did the removal of do to the number of faces? In there's a new face that was formerly two faces divided by in . Thus, . Substituting these into , we have Thus, if is connected, we are done. If is disconnected, however, we cannot apply the inductive assumption to directly. Fortunately, since we removed only one edge, has two components, which we can view as two connected graphs and . Each of these has fewer than edges, so we may apply the inductive hypothesis to them. For , let be the number of vertices of , the number of edges of , and the number of faces of . Then by induction we have Adding these together, we have But now , and , so the equality becomes The only thing we have yet to figure out is how relates to , and we have to hope that it will allow us to knock the down to a . Every face of and is a face of , since the fact that removing disconnects means that must be part of the boundary of the unbounded face. Further, the unbounded face is counted twice in the sum , so . This gives exactly what we need to complete the proof.   "
},
{
  "id": "thm_max-edge-planar",
  "level": "2",
  "url": "s_graphs_planar.html#thm_max-edge-planar",
  "type": "Theorem",
  "number": "5.33",
  "title": "",
  "body": "  A planar graph on vertices has at most edges when .   "
},
{
  "id": "s_graphs_planar-19",
  "level": "2",
  "url": "s_graphs_planar.html#s_graphs_planar-19",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "elementary subdivision homeomorphic "
},
{
  "id": "thm_kuratowski",
  "level": "2",
  "url": "s_graphs_planar.html#thm_kuratowski",
  "type": "Theorem",
  "number": "5.34",
  "title": "Kuratowski’s Theorem.",
  "body": " Kuratowski's Theorem   A graph is planar if and only if it does not contain a subgraph homeomorphic to either or .   "
},
{
  "id": "fig_petersen-graph-k33",
  "level": "2",
  "url": "s_graphs_planar.html#fig_petersen-graph-k33",
  "type": "Figure",
  "number": "5.35",
  "title": "",
  "body": " A more illustrative drawing of the Petersen graph   "
},
{
  "id": "fig_needs-four-colors",
  "level": "2",
  "url": "s_graphs_planar.html#fig_needs-four-colors",
  "type": "Figure",
  "number": "5.36",
  "title": "",
  "body": " A map that requires four colors   "
},
{
  "id": "thm_4ct",
  "level": "2",
  "url": "s_graphs_planar.html#thm_4ct",
  "type": "Theorem",
  "number": "5.37",
  "title": "Four Color Theorem.",
  "body": " Four Color Theorem   Every planar graph has chromatic number at most four.   "
},
{
  "id": "s_graphs_counting-trees",
  "level": "1",
  "url": "s_graphs_counting-trees.html",
  "type": "Section",
  "number": "5.6",
  "title": "Counting Labeled Trees",
  "body": " Counting Labeled Trees  How many trees are there with vertex set ? Let be this number. For , there is clearly only one tree. Also, for , there is only one tree, which is isomorphic to . In determining , we finally have some work to do; however, there's not much, since all trees on vertices are isomorphic to . Thus, there are  labeled trees  trees  labeled  on vertices, corresponding to which vertex is the one of degree . When , we can begin by counting the number of nonisomorphic trees and consider two cases depending on whether the tree has a vertex of degree . If there is a vertex of degree , the tree is isomorphic to or it does not have a vertex of degree three, in which case it is isomorphic to , since there must be precisely two vertices of degree in such a graph. There are four labelings by for (choose the vertex of degree three). How many labelings by are there for ? There are ways to choose the labels given to the vertices of degree and two ways to select one of the remaining labels to be made adjacent to . Thus, there are ways to label by and so .  To this point, it looks like maybe there's a pattern forming. Perhaps it is the case that for all , . This is in fact the case, but let's see how it works out for before proving the result in general. What are the nonisomorphic trees on five vertices? Well, there's and for sure, and there's also the third tree shown in . After thinking for a minute or two, you should be able to convince yourself that this is all of the possibilities. How many labelings by does each of these have? There are for since there are ways to choose the vertex of degree . For , there are ways to choose the middle vertex of the path, ways to label the two remaining vertices of degree once the middle vertex is labeled, and then ways to label the vertices of degree . This gives labelings. For the last tree, there are ways to label the vertex of degree , ways to label the two leaves adjacent to the vertex of degree , and ways to label the remaining two vertices, giving labelings. Therefore, .   The nonisomorphic trees on vertices    It turns out that we are in fact on the right track, and we will now set out to prove the following:   Cayley's Formula   Cayley's formula    The number of labeled trees on vertices is .    This result is usually referred to as Cayley's Formula, although equivalent results were proven earlier by James J. Sylvester (1857) and Carl W. Borchardt (1860). The reason that Cayley's name is most often affixed to this result is that he was the first to state and prove it in graph theoretic terminology (in 1889). (Although one could argue that Cayley really only proved it for and then claimed that it could easily be extended for all other values of , and whether such an extension can actually happen is open to some debate.) Cayley's Formula has many different proofs, most of which are quite elegant. If you're interested in presentations of several proofs, we encourage you to read the chapter on Cayley's Formula in Proofs from THE BOOK by Aigner, Ziegler, and Hofmann, which contains four different proofs, all using different proof techniques. Here we give a fifth proof, due to Prüfer and published in 1918. Interestingly, even though Prüfer's proof came after much of the terminology of graph theory was established, he seemed unaware of it and worked in the context of permutations and his own terminology, even though his approach clearly includes the ideas of graph theory. We will use a recursive technique in order to find a bijection between the set of labeled trees on vertices and a natural set of size , the set of strings of length where the symbols in the string come from .  We define a recursive algorithm that takes a tree on vertices labeled by elements of a set of positive integers of size and returns a string of length whose symbols are elements of . (The set will usually be , but in order to define a recursive procedure, we need to allow that it be an arbitrary set of positive integers.) This string is called the Prüfer code  Prüfer code  of the tree . Let denote the Prüfer code of the tree , and if is a leaf of , let denote the tree obtained from by removing ( , the subgraph induced by all the other vertices). We can then define recursively by the following procedure.   If , return the empty string.    Else, let be the leaf of with the smallest label and let be its unique neighbor. Let be the label of . Return .      Before using Prüfer codes to prove Cayley's Formula, let's take a moment to make sure we understand how they are computed given a tree. Consider the -vertex tree in .   A labeled -vertex tree      How do we compute ? Since has more than two vertices, we use the second step and find that is the vertex with label and is the vertex with label , so . The graph is shown in .   The tree      The recursive call returns , where is the vertex labeled . Continuing recursively, the next vertex deleted is , which appends a to the string. Then is deleted, appending . Next is deleted, appending . This is followed by the deletion of , appending . Finally is deleted, appending , and the final recursive call has the subtree isomorphic to with vertices labeled and , and an empty string is returned. Thus, .   We're now prepared to give a proof of Cayley's Formula.   It is clear that takes an -vertex labeled tree with labels from and returns a string of length whose symbols are elements of . What we have yet to do is determine a way to take such a string and construct an -vertex labeled tree from it. If we can find such a construction, we will have a bijection between the set of labeled trees on vertices and the set of strings of length whose symbols come from , which will imply that .  First, let's look at how behaves. What numbers actually appear in the Prüfer code? The numbers that appear in the Prüfer code are the labels of the nonleaf vertices of . The label of a leaf simply cannot appear, since we always record the label of the neighbor of the leaf we are deleting, and the only way we would delete the neighbor of a leaf is if that neighbor were also a leaf, which can only happen if , in which case simply returns the empty string. Thus if is the set of symbols that appear in , the labels of the leaves of are precisely the elements of .  With the knowledge of which labels belong to the leaves of in hand, we are ready to use induction to complete the proof. Our goal is to show that if given a string whose symbols come from a set of elements, there is a unique tree with . If , the only such string is the empty string, so and both label leaves and we can construct only . Now suppose we have the result for some , and we try to prove it for . We have a string with symbols from . Let be the set of symbols appearing in and let be the least element of . By the previous paragraph, we know that is the label of a leaf of and that its unique neighbor is the vertex labeled . The string has length and since does not appear in , its symbols come from , which has size . Thus, by induction, there is a unique tree whose Prüfer code is . We form from by attaching a leaf with label to the vertex of with label and have a tree of the desired type.    We close this section with an example of how to take a Prüfer code and use it to construct a labeled tree. Consider the string as a Prüfer code. Then the tree corresponding to has vertices, and its leaves are labeled , , and . The inductive step in our proof attaches the vertex labeled to the vertex labeled in the tree with Prüfer code and vertex labels , since is used to label the last vertex added. What are the leaves of ? The symbols in do not appear in , so they must be the labels of leaves, and the construction says that we would attach the vertex labeled to the vertex labeled in the tree we get by induction. In , we show how this recursive process continues.   Turning the Prüfer code into a labeled tree    Prüfer code  Label set  Edge added    75531     2 7    5531     4 5    531     6 5    31     5 3    1     3 1    (empty string)     1 7     We form each row from the row above it by removing the first label used on the edge added from the label set and removing the first symbol from the Prüfer code. Once the Prüfer code becomes the empty string, we know that the two remaining labels must be the labels we place on the ends of to start building . We then work back up the edge added column, adding a new vertex and the edge indicated. The tree we construct in this manner is shown in .   The labeled tree with Prüfer code       "
},
{
  "id": "s_graphs_counting-trees-2",
  "level": "2",
  "url": "s_graphs_counting-trees.html#s_graphs_counting-trees-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "labeled trees "
},
{
  "id": "fig_trees-5verts",
  "level": "2",
  "url": "s_graphs_counting-trees.html#fig_trees-5verts",
  "type": "Figure",
  "number": "5.38",
  "title": "",
  "body": " The nonisomorphic trees on vertices   "
},
{
  "id": "thm_cayley",
  "level": "2",
  "url": "s_graphs_counting-trees.html#thm_cayley",
  "type": "Theorem",
  "number": "5.39",
  "title": "Cayley’s Formula.",
  "body": " Cayley's Formula   Cayley's formula    The number of labeled trees on vertices is .   "
},
{
  "id": "s_graphs_counting-trees-8",
  "level": "2",
  "url": "s_graphs_counting-trees.html#s_graphs_counting-trees-8",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Prüfer code "
},
{
  "id": "ex_prufer-code",
  "level": "2",
  "url": "s_graphs_counting-trees.html#ex_prufer-code",
  "type": "Example",
  "number": "5.40",
  "title": "",
  "body": " Before using Prüfer codes to prove Cayley's Formula, let's take a moment to make sure we understand how they are computed given a tree. Consider the -vertex tree in .   A labeled -vertex tree      How do we compute ? Since has more than two vertices, we use the second step and find that is the vertex with label and is the vertex with label , so . The graph is shown in .   The tree      The recursive call returns , where is the vertex labeled . Continuing recursively, the next vertex deleted is , which appends a to the string. Then is deleted, appending . Next is deleted, appending . This is followed by the deletion of , appending . Finally is deleted, appending , and the final recursive call has the subtree isomorphic to with vertices labeled and , and an empty string is returned. Thus, .  "
},
{
  "id": "s_graphs_counting-trees-11",
  "level": "2",
  "url": "s_graphs_counting-trees.html#s_graphs_counting-trees-11",
  "type": "Proof",
  "number": "5.6.1",
  "title": "",
  "body": " It is clear that takes an -vertex labeled tree with labels from and returns a string of length whose symbols are elements of . What we have yet to do is determine a way to take such a string and construct an -vertex labeled tree from it. If we can find such a construction, we will have a bijection between the set of labeled trees on vertices and the set of strings of length whose symbols come from , which will imply that .  First, let's look at how behaves. What numbers actually appear in the Prüfer code? The numbers that appear in the Prüfer code are the labels of the nonleaf vertices of . The label of a leaf simply cannot appear, since we always record the label of the neighbor of the leaf we are deleting, and the only way we would delete the neighbor of a leaf is if that neighbor were also a leaf, which can only happen if , in which case simply returns the empty string. Thus if is the set of symbols that appear in , the labels of the leaves of are precisely the elements of .  With the knowledge of which labels belong to the leaves of in hand, we are ready to use induction to complete the proof. Our goal is to show that if given a string whose symbols come from a set of elements, there is a unique tree with . If , the only such string is the empty string, so and both label leaves and we can construct only . Now suppose we have the result for some , and we try to prove it for . We have a string with symbols from . Let be the set of symbols appearing in and let be the least element of . By the previous paragraph, we know that is the label of a leaf of and that its unique neighbor is the vertex labeled . The string has length and since does not appear in , its symbols come from , which has size . Thus, by induction, there is a unique tree whose Prüfer code is . We form from by attaching a leaf with label to the vertex of with label and have a tree of the desired type.  "
},
{
  "id": "ex_prufer-code-reverse",
  "level": "2",
  "url": "s_graphs_counting-trees.html#ex_prufer-code-reverse",
  "type": "Example",
  "number": "5.43",
  "title": "",
  "body": " We close this section with an example of how to take a Prüfer code and use it to construct a labeled tree. Consider the string as a Prüfer code. Then the tree corresponding to has vertices, and its leaves are labeled , , and . The inductive step in our proof attaches the vertex labeled to the vertex labeled in the tree with Prüfer code and vertex labels , since is used to label the last vertex added. What are the leaves of ? The symbols in do not appear in , so they must be the labels of leaves, and the construction says that we would attach the vertex labeled to the vertex labeled in the tree we get by induction. In , we show how this recursive process continues.   Turning the Prüfer code into a labeled tree    Prüfer code  Label set  Edge added    75531     2 7    5531     4 5    531     6 5    31     5 3    1     3 1    (empty string)     1 7     We form each row from the row above it by removing the first label used on the edge added from the label set and removing the first symbol from the Prüfer code. Once the Prüfer code becomes the empty string, we know that the two remaining labels must be the labels we place on the ends of to start building . We then work back up the edge added column, adding a new vertex and the edge indicated. The tree we construct in this manner is shown in .   The labeled tree with Prüfer code      "
},
{
  "id": "s_graphs_complexity",
  "level": "1",
  "url": "s_graphs_complexity.html",
  "type": "Section",
  "number": "5.7",
  "title": "A Digression into Complexity Theory",
  "body": " A Digression into Complexity Theory  We have already introduced in a few notions about efficient algorithms. We also discussed the difficulty of determining a graph's chromatic number and clique number earlier in this chapter. We conclude with a brief discussion of some issues involving computational complexity for other problems discussed in this chapter.  Let's begin with some problems for which there are polynomial-time algorithms. Suppose you are given a graph on vertices and asked whether or not the graph is connected. Here a positive answer can be justified by providing a spanning tree. On the other hand, a negative answer can be justified by providing a partition of the vertex sets with and non-empty subsets and having no edges with one end-point in and the other in . In we will discuss two efficient algorithms that find spanning trees in connected graphs. They can easily be modified to produce a partition showing the graph is disconnected.  If you are asked whether a connected graph is eulerian, then a positive answer can be justified by producing the appropriate sequence. We gave an algorithm to do this earlier in the chapter. A negative answer can be justified by producing a vertex of odd degree, and our algorithm will identify such a vertex if it exists. (Depending on the data structures used to represent the graph, it may be most efficient to simply look for vertices of odd degree without using the algorithm to find an eulerian circuit.)  On the surface, the problem of determining if a graph is hamiltonian looks similar to that of determining if the graph is eulerian. Both call for a sequence of vertices in which each pair of consecutive vertices is joined by an edge. Of course, each problem has an additional requirement on yes certificates. However, justifying a negative answer to the question of whether a graph is hamiltonian is not straightforward. only gives a way to confirm that a graph is hamiltonian; there are many nonhamiltonian graphs that do not satisfy its hypothesis. At this time, no one knows how to efficiently justify a negative answer at least not in the general case.  "
},
{
  "id": "s_graphs_discussion",
  "level": "1",
  "url": "s_graphs_discussion.html",
  "type": "Section",
  "number": "5.8",
  "title": "Discussion",
  "body": " Discussion  Over coffee, today's conversation was enthusiastic and heated at times. Zori got things off with a blast I don't think graphs are of any use at all but she wasn't even able to finish the sentence before Yolanda uncharacteristically interrupted her with You're off base on this one. I see lots of ways graphs can be used to model real world problems. The professor actually showed us examples back in our first class. But now that we're talking in more depth about graphs, things are even clearer. Bob added, These eulerian and hamiltonian cycle problems are certain to have applications in network routing problems. Xing reinforced Bob with Absolutely. There are important questions in network integrity and information exchange that are very much the same as these basic problems. Alice piled on Even the notion of chromatic number clearly has practical applications. By this time, Zori realized her position was indefensible but she was reluctant to admit it. She offered only a Whatever.   Things quieted down a bit and Dave said Finding a hamiltonian cycle can't be all that hard, if someone guarantees that there is one. This extra information must be of value in the search. Xing added Maybe so. It seems natural that it should be easier to find something if you know it's there. Alice asked Does the same thing hold for chromatic number? Bob didn't understand her question Huh? Alice continued, this time being careful not to even look Bob's way I mean if someone tells you that a graph is -colorable, does that help you to find a coloring using only three colors? Dave said Seems reasonable to me.   After a brief pause, Carlos offered I don't think this extra knowledge is of any help. I think these problems are pretty hard, regardless. They went back and forth for a while, but in the end, the only thing that was completely clear is that graphs and their properties had captured their attention, at least for now.  "
},
{
  "id": "s_graphs_exercises",
  "level": "1",
  "url": "s_graphs_exercises.html",
  "type": "Exercises",
  "number": "5.9",
  "title": "Exercises",
  "body": "   The questions in this exercise pertain to the graph shown in .    What is the degree of vertex ?  What is the degree of vertex ?  How many vertices of degree are there in ? List them.  Find a cycle of length in .  What is the length of a shortest path from to ?  What is the length of a shortest path from to ?  Find a path of length from vertex to vertex .    A graph         Draw a graph with vertices, all of odd degree, that does not contain a path of length or explain why such a graph does not exist.      Draw a graph with vertices having degrees , , , , , and or explain why such a graph does not exist.      For the next Olympic Winter Games, the organizers wish to expand the number of teams competing in curling. They wish to have teams enter, divided into two pools of seven teams each. Right now, they're thinking of requiring that in preliminary play each team will play seven games against distinct opponents. Five of the opponents will come from their own pool and two of the opponents will come from the other pool. They're having trouble setting up such a schedule, so they've come to you. By using an appropriate graph-theoretic model, either argue that they cannot use their current plan or devise a way for them to do so.      For this exercise, consider the graph in .  Let and . Is a subgraph of ?  Let and . Is a subgraph of ?  Let and . Is an induced subgraph of ?  Draw the subgraph of induced by .  Draw the subgraph of induced by .  Draw a subgraph of having vertex set that is not an induced subgraph.  Draw a spanning subgraph of with exactly edges.     A graph        Prove that every tree on vertices has exactly edges.      contains four graphs on six vertices. Determine which (if any) pairs of graphs are isomorphic. For pairs that are isomorphic, give an isomorphism between the two graphs. For pairs that are not isomorphic, explain why.   Are these graphs isomorphic?          Find an eulerian circuit in the graph in or explain why one does not exist.   A graph          Consider the graph in . Determine if the graph is eulerian. If it is, find an eulerian circuit. If it is not, explain why it is not. Determine if the graph is hamiltonian. If it is, find a hamiltonian cycle. If it is not, explain why it is not.   A graph        Explain why the graph in does not have an eulerian circuit, but show that by adding a single edge, you can make it eulerian.   A graph          An eulerian trail eulerian trail is defined in the same manner as an eulerian circuit (see ) except that we drop the condition that . Prove that a graph has an eulerian trail if and only if it is connected and has at most two vertices of odd degree.      Alice and Bob are discussing a graph that has vertices and edges. Bob argues that the graph is hamiltonian, while Alice says that he's wrong. Without knowing anything more about the graph, must one of them be right? If so, who and why, and if not, why not?      Find the chromatic number of the graph in and a coloring using colors.   A graph to color        Find the chromatic number of the graph in and a coloring using colors.   A graph to color        A pharmaceutical manufacturer is building a new warehouse to store its supply of chemicals it uses in production. However, some of the chemicals cannot be stored in the same room due to undesirable reactions that will occur. The matrix below has a in position if and only if chemical and chemical cannot be stored in the same room. Develop an appropriate graph theoretic model and determine the smallest number of rooms into which they can divide their warehouse so that they can safely store all chemicals in the warehouse.       A school is preparing the schedule of classes for the next academic year. They are concerned about scheduling calculus, physics, English, statistics, economics, chemistry, and German classes, planning to offer a single section of each one. Below are the lists of courses that each of six students must take in order to successfully graduate. Determine the smallest number of class periods that can be used to schedule these courses if each student can take at most one course per class period. Explain why fewer class periods cannot be used.     Student Courses  1 Chemistry, Physics, Economics  2 English, German, Statistics  3 Statistics, Calculus, German  4 Chemistry, Physics  5 English, Chemistry  6 Chemistry, Economics        All trees with more than one vertex have the same chromatic number. What is it, and why?      Find a proper -coloring of the graph in Mycielski's proof of . This establishes that .      How many vertices does the graph from the Kelly and Kelly proof of have?      Construct and draw the graph from Mycielski's proof of .      Find a recursive formula for the number of vertices in the graph from the Kelly and Kelly proof of .      Let be the number of vertices in the graph from the Mycielski's proof of . Find a recursive formula for .      The girth girth of a graph is the number of vertices in a shortest cycle of . Find the girth of the graph in the Kelly and Kelly proof of and prove that your answer is correct. As a challenge, see if you can modify the construction of to increase the girth. If so, how far are you able to increase it?      Use the First Fit algorithm to color the graph in using the two different orderings of the vertex set shown there.      Draw the interval graph corresponding to the intervals in .   A collection of intervals        Use the First Fit coloring algorithm to find the chromatic number of the interval graph whose interval representation is shown in as well as a proper coloring using as few colors as possible.        From you know that choosing a bad ordering of the vertices of a graph can lead to the First Fit coloring algorithm producing a coloring that is far from optimal. However, you can use this algorithm to prove a bound on the chromatic number. Show that if every vertex of has degree at most , then .  Give an example of a bipartite graph with to show that this bound need not be tight.        Is the graph in planar? If it is, find a drawing without edges crossings. If it is not give a reason why it is not.      Is the graph in planar? If it is, find a drawing without edge crossings. If it is not give a reason why it is not.   Is this graph planar?        Find a planar drawing of the graph , by which we mean the graph formed from the complete graph on vertices by deleting any edge.      Exhibit a planar drawing of an eulerian planar graph with vertices and edges.      Show that every planar graph has a vertex that is incident to at most five edges.      Let be a graph with . Its degree sequence is the list of the degrees of its vertices, arranged in nonincreasing order. That is, the degree sequence of is with the vertices arranged such that . Below are five sequences of integers (along with , the number of integers in the sequence). Identify  the one sequence that cannot be the degree sequence of any graph ;  the two sequences that could be the degree sequence of a planar graph;  the one sequence that could be the degree sequence of a tree ;  the one sequence that is the degree sequence of an eulerian graph; and  the one sequence that is the degree sequence of a graph that must be hamiltonian .  Explain your answers. (Note that one sequence will get two labels from above.)  :  :  :  :  :        Below are three sequences of length . One of the sequences cannot be the degree sequence (see ) of any graph. Identify it and say why. For each of the other two, say why (if you have enough information) a connected graph with that degree sequence  is definitely hamiltonian\/cannot be hamiltonian;  is definitely eulerian\/cannot be eulerian;  is definitely a tree\/cannot be a tree; and  is definitely planar\/cannot be planar.  (If you do not have enough information to make a determination for a sequence without having specific graph(s) with that degree sequence, write not enough information for that property.)           For the two degree sequences in that correspond to graphs, there were some properties for which the degree sequence was not sufficient information to determine if the graph had that property. For each of those situations, see if you can draw both a graph that has the property and a graph that does not have the property.      Draw the labeled trees on vertices.      Determine for the tree in .   A -vertex tree          Determine for the tree in .   A -vertex tree          Determine for the tree  .   A -vertex tree          Construct the labeled tree with Prüfer code .      Construct the labeled tree with Prüfer code .      Construct the labeled tree with Prüfer code (using commas to separate symbols in the string, since we have labels greater than ) .      (Challenge problem) When is a graph, let denote the maximum degree in . Prove Brooks' Theorem : If is connected and , then . Furthermore, equality holds if and only if (a) and is an odd cycle, or (b) and .   Hint: It's clear that (in fact, this was already assigned as an exercise). Assume that but that neither conclusion (a) or (b) holds. Take a spanning tree of and an appropriate ordering of the vertices, with two leaves of the tree coming first. Then show that a First Fit coloring of the graph will only use colors.    "
},
{
  "id": "s_graphs_exercises-1",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-1",
  "type": "Exercise",
  "number": "5.9.1",
  "title": "",
  "body": "  The questions in this exercise pertain to the graph shown in .    What is the degree of vertex ?  What is the degree of vertex ?  How many vertices of degree are there in ? List them.  Find a cycle of length in .  What is the length of a shortest path from to ?  What is the length of a shortest path from to ?  Find a path of length from vertex to vertex .    A graph      "
},
{
  "id": "s_graphs_exercises-2",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-2",
  "type": "Exercise",
  "number": "5.9.2",
  "title": "",
  "body": "  Draw a graph with vertices, all of odd degree, that does not contain a path of length or explain why such a graph does not exist.   "
},
{
  "id": "s_graphs_exercises-3",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-3",
  "type": "Exercise",
  "number": "5.9.3",
  "title": "",
  "body": "  Draw a graph with vertices having degrees , , , , , and or explain why such a graph does not exist.   "
},
{
  "id": "s_graphs_exercises-4",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-4",
  "type": "Exercise",
  "number": "5.9.4",
  "title": "",
  "body": "  For the next Olympic Winter Games, the organizers wish to expand the number of teams competing in curling. They wish to have teams enter, divided into two pools of seven teams each. Right now, they're thinking of requiring that in preliminary play each team will play seven games against distinct opponents. Five of the opponents will come from their own pool and two of the opponents will come from the other pool. They're having trouble setting up such a schedule, so they've come to you. By using an appropriate graph-theoretic model, either argue that they cannot use their current plan or devise a way for them to do so.   "
},
{
  "id": "s_graphs_exercises-5",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-5",
  "type": "Exercise",
  "number": "5.9.5",
  "title": "",
  "body": "  For this exercise, consider the graph in .  Let and . Is a subgraph of ?  Let and . Is a subgraph of ?  Let and . Is an induced subgraph of ?  Draw the subgraph of induced by .  Draw the subgraph of induced by .  Draw a subgraph of having vertex set that is not an induced subgraph.  Draw a spanning subgraph of with exactly edges.     A graph     "
},
{
  "id": "s_graphs_exercises-6",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-6",
  "type": "Exercise",
  "number": "5.9.6",
  "title": "",
  "body": "  Prove that every tree on vertices has exactly edges.   "
},
{
  "id": "s_graphs_exercises-7",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-7",
  "type": "Exercise",
  "number": "5.9.7",
  "title": "",
  "body": "  contains four graphs on six vertices. Determine which (if any) pairs of graphs are isomorphic. For pairs that are isomorphic, give an isomorphism between the two graphs. For pairs that are not isomorphic, explain why.   Are these graphs isomorphic?       "
},
{
  "id": "s_graphs_exercises-8",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-8",
  "type": "Exercise",
  "number": "5.9.8",
  "title": "",
  "body": "  Find an eulerian circuit in the graph in or explain why one does not exist.   A graph       "
},
{
  "id": "s_graphs_exercises-9",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-9",
  "type": "Exercise",
  "number": "5.9.9",
  "title": "",
  "body": "  Consider the graph in . Determine if the graph is eulerian. If it is, find an eulerian circuit. If it is not, explain why it is not. Determine if the graph is hamiltonian. If it is, find a hamiltonian cycle. If it is not, explain why it is not.   A graph     "
},
{
  "id": "s_graphs_exercises-10",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-10",
  "type": "Exercise",
  "number": "5.9.10",
  "title": "",
  "body": "  Explain why the graph in does not have an eulerian circuit, but show that by adding a single edge, you can make it eulerian.   A graph       "
},
{
  "id": "s_graphs_exercises-11",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-11",
  "type": "Exercise",
  "number": "5.9.11",
  "title": "",
  "body": "  An eulerian trail eulerian trail is defined in the same manner as an eulerian circuit (see ) except that we drop the condition that . Prove that a graph has an eulerian trail if and only if it is connected and has at most two vertices of odd degree.   "
},
{
  "id": "s_graphs_exercises-12",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-12",
  "type": "Exercise",
  "number": "5.9.12",
  "title": "",
  "body": "  Alice and Bob are discussing a graph that has vertices and edges. Bob argues that the graph is hamiltonian, while Alice says that he's wrong. Without knowing anything more about the graph, must one of them be right? If so, who and why, and if not, why not?   "
},
{
  "id": "s_graphs_exercises-13",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-13",
  "type": "Exercise",
  "number": "5.9.13",
  "title": "",
  "body": "  Find the chromatic number of the graph in and a coloring using colors.   A graph to color     "
},
{
  "id": "s_graphs_exercises-14",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-14",
  "type": "Exercise",
  "number": "5.9.14",
  "title": "",
  "body": "  Find the chromatic number of the graph in and a coloring using colors.   A graph to color     "
},
{
  "id": "s_graphs_exercises-15",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-15",
  "type": "Exercise",
  "number": "5.9.15",
  "title": "",
  "body": "  A pharmaceutical manufacturer is building a new warehouse to store its supply of chemicals it uses in production. However, some of the chemicals cannot be stored in the same room due to undesirable reactions that will occur. The matrix below has a in position if and only if chemical and chemical cannot be stored in the same room. Develop an appropriate graph theoretic model and determine the smallest number of rooms into which they can divide their warehouse so that they can safely store all chemicals in the warehouse.    "
},
{
  "id": "s_graphs_exercises-16",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-16",
  "type": "Exercise",
  "number": "5.9.16",
  "title": "",
  "body": "  A school is preparing the schedule of classes for the next academic year. They are concerned about scheduling calculus, physics, English, statistics, economics, chemistry, and German classes, planning to offer a single section of each one. Below are the lists of courses that each of six students must take in order to successfully graduate. Determine the smallest number of class periods that can be used to schedule these courses if each student can take at most one course per class period. Explain why fewer class periods cannot be used.     Student Courses  1 Chemistry, Physics, Economics  2 English, German, Statistics  3 Statistics, Calculus, German  4 Chemistry, Physics  5 English, Chemistry  6 Chemistry, Economics     "
},
{
  "id": "s_graphs_exercises-17",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-17",
  "type": "Exercise",
  "number": "5.9.17",
  "title": "",
  "body": "  All trees with more than one vertex have the same chromatic number. What is it, and why?   "
},
{
  "id": "ex_color",
  "level": "2",
  "url": "s_graphs_exercises.html#ex_color",
  "type": "Exercise",
  "number": "5.9.18",
  "title": "",
  "body": "  Find a proper -coloring of the graph in Mycielski's proof of . This establishes that .   "
},
{
  "id": "s_graphs_exercises-19",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-19",
  "type": "Exercise",
  "number": "5.9.19",
  "title": "",
  "body": "  How many vertices does the graph from the Kelly and Kelly proof of have?   "
},
{
  "id": "s_graphs_exercises-20",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-20",
  "type": "Exercise",
  "number": "5.9.20",
  "title": "",
  "body": "  Construct and draw the graph from Mycielski's proof of .   "
},
{
  "id": "s_graphs_exercises-21",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-21",
  "type": "Exercise",
  "number": "5.9.21",
  "title": "",
  "body": "  Find a recursive formula for the number of vertices in the graph from the Kelly and Kelly proof of .   "
},
{
  "id": "s_graphs_exercises-22",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-22",
  "type": "Exercise",
  "number": "5.9.22",
  "title": "",
  "body": "  Let be the number of vertices in the graph from the Mycielski's proof of . Find a recursive formula for .   "
},
{
  "id": "s_graphs_exercises-23",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-23",
  "type": "Exercise",
  "number": "5.9.23",
  "title": "",
  "body": "  The girth girth of a graph is the number of vertices in a shortest cycle of . Find the girth of the graph in the Kelly and Kelly proof of and prove that your answer is correct. As a challenge, see if you can modify the construction of to increase the girth. If so, how far are you able to increase it?   "
},
{
  "id": "ex_graphs_first-fit-color",
  "level": "2",
  "url": "s_graphs_exercises.html#ex_graphs_first-fit-color",
  "type": "Exercise",
  "number": "5.9.24",
  "title": "",
  "body": "  Use the First Fit algorithm to color the graph in using the two different orderings of the vertex set shown there.   "
},
{
  "id": "s_graphs_exercises-25",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-25",
  "type": "Exercise",
  "number": "5.9.25",
  "title": "",
  "body": "  Draw the interval graph corresponding to the intervals in .   A collection of intervals     "
},
{
  "id": "s_graphs_exercises-26",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-26",
  "type": "Exercise",
  "number": "5.9.26",
  "title": "",
  "body": "  Use the First Fit coloring algorithm to find the chromatic number of the interval graph whose interval representation is shown in as well as a proper coloring using as few colors as possible.   "
},
{
  "id": "s_graphs_exercises-27",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-27",
  "type": "Exercise",
  "number": "5.9.27",
  "title": "",
  "body": "    From you know that choosing a bad ordering of the vertices of a graph can lead to the First Fit coloring algorithm producing a coloring that is far from optimal. However, you can use this algorithm to prove a bound on the chromatic number. Show that if every vertex of has degree at most , then .  Give an example of a bipartite graph with to show that this bound need not be tight.     "
},
{
  "id": "s_graphs_exercises-28",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-28",
  "type": "Exercise",
  "number": "5.9.28",
  "title": "",
  "body": "  Is the graph in planar? If it is, find a drawing without edges crossings. If it is not give a reason why it is not.   "
},
{
  "id": "s_graphs_exercises-29",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-29",
  "type": "Exercise",
  "number": "5.9.29",
  "title": "",
  "body": "  Is the graph in planar? If it is, find a drawing without edge crossings. If it is not give a reason why it is not.   Is this graph planar?     "
},
{
  "id": "s_graphs_exercises-30",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-30",
  "type": "Exercise",
  "number": "5.9.30",
  "title": "",
  "body": "  Find a planar drawing of the graph , by which we mean the graph formed from the complete graph on vertices by deleting any edge.   "
},
{
  "id": "s_graphs_exercises-31",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-31",
  "type": "Exercise",
  "number": "5.9.31",
  "title": "",
  "body": "  Exhibit a planar drawing of an eulerian planar graph with vertices and edges.   "
},
{
  "id": "s_graphs_exercises-32",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-32",
  "type": "Exercise",
  "number": "5.9.32",
  "title": "",
  "body": "  Show that every planar graph has a vertex that is incident to at most five edges.   "
},
{
  "id": "ex_graphs_degseq",
  "level": "2",
  "url": "s_graphs_exercises.html#ex_graphs_degseq",
  "type": "Exercise",
  "number": "5.9.33",
  "title": "",
  "body": "  Let be a graph with . Its degree sequence is the list of the degrees of its vertices, arranged in nonincreasing order. That is, the degree sequence of is with the vertices arranged such that . Below are five sequences of integers (along with , the number of integers in the sequence). Identify  the one sequence that cannot be the degree sequence of any graph ;  the two sequences that could be the degree sequence of a planar graph;  the one sequence that could be the degree sequence of a tree ;  the one sequence that is the degree sequence of an eulerian graph; and  the one sequence that is the degree sequence of a graph that must be hamiltonian .  Explain your answers. (Note that one sequence will get two labels from above.)  :  :  :  :  :     "
},
{
  "id": "ex_graphs_degseq2",
  "level": "2",
  "url": "s_graphs_exercises.html#ex_graphs_degseq2",
  "type": "Exercise",
  "number": "5.9.34",
  "title": "",
  "body": "  Below are three sequences of length . One of the sequences cannot be the degree sequence (see ) of any graph. Identify it and say why. For each of the other two, say why (if you have enough information) a connected graph with that degree sequence  is definitely hamiltonian\/cannot be hamiltonian;  is definitely eulerian\/cannot be eulerian;  is definitely a tree\/cannot be a tree; and  is definitely planar\/cannot be planar.  (If you do not have enough information to make a determination for a sequence without having specific graph(s) with that degree sequence, write not enough information for that property.)        "
},
{
  "id": "s_graphs_exercises-35",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-35",
  "type": "Exercise",
  "number": "5.9.35",
  "title": "",
  "body": "  For the two degree sequences in that correspond to graphs, there were some properties for which the degree sequence was not sufficient information to determine if the graph had that property. For each of those situations, see if you can draw both a graph that has the property and a graph that does not have the property.   "
},
{
  "id": "s_graphs_exercises-36",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-36",
  "type": "Exercise",
  "number": "5.9.36",
  "title": "",
  "body": "  Draw the labeled trees on vertices.   "
},
{
  "id": "s_graphs_exercises-37",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-37",
  "type": "Exercise",
  "number": "5.9.37",
  "title": "",
  "body": "  Determine for the tree in .   A -vertex tree       "
},
{
  "id": "s_graphs_exercises-38",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-38",
  "type": "Exercise",
  "number": "5.9.38",
  "title": "",
  "body": "  Determine for the tree in .   A -vertex tree       "
},
{
  "id": "s_graphs_exercises-39",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-39",
  "type": "Exercise",
  "number": "5.9.39",
  "title": "",
  "body": "  Determine for the tree  .   A -vertex tree       "
},
{
  "id": "s_graphs_exercises-40",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-40",
  "type": "Exercise",
  "number": "5.9.40",
  "title": "",
  "body": "  Construct the labeled tree with Prüfer code .   "
},
{
  "id": "s_graphs_exercises-41",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-41",
  "type": "Exercise",
  "number": "5.9.41",
  "title": "",
  "body": "  Construct the labeled tree with Prüfer code .   "
},
{
  "id": "s_graphs_exercises-42",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-42",
  "type": "Exercise",
  "number": "5.9.42",
  "title": "",
  "body": "  Construct the labeled tree with Prüfer code (using commas to separate symbols in the string, since we have labels greater than ) .   "
},
{
  "id": "s_graphs_exercises-43",
  "level": "2",
  "url": "s_graphs_exercises.html#s_graphs_exercises-43",
  "type": "Exercise",
  "number": "5.9.43",
  "title": "",
  "body": "  (Challenge problem) When is a graph, let denote the maximum degree in . Prove Brooks' Theorem : If is connected and , then . Furthermore, equality holds if and only if (a) and is an odd cycle, or (b) and .   Hint: It's clear that (in fact, this was already assigned as an exercise). Assume that but that neither conclusion (a) or (b) holds. Take a spanning tree of and an appropriate ordering of the vertices, with two leaves of the tree coming first. Then show that a First Fit coloring of the graph will only use colors.   "
},
{
  "id": "s_posets_intro",
  "level": "1",
  "url": "s_posets_intro.html",
  "type": "Section",
  "number": "6.1",
  "title": "Basic Notation and Terminology",
  "body": " Basic Notation and Terminology  A partially ordered set or poset  partially ordered set   poset   is a pair where is a set and is a reflexive, antisymmetric, and transitive binary relation on . (Refer to for a refresher of what these properties are if you need to.) We call the ground set  ground set  while is a partial order  order  partial  on . Elements of the ground set are also called points , and the poset is finite if its ground set is a finite set.    Let . Consider the following binary relations on . Which of the binary relations are partial orders on ? For those that are not partial orders on , which property or properties are violated?    A bit of checking confirms that , and are partial orders on , so , and are posets. Several of the other examples we will discuss in this chapter will use the poset .  On the other hand, , and are not partial orders on . Note that is not transitive, as it contains and but not . The relation is not reflexive, since it doesn't contain . (Also, it also doesn't contain , but one shortcoming is enough.) Note that is a partial order on . The relation is not antisymmetric, as it contains both and .    When is a poset, it is common to write in or in as substitutes for . Of course, the notations in and in mean in and . When the poset remains fixed throughout a discussion, we will sometimes abbreviate in by just writing , When and are distinct points from , we say is covered  cover  by in Reflecting the vagaries of the English language, mathematicians use the phrases: (1) is covered by in ; (2) covers in ; and (3) is a cover in interchangeably. when in , and there is no point for which and in . For example, in the poset from , is covered by and covers . However, is not covered by , since in . We can then associate with the poset a cover graph  graph  cover   whose vertex set is the ground set of with an edge in if and only if one of and covers the other in . Again, for the poset from , we show the cover graph on the left side of . Actually, on the right side of this figure is just another drawing of this same graph.   Cover Graph    It is convenient to illustrate a poset with a suitably drawn diagram of the cover graph in the Euclidean plane. We choose a standard horizontal\/vertical coordinate system in the plane and require that the vertical coordinate of the point corresponding to be larger than the vertical coordinate of the point corresponding to whenever covers in . Each edge in the cover graph is represented by a straight line segment which contains no point corresponding to any element in the poset other than those associated with its two end points. Such diagrams are called Hasse diagrams  Hasse diagrams  ( poset diagrams, order diagrams , or just diagrams ). Now it should be clear that the drawing on the right side of is a diagram of the poset from , while the diagram on the left is not.  For posets of moderate size, diagrams are frequently used to define a poset rather than the explicit binary relation notation illustrated in . In , we illustrate a poset with ground set . It would take several lines of text to write out the binary relation , and somehow the diagram serves to give us a more tactile sense of the properties of the poset.   A Poset on 17 Points     Alice and Bob are talking about how you communicate with a computer in working with posets. Bob says that computers have incredible graphics capabilities these days and that you just give the computer a pdf scan of a diagram. Alice says that she doubts that anybody really does that. Carlos says that there are several effective strategies. One way is to label the points with positive integers from where is the number of points in the ground set and then define a  matrix with entry when in and otherwise. Alternatively, you can just provide for each element in the ground set a vector listing all elements which are greater than in . This vector can be what computer scientists call a linked list .   A partial order is called a total order  order  total  (also, a linear order  order  linear  ) if for all , either in or in . For small finite sets, we can specify a linear order by listing the elements from least to greatest. For example, is the linear order on the ground set with in .  The set of real numbers comes equipped with a natural total order. For example, in this order. But in this chapter, we will be interested primarily with partial orders that are not linear orders. Also, we note that special care must be taken when discussing partial orders on ground sets whose elements are real numbers. For the poset shown in , note that is less than , while and are incomparable. Best not to tell your parents that you've learned that under certain circumstances, can be less than and that you may be able to say which of and is larger than the other. The subtlety may be lost in the heated discussion certain to follow.   There are several quite natural ways to construct posets.   A family of sets is partially ordered by inclusion, , set if and only if is a subset of .    A set of positive integers is partially ordered by division without remainder, , set if and only if .    A set of -tuples of real numbers is partially ordered by the rule if and only if in the natural order on for .    When , are linear orders on the same set , we can define a partial order on by setting in if and only if in for all .     We illustrate the first three constructions with the posets shown in . As is now clear, in the discussion at the very beginning of this chapter, Dave drew a diagram for the poset determined by the intersection of the linear orders given by Alice and the movie critic.    Constructing Posets    Distinct points and in a poset are comparable  comparable  if either in or in ; otherwise and are incomparable .  incomparable  If and are incomparable in , we sometimes write in .     and are incomparable  With a poset , we associate a comparability graph  graph  comparability   and an incomparability graph  graph  incomparability   . The edges in the comparability graph consist of the comparable pairs and the edges in the incomparability graph are the incomparable pairs. We illustrate these definitions in where we show the comparability graph and the incomparability graph of the poset .   Comparability and Incomparability Graphs    When is a poset and , the binary relation is a partial order on , and we call the poset a subposet  subposet  of . In , we show a subposet of the poset first presented in .   A Subposet    When is a poset and is a subset of , we say that is a chain  chain  if every distinct pair of points from is comparable in . When is a linear order, the entire ground set is a chain. Dually, if is a subset of , we say that is an antichain  antichain  if every distinct pair of points from is incomparable in . Note that a one-element subset is both a chain and an antichain. Also, we consider the empty set as both a chain and an antichain.  The height  height  of a poset , denoted     height of poset  , is the largest for which there exists a chain of points in . Dually, the width of a poset , denoted     width of poset  , is the largest for which there exists an antichain of points in .   Given a poset , how hard is to determine its height and width? Bob says that it is very easy. For example, to find the width of a poset, just list all the subsets of . Delete those which are not antichains. The answer is the size of the largest subset that remains. He is quick to assert that the same approach will work to find the height. Alice groans at Bob's naivety and suggests that he should read further in this chapter.   "
},
{
  "id": "s_posets_intro-2",
  "level": "2",
  "url": "s_posets_intro.html#s_posets_intro-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "partially ordered set poset ground set partial order points finite "
},
{
  "id": "exa_binaryrel",
  "level": "2",
  "url": "s_posets_intro.html#exa_binaryrel",
  "type": "Example",
  "number": "6.3",
  "title": "",
  "body": "  Let . Consider the following binary relations on . Which of the binary relations are partial orders on ? For those that are not partial orders on , which property or properties are violated?    A bit of checking confirms that , and are partial orders on , so , and are posets. Several of the other examples we will discuss in this chapter will use the poset .  On the other hand, , and are not partial orders on . Note that is not transitive, as it contains and but not . The relation is not reflexive, since it doesn't contain . (Also, it also doesn't contain , but one shortcoming is enough.) Note that is a partial order on . The relation is not antisymmetric, as it contains both and .   "
},
{
  "id": "s_posets_intro-4",
  "level": "2",
  "url": "s_posets_intro.html#s_posets_intro-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "covered cover graph "
},
{
  "id": "fig_covergraphs",
  "level": "2",
  "url": "s_posets_intro.html#fig_covergraphs",
  "type": "Figure",
  "number": "6.4",
  "title": "",
  "body": " Cover Graph   "
},
{
  "id": "s_posets_intro-6",
  "level": "2",
  "url": "s_posets_intro.html#s_posets_intro-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Hasse diagrams poset diagrams, order diagrams diagrams "
},
{
  "id": "fig_17ptposet",
  "level": "2",
  "url": "s_posets_intro.html#fig_17ptposet",
  "type": "Figure",
  "number": "6.5",
  "title": "",
  "body": " A Poset on 17 Points   "
},
{
  "id": "s_posets_intro-9",
  "level": "2",
  "url": "s_posets_intro.html#s_posets_intro-9",
  "type": "Discussion",
  "number": "6.6",
  "title": "",
  "body": " Alice and Bob are talking about how you communicate with a computer in working with posets. Bob says that computers have incredible graphics capabilities these days and that you just give the computer a pdf scan of a diagram. Alice says that she doubts that anybody really does that. Carlos says that there are several effective strategies. One way is to label the points with positive integers from where is the number of points in the ground set and then define a  matrix with entry when in and otherwise. Alternatively, you can just provide for each element in the ground set a vector listing all elements which are greater than in . This vector can be what computer scientists call a linked list .  "
},
{
  "id": "s_posets_intro-10",
  "level": "2",
  "url": "s_posets_intro.html#s_posets_intro-10",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "total order linear order "
},
{
  "id": "exa_construct",
  "level": "2",
  "url": "s_posets_intro.html#exa_construct",
  "type": "Example",
  "number": "6.7",
  "title": "",
  "body": " There are several quite natural ways to construct posets.   A family of sets is partially ordered by inclusion, , set if and only if is a subset of .    A set of positive integers is partially ordered by division without remainder, , set if and only if .    A set of -tuples of real numbers is partially ordered by the rule if and only if in the natural order on for .    When , are linear orders on the same set , we can define a partial order on by setting in if and only if in for all .     We illustrate the first three constructions with the posets shown in . As is now clear, in the discussion at the very beginning of this chapter, Dave drew a diagram for the poset determined by the intersection of the linear orders given by Alice and the movie critic.  "
},
{
  "id": "fig_constructposets",
  "level": "2",
  "url": "s_posets_intro.html#fig_constructposets",
  "type": "Figure",
  "number": "6.8",
  "title": "",
  "body": " Constructing Posets   "
},
{
  "id": "s_posets_intro-14",
  "level": "2",
  "url": "s_posets_intro.html#s_posets_intro-14",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "comparable incomparable comparability graph incomparability graph "
},
{
  "id": "fig_compincomp",
  "level": "2",
  "url": "s_posets_intro.html#fig_compincomp",
  "type": "Figure",
  "number": "6.9",
  "title": "",
  "body": " Comparability and Incomparability Graphs   "
},
{
  "id": "s_posets_intro-16",
  "level": "2",
  "url": "s_posets_intro.html#s_posets_intro-16",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "subposet "
},
{
  "id": "fig_subposet",
  "level": "2",
  "url": "s_posets_intro.html#fig_subposet",
  "type": "Figure",
  "number": "6.10",
  "title": "",
  "body": " A Subposet   "
},
{
  "id": "s_posets_intro-18",
  "level": "2",
  "url": "s_posets_intro.html#s_posets_intro-18",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "chain antichain "
},
{
  "id": "s_posets_intro-19",
  "level": "2",
  "url": "s_posets_intro.html#s_posets_intro-19",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "height width "
},
{
  "id": "s_posets_intro-20",
  "level": "2",
  "url": "s_posets_intro.html#s_posets_intro-20",
  "type": "Discussion",
  "number": "6.11",
  "title": "",
  "body": " Given a poset , how hard is to determine its height and width? Bob says that it is very easy. For example, to find the width of a poset, just list all the subsets of . Delete those which are not antichains. The answer is the size of the largest subset that remains. He is quick to assert that the same approach will work to find the height. Alice groans at Bob's naivety and suggests that he should read further in this chapter.  "
},
{
  "id": "s_posets_additional-concepts",
  "level": "1",
  "url": "s_posets_additional-concepts.html",
  "type": "Section",
  "number": "6.2",
  "title": "Additional Concepts for Posets",
  "body": " Additional Concepts for Posets  We say and are isomorphic , and write if there exists a bijection (1 1 and onto map) so that in if and only if in . In this definition, the map is called an isomorphism  isomorphism  of posets  from to . In , the first two posets are isomorphic.   Bob sees a pattern linking the first two posets shown in and asserts that any poset of one of these two types is isomorphic to a poset of the other type. Alice admits that Bob is right but even more is true. The four constructions given in are universal in the sense that every poset is isomorphic to a poset of each of the four types. Do you see why? If you get stuck answering this, we will revisit the question at the end of the chapter, and we will give you a hint.   An isomorphism from to is called an automorphism  automorphism  of poset  of . An isomorphism from to a subposet of is called an embedding  embedding  of in . In most settings, we will not distinguish between isomorphic posets, and we will say that a poset is contained in (also  contains  ) when there is an embedding of in . Also, we will say that  excludes  when no subposet of is isomorphic to , and we will frequently say when and are isomorphic.  With the notion of isomorphism, we are lead naturally to the notion of an unlabeled posets, and in , we show a diagram for such a poset.   An Unlabeled Partially Ordered Set     How hard is it to tell whether two posets are isomorphic? Bob thinks it's not too difficult. Bob says that if you give him a bijection between the ground sets, then he can quickly determine whether you have established that the two posets are isomorphic. Alice senses that Bob is confusing the issue of testing whether two posets are isomorphic with simply verifying that a particular bijection can be certified to be an isomorphism. The first problem seems much harder to her. Carlos says that he thinks it's actually very hard and that in fact, no one knows whether there is a good algorithm.   Note that the poset shown in has the property that there is only one maximal point. Such a point is sometimes called a one , denoted not surprisingly as . Also, there is only one minimal point, and it is called a zero , denoted .  The dual of a partial order  dual   on a set is denoted by and is defined by . The dual of a poset  is denoted by and is defined by . A poset is self-dual if .  A poset is connected  connected  poset  if its comparability graph is connected, , for every with , there is a finite sequence of points from so that is comparable to in for . A subposet of is called a component  component  of poset  of if is connected and there is no subset containing as a proper subset for which is connected. A one-point component is trivial (also, a loose point or isolated point ); components of two or more points are nontrivial . Note that a loose point is both a minimal element and a maximal element. Returning to the poset shown in , we see that it has two components.  It is natural to say that a graph is a comparability graph  graph  comparability  when there is a poset whose comparability graph is isomorphic to . For example, we show in a graph on vertices which is not a comparability graph. (We leave the task of establishing this claim as an exercise.)   A Graph Which is Not a Comparability Graph    Similarly, we say that a graph is a cover graph  graph  cover  when there exists a poset whose cover graph is isomorphic to . Not every graph is a cover graph. In particular, any graph which contains a triangle is not a cover graph. In the exercises at the end of the chapter, you will be asked to construct triangle-free graphs which are not cover graphs with some hints given as to how to proceed.   Bob is quite taken with graphs associated with posets. He makes the following claims.   Only linear orders have paths as cover graphs.    A poset and its dual have the same cover graph and the same comparability graph.    Any two posets with the same cover graph have the same height and the same width.    Any two posets with the same comparability graph have the same height and the same width.     Alice shrugs and says that Bob is right half the time. Which two assertions are correct?  Undeterred, Bob notes that the comparability graph shown in is also an incomparability graph (for another poset). He goes on to posit that this is always true, , whenever is the comparability graph of a poset , there is another poset for which is the incomparability graph of . Alice says that Bob is right on the first count but she is not so sure about the second. Dave mumbles that they should take a look at the comparability graph of the third poset in . This graph is not an incomparability graph. But in his typical befuddled manner, Dave doesn't offer any justification for this statement. Can you help Alice and Bob to see why Dave is correct?  Bob is on a roll and he goes on to suggest that it is relatively easy to determine whether a graph is a comparability graph (he read it on the web), but he has a sense that determining whether a graph is a cover graph might be difficult. Do you think he is right on either count?      Look at the four claims Bob makes in . For each claim, briefly discuss reasons why you think that Bob is correct or incorrect. Alice is correct that two of Bob's claims are correct, but try to avoid process of elimination as your justification for one of the claims being correct\/incorrect!      "
},
{
  "id": "s_posets_additional-concepts-2",
  "level": "2",
  "url": "s_posets_additional-concepts.html#s_posets_additional-concepts-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "isomorphic isomorphism "
},
{
  "id": "s_posets_additional-concepts-3",
  "level": "2",
  "url": "s_posets_additional-concepts.html#s_posets_additional-concepts-3",
  "type": "Discussion",
  "number": "6.12",
  "title": "",
  "body": " Bob sees a pattern linking the first two posets shown in and asserts that any poset of one of these two types is isomorphic to a poset of the other type. Alice admits that Bob is right but even more is true. The four constructions given in are universal in the sense that every poset is isomorphic to a poset of each of the four types. Do you see why? If you get stuck answering this, we will revisit the question at the end of the chapter, and we will give you a hint.  "
},
{
  "id": "s_posets_additional-concepts-4",
  "level": "2",
  "url": "s_posets_additional-concepts.html#s_posets_additional-concepts-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "automorphism embedding contained contains excludes "
},
{
  "id": "f_unlabeled",
  "level": "2",
  "url": "s_posets_additional-concepts.html#f_unlabeled",
  "type": "Figure",
  "number": "6.13",
  "title": "",
  "body": " An Unlabeled Partially Ordered Set   "
},
{
  "id": "s_posets_additional-concepts-7",
  "level": "2",
  "url": "s_posets_additional-concepts.html#s_posets_additional-concepts-7",
  "type": "Discussion",
  "number": "6.14",
  "title": "",
  "body": " How hard is it to tell whether two posets are isomorphic? Bob thinks it's not too difficult. Bob says that if you give him a bijection between the ground sets, then he can quickly determine whether you have established that the two posets are isomorphic. Alice senses that Bob is confusing the issue of testing whether two posets are isomorphic with simply verifying that a particular bijection can be certified to be an isomorphism. The first problem seems much harder to her. Carlos says that he thinks it's actually very hard and that in fact, no one knows whether there is a good algorithm.  "
},
{
  "id": "s_posets_additional-concepts-8",
  "level": "2",
  "url": "s_posets_additional-concepts.html#s_posets_additional-concepts-8",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "one zero "
},
{
  "id": "s_posets_additional-concepts-9",
  "level": "2",
  "url": "s_posets_additional-concepts.html#s_posets_additional-concepts-9",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "dual of a partial order dual of a poset self-dual "
},
{
  "id": "s_posets_additional-concepts-10",
  "level": "2",
  "url": "s_posets_additional-concepts.html#s_posets_additional-concepts-10",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "connected component trivial loose point isolated point nontrivial "
},
{
  "id": "s_posets_additional-concepts-11",
  "level": "2",
  "url": "s_posets_additional-concepts.html#s_posets_additional-concepts-11",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "comparability graph "
},
{
  "id": "fig_noncompgraph",
  "level": "2",
  "url": "s_posets_additional-concepts.html#fig_noncompgraph",
  "type": "Figure",
  "number": "6.15",
  "title": "",
  "body": " A Graph Which is Not a Comparability Graph   "
},
{
  "id": "s_posets_additional-concepts-13",
  "level": "2",
  "url": "s_posets_additional-concepts.html#s_posets_additional-concepts-13",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "cover graph "
},
{
  "id": "discussion_posets_additional-concepts_claims",
  "level": "2",
  "url": "s_posets_additional-concepts.html#discussion_posets_additional-concepts_claims",
  "type": "Discussion",
  "number": "6.16",
  "title": "",
  "body": " Bob is quite taken with graphs associated with posets. He makes the following claims.   Only linear orders have paths as cover graphs.    A poset and its dual have the same cover graph and the same comparability graph.    Any two posets with the same cover graph have the same height and the same width.    Any two posets with the same comparability graph have the same height and the same width.     Alice shrugs and says that Bob is right half the time. Which two assertions are correct?  Undeterred, Bob notes that the comparability graph shown in is also an incomparability graph (for another poset). He goes on to posit that this is always true, , whenever is the comparability graph of a poset , there is another poset for which is the incomparability graph of . Alice says that Bob is right on the first count but she is not so sure about the second. Dave mumbles that they should take a look at the comparability graph of the third poset in . This graph is not an incomparability graph. But in his typical befuddled manner, Dave doesn't offer any justification for this statement. Can you help Alice and Bob to see why Dave is correct?  Bob is on a roll and he goes on to suggest that it is relatively easy to determine whether a graph is a comparability graph (he read it on the web), but he has a sense that determining whether a graph is a cover graph might be difficult. Do you think he is right on either count?  "
},
{
  "id": "reading_posets_additional-concepts_graphs",
  "level": "2",
  "url": "s_posets_additional-concepts.html#reading_posets_additional-concepts_graphs",
  "type": "Reading Question",
  "number": "6.2.1",
  "title": "",
  "body": "  Look at the four claims Bob makes in . For each claim, briefly discuss reasons why you think that Bob is correct or incorrect. Alice is correct that two of Bob's claims are correct, but try to avoid process of elimination as your justification for one of the claims being correct\/incorrect!    "
},
{
  "id": "s_posets_dilworth",
  "level": "1",
  "url": "s_posets_dilworth.html",
  "type": "Section",
  "number": "6.3",
  "title": "Dilworth’s Chain Covering Theorem and its Dual",
  "body": " Dilworth's Chain Covering Theorem and its Dual  In this section, we prove the following theorem of R.P. Dilworth, which is truly one of the classic results of combinatorial mathematics.   Dilworth's Theorem   Dilworth's theorem    If is a poset and , then there exists a partition , where is a chain for . Furthermore, there is no chain partition into fewer chains.    Before proceeding with the proof of Dilworth's theorem later in this section , we pause to discuss the dual version for partitions into antichains, as it is even easier to prove.   Dual of Dilworth's Theorem   Dilworth's theorem  dual of    If is a poset and , then there exists a partition , where is an antichain for . Furthermore, there is no partition using fewer antichains.    For each , let be the largest integer for which there exists a chain with . Evidently, for all . Then for each , let . It is easy to see that each is an antichain, as if are such that , then there is a chain , so . Since , there is a maximum chain . If it were possible to partition into antichains, then by the Pigeon Hole Principle, one of the antichains would contain two points from , but this is not possible.    When is a poset, a point with is called a minimal point  minimal  point of a poset  of . We denote the set of all minimal points of a poset by . Since we use the notation for a poset, the set of minimal elements can be denoted by or . This convention will be used for all set valued and integer valued functions of posets.   The argument given for the proof of yields an efficient algorithm, one that is defined recursively. Set . If has been defined and , let and then let denote the subposet remaining when is removed from .  In , we illustrate the antichain partition provided by this algorithm for the point poset from . The darkened points form a chain of size .   A Poset of Height 5     Alice claims that it is very easy to find the set of minimal elements of a poset. Do you agree?   Dually, we can speak of the set of maximal points  maximal  points of a poset  of . We can also partition into antichains by recursively removing the set of maximal points.  We pause to remark that when is a poset, the set of all chains of is itself partially ordered by inclusion. So it is natural to say that a chain is maximal  maximal  chain  when there is no chain containing as a proper subset. Also, a chain is maximum  maximum  chain  when there is no chain with . Of course, a maximum chain is maximal, but maximal chains need not be maximum.  Maximal antichains and maximum antichains are defined analogously.  maximal  antichain   maximum  antichain    With this terminology, the thrust of is that it is easy to find the height of a poset as well as a maximum chain consisting of points from . Of course, we also get a handy partition of the poset into antichains.     Consider implementing an algorithm from on the poset of . First, verify that you agree with the labeling of the points with their heights, which assigns the points to antichains. Explain why this poset is a good illustration of why finding the chain of five points is best done by starting with a point labeled and working down instead of starting with a point labeled and working up.       Proof of Dilworth's Theorem  The argument for Dilworth's theorem is simplified by the following notation. When is a poset and , we let ; ; ; ; and . When , we let in , for some and . The subsets and are defined dually. We call , , , and  down sets , while , , , and are up sets .  down set   up set      down set      up set  Note that when is a maximal antichain in , the ground set can be partitioned into pairwise disjoint sets as .  We are now ready for the proof. Let be a poset and let denote the width of . As in , the Pigeon Hole Principle implies that we require at least chains in any chain partition of . To prove that suffice, we proceed by induction on , the result being trivial if . Assume validity for all posets with and suppose that is a poset with . Without loss of generality, ; otherwise, the trivial partition satisfies the conclusion of the theorem. Furthermore, we observe that if is a (nonempty) chain in , then we may assume that the subposet also has width . To see this, observe that the theorem holds for the subposet, so that if , then we can partition as , so that is a partition into chains. Since , we know , so we have a partition of into at most chains. Since any partition of into chains must use at least chains, this is exactly the partition we seek.  Choose a maximal point and a minimal point with in . Then let be the chain containing only the points and . Note that contains either one or two elements depending on whether and are distinct.  Let and and let be a -element antichain in the subposet . In the partition , the fact that is a minimal point while is a maximal antichain imply that . Similarly, . In particular, this shows that and are distinct.  Label the elements of as . Note that since , and since . Therefore, we may apply the inductive hypothesis to the subposets of determined by and , respectively, and partition each of these two subposets into chains: Without loss of generality, we may assume these chains have been labeled so that for each . However, this implies that is the desired partition which in turn completes the proof.  In , we illustrate Dilworth's chain covering theorem for the poset first introduced in . The darkened points form a -element antichain, while the labels provide a partition into chains.   A Poset of Width 7     The ever alert Alice notes that the proof given above for Dilworth's theorem does not seem to provide an efficient algorithm for finding the width of a poset, much less a partition of the poset into chains. Bob has yet to figure out why listing all the subsets of is a bad idea. Carlos is sitting quietly listening to their bickering, but finally, he says that a skilled programmer can devise an algorithm from the proof. Students are encouraged to discuss this dilemma but rest assured that we will return to this issue later in the text.    "
},
{
  "id": "thm_dilworth",
  "level": "2",
  "url": "s_posets_dilworth.html#thm_dilworth",
  "type": "Theorem",
  "number": "6.17",
  "title": "Dilworth’s Theorem.",
  "body": " Dilworth's Theorem   Dilworth's theorem    If is a poset and , then there exists a partition , where is a chain for . Furthermore, there is no chain partition into fewer chains.   "
},
{
  "id": "thm_dualdilworth",
  "level": "2",
  "url": "s_posets_dilworth.html#thm_dualdilworth",
  "type": "Theorem",
  "number": "6.18",
  "title": "Dual of Dilworth’s Theorem.",
  "body": " Dual of Dilworth's Theorem   Dilworth's theorem  dual of    If is a poset and , then there exists a partition , where is an antichain for . Furthermore, there is no partition using fewer antichains.    For each , let be the largest integer for which there exists a chain with . Evidently, for all . Then for each , let . It is easy to see that each is an antichain, as if are such that , then there is a chain , so . Since , there is a maximum chain . If it were possible to partition into antichains, then by the Pigeon Hole Principle, one of the antichains would contain two points from , but this is not possible.   "
},
{
  "id": "s_posets_dilworth-6",
  "level": "2",
  "url": "s_posets_dilworth.html#s_posets_dilworth-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "minimal point "
},
{
  "id": "fig_height5",
  "level": "2",
  "url": "s_posets_dilworth.html#fig_height5",
  "type": "Figure",
  "number": "6.19",
  "title": "",
  "body": " A Poset of Height 5   "
},
{
  "id": "s_posets_dilworth-10",
  "level": "2",
  "url": "s_posets_dilworth.html#s_posets_dilworth-10",
  "type": "Discussion",
  "number": "6.20",
  "title": "",
  "body": " Alice claims that it is very easy to find the set of minimal elements of a poset. Do you agree?  "
},
{
  "id": "s_posets_dilworth-11",
  "level": "2",
  "url": "s_posets_dilworth.html#s_posets_dilworth-11",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "maximal points "
},
{
  "id": "s_posets_dilworth-12",
  "level": "2",
  "url": "s_posets_dilworth.html#s_posets_dilworth-12",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "maximal maximum "
},
{
  "id": "s_posets_dilworth-13",
  "level": "2",
  "url": "s_posets_dilworth.html#s_posets_dilworth-13",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Maximal antichains maximum antichains "
},
{
  "id": "posets_dilworth_reading",
  "level": "2",
  "url": "s_posets_dilworth.html#posets_dilworth_reading",
  "type": "Reading Question",
  "number": "6.3.1",
  "title": "",
  "body": "  Consider implementing an algorithm from on the poset of . First, verify that you agree with the labeling of the points with their heights, which assigns the points to antichains. Explain why this poset is a good illustration of why finding the chain of five points is best done by starting with a point labeled and working down instead of starting with a point labeled and working up.    "
},
{
  "id": "para_posets_dilworth_proof-2",
  "level": "2",
  "url": "s_posets_dilworth.html#para_posets_dilworth_proof-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "down sets up sets "
},
{
  "id": "fig_width7",
  "level": "2",
  "url": "s_posets_dilworth.html#fig_width7",
  "type": "Figure",
  "number": "6.21",
  "title": "",
  "body": " A Poset of Width 7   "
},
{
  "id": "para_posets_dilworth_proof-9",
  "level": "2",
  "url": "s_posets_dilworth.html#para_posets_dilworth_proof-9",
  "type": "Discussion",
  "number": "6.22",
  "title": "",
  "body": " The ever alert Alice notes that the proof given above for Dilworth's theorem does not seem to provide an efficient algorithm for finding the width of a poset, much less a partition of the poset into chains. Bob has yet to figure out why listing all the subsets of is a bad idea. Carlos is sitting quietly listening to their bickering, but finally, he says that a skilled programmer can devise an algorithm from the proof. Students are encouraged to discuss this dilemma but rest assured that we will return to this issue later in the text.  "
},
{
  "id": "s_posets_sorting",
  "level": "1",
  "url": "s_posets_sorting.html",
  "type": "Section",
  "number": "6.4",
  "title": "Linear Extensions of Partially Ordered Sets",
  "body": " Linear Extensions of Partially Ordered Sets  Let be a partially ordered set. A linear order on is called a linear extension linear extension (also, a topological sort ) of , if in whenever in . For example, the table displayed in shows that our familiar example has 11 linear extensions.   A poset and its linear extensions            Bob says that he is not convinced that every finite poset has a linear extension. Alice says that it is easy to show that they do. Is she right?  Carlos says that there are subtleties to this question when the ground set is infinite. You might want to do a web search on the name Szpilrajn and read about his contribution to this issue.   The classical sorting problem studied in all elementary computer science courses is to determine an unknown linear order of a set by asking a series of questions of the form: Is in ? All the well known sorting algorithms (bubble sort, merge sort, quick sort, ) proceed in this manner.  Here is an important special case: determine an unknown linear extension of a poset by asking a series of questions of the form: Is in ?   Given the poset shown in and the problem of determining an unknown linear extension of , how should Alice decide which question (of the form: Is in ?) to ask?  How would you like to be assigned to count the number of linear extensions of this poset? In general, how hard is it to determine the number of linear extensions of a poset? Could you (and your computer) do this count for a poset on points?   "
},
{
  "id": "s_posets_sorting-2",
  "level": "2",
  "url": "s_posets_sorting.html#s_posets_sorting-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "linear extension topological sort "
},
{
  "id": "fig_posets_lin-extn",
  "level": "2",
  "url": "s_posets_sorting.html#fig_posets_lin-extn",
  "type": "Figure",
  "number": "6.23",
  "title": "",
  "body": " A poset and its linear extensions          "
},
{
  "id": "s_posets_sorting-4",
  "level": "2",
  "url": "s_posets_sorting.html#s_posets_sorting-4",
  "type": "Discussion",
  "number": "6.24",
  "title": "",
  "body": " Bob says that he is not convinced that every finite poset has a linear extension. Alice says that it is easy to show that they do. Is she right?  Carlos says that there are subtleties to this question when the ground set is infinite. You might want to do a web search on the name Szpilrajn and read about his contribution to this issue.  "
},
{
  "id": "s_posets_sorting-7",
  "level": "2",
  "url": "s_posets_sorting.html#s_posets_sorting-7",
  "type": "Discussion",
  "number": "6.25",
  "title": "",
  "body": " Given the poset shown in and the problem of determining an unknown linear extension of , how should Alice decide which question (of the form: Is in ?) to ask?  How would you like to be assigned to count the number of linear extensions of this poset? In general, how hard is it to determine the number of linear extensions of a poset? Could you (and your computer) do this count for a poset on points?  "
},
{
  "id": "s_posets_subset-lattice",
  "level": "1",
  "url": "s_posets_subset-lattice.html",
  "type": "Section",
  "number": "6.5",
  "title": "The Subset Lattice",
  "body": " The Subset Lattice   When is a finite set, the family of all subsets of , partially ordered by inclusion, forms a subset lattice lattice subset lattice A lattice is a special type of poset. You do not have to concern yourself with the definition and can safely replace lattice with poset as you read this chapter. . We illustrate this in where we show the lattice of all subsets of . In this figure, note that we are representing sets by bit strings, and we have further abbreviated the notation by writing strings without commas and parentheses.   A Subset Lattice    For a positive integer , we let denote the subset lattice consisting of all subsets of ordered by inclusion. Some elementary properties of this poset are:  The height is and all maximal chains have exactly points.  The size of the poset is and the elements are partitioned into ranks (antichains) with for each .  The maximum size of a rank in the subset lattice occurs in the middle, if , then the largest binomial coefficient in the sequence is . Note that when is odd, there are two ranks of maximum size, but when is even, there is only one.      Sperner's Theorem  For the width of the subset lattice, we have the following classic result of Sperner.   Sperner's Theorem   For each , the width of the subset lattice is the maximum size of a rank, , .    The width of the poset is at least since the set of all -element subsets of is an antichain. We now show that the width of is at most .  Let be the width of and let be an antichain of size in this poset, , each is a subset of and if , then and .  For each , consider the set of all maximal chains which pass through . It is easy to see that if , then . This follows from the observation that to form such a maximum chain beginning with as an intermediate point, you delete the elements of one at a time to form the sets of the lower part of the chain. Also, to form the upper part of the chain, you add the elements not in one at a time.  Note further that if , then , for if there was a maximum chain belonging to both and , then it would imply that one of and is a subset of the other.  Altogether, there are exactly maximum chains in . This implies that . This implies that It follows that . Thus .     "
},
{
  "id": "s_posets_subset-lattice-2-1",
  "level": "2",
  "url": "s_posets_subset-lattice.html#s_posets_subset-lattice-2-1",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "subset lattice lattice "
},
{
  "id": "fig_4cube",
  "level": "2",
  "url": "s_posets_subset-lattice.html#fig_4cube",
  "type": "Figure",
  "number": "6.26",
  "title": "",
  "body": " A Subset Lattice   "
},
{
  "id": "thm_sperner",
  "level": "2",
  "url": "s_posets_subset-lattice.html#thm_sperner",
  "type": "Theorem",
  "number": "6.27",
  "title": "Sperner’s Theorem.",
  "body": " Sperner's Theorem   For each , the width of the subset lattice is the maximum size of a rank, , .    The width of the poset is at least since the set of all -element subsets of is an antichain. We now show that the width of is at most .  Let be the width of and let be an antichain of size in this poset, , each is a subset of and if , then and .  For each , consider the set of all maximal chains which pass through . It is easy to see that if , then . This follows from the observation that to form such a maximum chain beginning with as an intermediate point, you delete the elements of one at a time to form the sets of the lower part of the chain. Also, to form the upper part of the chain, you add the elements not in one at a time.  Note further that if , then , for if there was a maximum chain belonging to both and , then it would imply that one of and is a subset of the other.  Altogether, there are exactly maximum chains in . This implies that . This implies that It follows that . Thus .   "
},
{
  "id": "s_posets_intervalorder",
  "level": "1",
  "url": "s_posets_intervalorder.html",
  "type": "Section",
  "number": "6.6",
  "title": "Interval Orders",
  "body": " Interval Orders  When we discussed , we commented that the algorithmic aspects would be deferred until later in the text. But there is one important class of orders for which the full solution is easy to obtain.  A poset is called an interval order  interval order  if there exists a function assigning to each element a closed interval of the real line so that for all , , in if and only if in . We call an interval representation  interval representation  of , or just a representation for short. For brevity, whenever we say that is a representation of an interval order , we will use the alternate notation for the closed interval . Also, we let denote the length of the interval, , . Returning to the poset , the representation shown in shows that it is an interval order.   An interval order and its representation    Note that end points of intervals used in a representation need not be distinct. In fact, distinct points and from may satisfy . We even allow degenerate intervals, , those of the form . On the other hand, a representation is said to be distinguishing  interval representation  distinguishing  if all intervals are non-degenerate and all end points are distinct. It is relatively easy to see that every interval order has a distinguishing representation.  As we shall soon see, interval orders can be characterized succinctly in terms of forbidden subposets. Before stating this characterization, we need to introduce a bit more notation. By (for an integer), we mean the chain with points.     chain with points  More precisely, we take the ground set to be with in if and only if in . If and are posets with and disjoint, then     disjoint sum of posets  is the poset where the partial order is given by in if and only if (a) and in or (b) and in . Thus, consists of a chain with points and a chain with points and no comparabilities between them. In particular, can be viewed as a four-point poset with ground set and and as the only relations (other than those required to make the relation reflexive).   Fishburn's Theorem   Let be a poset. Then is an interval order if and only if it excludes .    We show only that an interval order cannot contain a subposet isomorphic to , deferring the proof in the other direction to the next section. Now suppose that is a poset, and the subposet determined by these four points is isomorphic to . We show that is not an interval order. Suppose to the contrary that is an interval representation of . Without loss of generality, we may assume that and in . Thus and in . Then and in so that , which is a contradiction.    "
},
{
  "id": "s_posets_intervalorder-3",
  "level": "2",
  "url": "s_posets_intervalorder.html#s_posets_intervalorder-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "interval order interval representation representation length "
},
{
  "id": "fig_6ptintorder",
  "level": "2",
  "url": "s_posets_intervalorder.html#fig_6ptintorder",
  "type": "Figure",
  "number": "6.28",
  "title": "",
  "body": " An interval order and its representation   "
},
{
  "id": "s_posets_intervalorder-5",
  "level": "2",
  "url": "s_posets_intervalorder.html#s_posets_intervalorder-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "distinguishing "
},
{
  "id": "thm_fishburn",
  "level": "2",
  "url": "s_posets_intervalorder.html#thm_fishburn",
  "type": "Theorem",
  "number": "6.29",
  "title": "Fishburn’s Theorem.",
  "body": " Fishburn's Theorem   Let be a poset. Then is an interval order if and only if it excludes .    We show only that an interval order cannot contain a subposet isomorphic to , deferring the proof in the other direction to the next section. Now suppose that is a poset, and the subposet determined by these four points is isomorphic to . We show that is not an interval order. Suppose to the contrary that is an interval representation of . Without loss of generality, we may assume that and in . Thus and in . Then and in so that , which is a contradiction.   "
},
{
  "id": "s_posets_intervalorder_findrep",
  "level": "1",
  "url": "s_posets_intervalorder_findrep.html",
  "type": "Section",
  "number": "6.7",
  "title": "Finding a Representation of an Interval Order",
  "body": " Finding a Representation of an Interval Order  In this section, we develop an algorithm for finding an interval representation of an interval order. In fact, this algorithm can be applied to any poset. Either it will find an interval representation or it will find a subposet isomorphic to . As a consequence, we establish the other half of .  When is an interval order and is a positive integer, there may be many different ways to represent using intervals with integer end points in . But there is certainly a least for which a representation can be found, and here we see that the representation is unique. The discussion will again make use of the notation for down sets and up sets that we introduced prior to the proof of . As a reminder, we repeat it here. For a poset and a subset , let there exists some with in . Also, let . When , say , we write and rather than and . Dually, for a subset , we define there exists some with in . As before, set . And when , we just write for in .  Let be a poset. We start our procedure by finding the following subsets of the ground set: . We then distinguish two cases. In the first case, there are distinct elements and for which and . In this case, we choose an element and an element . It follows that the four elements in form a subposet of which is isomorphic to .  Our second case is that either or for all . In this case, we will show that is an interval order. Now find the family: . In this case, it is easy to see that we will always have either or for all .  Let . In the exercises, we will provide (actually in doing your homework, you will provide) the details for backing up the following statement: , so for now we assume that this statement is valid. Label the sets in and respectively as , and , so that  We form an interval representation of by the following rule: For each , set , where and . It is not immediately clear that this rule is legal, , it might happen that applying the rule results in values of and for which . But again, as a result of the exercises, we will see that this never happens. This collection of exercises is summarized in the following theorem.    If is a poset excluding , then the following statements hold.   The number of down sets equals the number of up sets. That is, .    For each , if , then in .    For each , if and , then in if and only if in .    The integer is the least positive integer for which has an interval representation using integer end points from . This representation is unique.       Consider the poset shown in .   An interval order on 10 Points    Then with , , , , and . Also , , , , and . So To illustrate the situation where this process can be used to determine when a poset is not an interval order, consider again the poset shown in . Erase the line joining points and . For the resulting poset, you will then find that and . Therefore, the four points , , and form a copy of in this modified poset.     Suppose you run the algorithm for finding an interval representation and learn that the down sets and up sets are totally ordered by inclusion and that there are down sets (and thus up sets). If the poset has a point that is incomparable to every other point, what would the interval be that the algorithm assigns? Explain why this makes sense.      "
},
{
  "id": "thm_intord-minrep",
  "level": "2",
  "url": "s_posets_intervalorder_findrep.html#thm_intord-minrep",
  "type": "Theorem",
  "number": "6.30",
  "title": "",
  "body": "  If is a poset excluding , then the following statements hold.   The number of down sets equals the number of up sets. That is, .    For each , if , then in .    For each , if and , then in if and only if in .    The integer is the least positive integer for which has an interval representation using integer end points from . This representation is unique.      "
},
{
  "id": "fig_10ptintorder",
  "level": "2",
  "url": "s_posets_intervalorder_findrep.html#fig_10ptintorder",
  "type": "Figure",
  "number": "6.31",
  "title": "",
  "body": " An interval order on 10 Points   "
},
{
  "id": "rq-posets_intervalorder_findrep-loose-point",
  "level": "2",
  "url": "s_posets_intervalorder_findrep.html#rq-posets_intervalorder_findrep-loose-point",
  "type": "Reading Question",
  "number": "6.7.1",
  "title": "",
  "body": "  Suppose you run the algorithm for finding an interval representation and learn that the down sets and up sets are totally ordered by inclusion and that there are down sets (and thus up sets). If the poset has a point that is incomparable to every other point, what would the interval be that the algorithm assigns? Explain why this makes sense.    "
},
{
  "id": "s_posets_dilworth-intord",
  "level": "1",
  "url": "s_posets_dilworth-intord.html",
  "type": "Section",
  "number": "6.8",
  "title": "Dilworth’s Theorem for Interval Orders",
  "body": " Dilworth's Theorem for Interval Orders  As remarked previously, we do not yet have an efficient process for determining the width of a poset and a minimum partition into chains. For interval orders, there is indeed a simple way to find both. The explanation is just to establish a connection with coloring of interval graphs as discussed in .  Let be an interval order and let be intervals of the real line so that in if and only . Then let be the interval graph determined by this family of intervals. Note that if and are distinct elements of , then and are incomparable in if and only if is an edge in . In other words, is just the incomparability graph of .  Recall from that interval graphs are perfect, , for every interval graph . Furthermore, you can find an optimal coloring of an interval graph by applying first fit to the vertices in a linear order that respects left end points. Such a coloring concurrently determines a partition of into chains.  In fact, if you want to skip the part about interval representations, take any linear ordering of the elements as , so that whenever is a proper subset of . Then apply First Fit with respect to chains. For example, using the point interval order illustrated in , here is such a labeling:   Now apply the First Fit algorithm to the points of , in this order, to assign them to chains , . In other words, assign to chain . Thereafter if you have assigned points , to chains, then assign to chain where is the least positive integer for which is comparable to whenever and has already been assigned to . For example, this rule results in the following chains for the interval order shown in . In this case, it is easy to see that the chain partition is optimal since the width of is and is a -element antichain.  However, you should be very careful in applying First Fit to find optimal chain partitions of posets just as one must be leary of using First Fit to find optimal colorings of graphs.   The poset on the left side of is a height poset on points, and if the poset is partitioned into antichains by applying First Fit and considering the points in the order of their labels, then antichains will be used. Do you see how to extend this poset to force First Fit to use arbitrarily many antichains, while keeping the height of the poset at ?  On the right side, we show a poset of width . Now if this poset is partitioned into chains by applying First Fit and considering the points in the order of their labels, then chains will be used. Do you see how to extend this poset to force First Fit to use arbitrarily many chains while keeping the width of the poset at ?  Do you get a feeling for why the second problem is a bit harder than the first?    How First Fit Can Go Wrong    In general, there is always some linear order on the ground set of a poset for which First Fit will find an optimal partition into antichains. Also, there is a linear order (in general different from the first) on the ground set for which First Fit will find an optimal partition into chains. However, there is no advantage in searching for such orders, as the algorithms we develop for finding optimal antichain and chain partitions work quite well.     Start applying the First Fit algorithm for chain partitioning to the interval order shown below, ordering the intervals by left endpoint (and then right endpoint if you have a tie to break). Only apply the algorithm until you assign interval to a chain! What chain is interval assigned to? Why?   An interval order         Consider the interval order with representation shown below. Can you see how to visually inspect the interval representation to find its width without needing to apply the First Fit algorithm? If so, what is the width of this interval order and explain how you came up with this. If you're not able to see how to do this, briefly describe some things you've thought about and ask a question that might help get you unstuck.   An interval order        "
},
{
  "id": "s_posets_dilworth-intord-8",
  "level": "2",
  "url": "s_posets_dilworth-intord.html#s_posets_dilworth-intord-8",
  "type": "Example",
  "number": "6.32",
  "title": "",
  "body": " The poset on the left side of is a height poset on points, and if the poset is partitioned into antichains by applying First Fit and considering the points in the order of their labels, then antichains will be used. Do you see how to extend this poset to force First Fit to use arbitrarily many antichains, while keeping the height of the poset at ?  On the right side, we show a poset of width . Now if this poset is partitioned into chains by applying First Fit and considering the points in the order of their labels, then chains will be used. Do you see how to extend this poset to force First Fit to use arbitrarily many chains while keeping the width of the poset at ?  Do you get a feeling for why the second problem is a bit harder than the first?  "
},
{
  "id": "fig_FirstFit",
  "level": "2",
  "url": "s_posets_dilworth-intord.html#fig_FirstFit",
  "type": "Figure",
  "number": "6.33",
  "title": "",
  "body": " How First Fit Can Go Wrong   "
},
{
  "id": "rq-posets_dilworth-intord-partial",
  "level": "2",
  "url": "s_posets_dilworth-intord.html#rq-posets_dilworth-intord-partial",
  "type": "Reading Question",
  "number": "6.8.1",
  "title": "",
  "body": "  Start applying the First Fit algorithm for chain partitioning to the interval order shown below, ordering the intervals by left endpoint (and then right endpoint if you have a tie to break). Only apply the algorithm until you assign interval to a chain! What chain is interval assigned to? Why?   An interval order      "
},
{
  "id": "rq-posets_dilworth-intord-width",
  "level": "2",
  "url": "s_posets_dilworth-intord.html#rq-posets_dilworth-intord-width",
  "type": "Reading Question",
  "number": "6.8.2",
  "title": "",
  "body": "  Consider the interval order with representation shown below. Can you see how to visually inspect the interval representation to find its width without needing to apply the First Fit algorithm? If so, what is the width of this interval order and explain how you came up with this. If you're not able to see how to do this, briefly describe some things you've thought about and ask a question that might help get you unstuck.   An interval order      "
},
{
  "id": "s_posets_discussion",
  "level": "1",
  "url": "s_posets_discussion.html",
  "type": "Section",
  "number": "6.9",
  "title": "Discussion",
  "body": " Discussion  Over coffee, Bob said that he really liked this chapter. This material was full of cases of very concrete procedures for doing useful things. I like that. Yolanda offered a somewhat different perspective On the other hand, this last procedure only seems to work with interval orders and we still don't have a clue as to how to find the width of a poset in the general case. This might be very difficult like the graph coloring problems discussed in the last chapter. Dave weighed in with Somehow I think there's going to be a fairly efficient process that works for all posets. We may not have all the tools yet, but let's wait a bit.   Not much was said for a while and after a pause, Carlos ventured that there were probably a lot of combinatorial problems for posets that had analogous versions for graphs and in those cases, the poset version would be a bit more complicated, sometime a little bit and sometimes a very big bit. Zori was quiet but she was thinking. These poset structures might even be useful, as she could imagine many settings in which a linear order was impossible or impractical. Maybe there were ways here to earn a few dollars.  "
},
{
  "id": "s_posets_exercises",
  "level": "1",
  "url": "s_posets_exercises.html",
  "type": "Exercises",
  "number": "6.10",
  "title": "Exercises",
  "body": "   We say that a relation on a set is symmetric relation symmetric if implies for all . If , how many symmetric relations are there on ? How many of these are reflexive?      A relation on a set is an equivalence relation relation equivalence if is reflexive, symmetric, and transitive. Fix an integer . Show that the relation defined on the set of integers by ( ) if and only if is an equivalence relation. (Recall that means that when dividing by and by you get the same remainder.)      Is the binary relation a partial order on the set ? If so, discuss what properties you verified and how. If not, list the ordered pairs that must be added to to make it a partial order or say why it cannot be made a partial order by adding ordered pairs.      Draw the diagram of the poset where and in if and only if . (Recall that means that evenly divides without remainder. Equivalently , if and only if .)      Draw the diagram of the poset where and is the partial order on given by the is a subset of relationship.      A linear extension linear extension of a poset is a total order on such that if in , then in . Give linear extension of the three posets shown in . If you feel very ambitious, try to count the number of linear extensions of the poset on the left side of the figure. Don't list them. Just provide an integer as your answer.      Alice and Bob are considering posets and . They soon realize that is isomorphic to . After minutes of work, they figure out that has height and width . Bob doesn't want do find the height and width of , since he figures it will take (at least) another minutes to answer these questions for . Alice says Bob is crazy and that she already knows the height and width of . Who's right and why?      For this exercise, consider the poset in .  List the maximal elements of .  List the minimal elements of .  Find a maximal chain with two points in .  Find a chain in with three points that is not maximal. Say why your chain is not maximal.  Find a maximal antichain with four points in .        Find the height of the poset shown below as well as a maximum chain and a partition of into antichains using the algorithm from this chapter.         For each of the two distinct (up to isomorphism) posets in , find the width , an antichain of size , and a partition of the ground set into chains.      A restaurant chef has designed a new set of dishes for his menu. His set of dishes contains main courses, and he will select a subset of them to place on the menu each night. To ensure variety of main courses for his patrons, he wants to guarantee that a night's menu is neither completely contained in nor completely contains another night's menu. What is the largest number of menus he can plan using his main courses subject to this requirement?      Draw the diagram of the interval order represented in .   An interval representation        Draw the diagram of the interval order represented in .   An interval representation        Find an interval representation for the poset in or give a reason why one does not exist.   Is this poset an interval order?        Find an interval representation for the poset in or give a reason why one does not exist.   Is this poset an interval order?        Find an interval representation for the poset in or give a reason why one does not exist.   Is this poset an interval order?        Find an interval representation for the poset in or give a reason why one does not exist.   Is this poset an interval order?        Use the First Fit algorithm (ordering by left endpoints) to find the width of the interval order shown in and a partition into chains. Also give an antichain with points.   An interval representation        Complete the proof of .    The key idea is to show that if is the least positive integer for which an interval order has a representation using end points from , then every integer from this set must be both a left end point and a right end point of an interval.      Show that every poset is isomorphic to a poset of each of the four types illustrated in .    For each element , choose some unique identifying key which is an element\/prime\/coordinate\/observer. Then associate with a structure that identifies the keys of elements from .      The dimension dimension of a poset , denoted , is the least for which is the intersection of linear orders on .  Show that the dimension of a poset is the same as the dimension of its dual.  Show that is a subposet of , then .  Show that the removal of a point can reduce the dimension by at most .  Find the dimension of the posets in .  Use Dilworth's theorem to show that the dimension of a poset is at most its width.  Use the example on the left side of to show that for every , there exists a poset on points having width and dimension equal to .      "
},
{
  "id": "s_posets_exercises-1",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-1",
  "type": "Exercise",
  "number": "6.10.1",
  "title": "",
  "body": "  We say that a relation on a set is symmetric relation symmetric if implies for all . If , how many symmetric relations are there on ? How many of these are reflexive?   "
},
{
  "id": "s_posets_exercises-2",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-2",
  "type": "Exercise",
  "number": "6.10.2",
  "title": "",
  "body": "  A relation on a set is an equivalence relation relation equivalence if is reflexive, symmetric, and transitive. Fix an integer . Show that the relation defined on the set of integers by ( ) if and only if is an equivalence relation. (Recall that means that when dividing by and by you get the same remainder.)   "
},
{
  "id": "s_posets_exercises-3",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-3",
  "type": "Exercise",
  "number": "6.10.3",
  "title": "",
  "body": "  Is the binary relation a partial order on the set ? If so, discuss what properties you verified and how. If not, list the ordered pairs that must be added to to make it a partial order or say why it cannot be made a partial order by adding ordered pairs.   "
},
{
  "id": "exer_posets_division",
  "level": "2",
  "url": "s_posets_exercises.html#exer_posets_division",
  "type": "Exercise",
  "number": "6.10.4",
  "title": "",
  "body": "  Draw the diagram of the poset where and in if and only if . (Recall that means that evenly divides without remainder. Equivalently , if and only if .)   "
},
{
  "id": "s_posets_exercises-5",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-5",
  "type": "Exercise",
  "number": "6.10.5",
  "title": "",
  "body": "  Draw the diagram of the poset where and is the partial order on given by the is a subset of relationship.   "
},
{
  "id": "s_posets_exercises-6",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-6",
  "type": "Exercise",
  "number": "6.10.6",
  "title": "",
  "body": "  A linear extension linear extension of a poset is a total order on such that if in , then in . Give linear extension of the three posets shown in . If you feel very ambitious, try to count the number of linear extensions of the poset on the left side of the figure. Don't list them. Just provide an integer as your answer.   "
},
{
  "id": "s_posets_exercises-7",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-7",
  "type": "Exercise",
  "number": "6.10.7",
  "title": "",
  "body": "  Alice and Bob are considering posets and . They soon realize that is isomorphic to . After minutes of work, they figure out that has height and width . Bob doesn't want do find the height and width of , since he figures it will take (at least) another minutes to answer these questions for . Alice says Bob is crazy and that she already knows the height and width of . Who's right and why?   "
},
{
  "id": "s_posets_exercises-8",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-8",
  "type": "Exercise",
  "number": "6.10.8",
  "title": "",
  "body": "  For this exercise, consider the poset in .  List the maximal elements of .  List the minimal elements of .  Find a maximal chain with two points in .  Find a chain in with three points that is not maximal. Say why your chain is not maximal.  Find a maximal antichain with four points in .     "
},
{
  "id": "s_posets_exercises-9",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-9",
  "type": "Exercise",
  "number": "6.10.9",
  "title": "",
  "body": "  Find the height of the poset shown below as well as a maximum chain and a partition of into antichains using the algorithm from this chapter.      "
},
{
  "id": "s_posets_exercises-10",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-10",
  "type": "Exercise",
  "number": "6.10.10",
  "title": "",
  "body": "  For each of the two distinct (up to isomorphism) posets in , find the width , an antichain of size , and a partition of the ground set into chains.   "
},
{
  "id": "s_posets_exercises-11",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-11",
  "type": "Exercise",
  "number": "6.10.11",
  "title": "",
  "body": "  A restaurant chef has designed a new set of dishes for his menu. His set of dishes contains main courses, and he will select a subset of them to place on the menu each night. To ensure variety of main courses for his patrons, he wants to guarantee that a night's menu is neither completely contained in nor completely contains another night's menu. What is the largest number of menus he can plan using his main courses subject to this requirement?   "
},
{
  "id": "s_posets_exercises-12",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-12",
  "type": "Exercise",
  "number": "6.10.12",
  "title": "",
  "body": "  Draw the diagram of the interval order represented in .   An interval representation     "
},
{
  "id": "s_posets_exercises-13",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-13",
  "type": "Exercise",
  "number": "6.10.13",
  "title": "",
  "body": "  Draw the diagram of the interval order represented in .   An interval representation     "
},
{
  "id": "s_posets_exercises-14",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-14",
  "type": "Exercise",
  "number": "6.10.14",
  "title": "",
  "body": "  Find an interval representation for the poset in or give a reason why one does not exist.   Is this poset an interval order?     "
},
{
  "id": "s_posets_exercises-15",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-15",
  "type": "Exercise",
  "number": "6.10.15",
  "title": "",
  "body": "  Find an interval representation for the poset in or give a reason why one does not exist.   Is this poset an interval order?     "
},
{
  "id": "s_posets_exercises-16",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-16",
  "type": "Exercise",
  "number": "6.10.16",
  "title": "",
  "body": "  Find an interval representation for the poset in or give a reason why one does not exist.   Is this poset an interval order?     "
},
{
  "id": "s_posets_exercises-17",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-17",
  "type": "Exercise",
  "number": "6.10.17",
  "title": "",
  "body": "  Find an interval representation for the poset in or give a reason why one does not exist.   Is this poset an interval order?     "
},
{
  "id": "s_posets_exercises-18",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-18",
  "type": "Exercise",
  "number": "6.10.18",
  "title": "",
  "body": "  Use the First Fit algorithm (ordering by left endpoints) to find the width of the interval order shown in and a partition into chains. Also give an antichain with points.   An interval representation     "
},
{
  "id": "s_posets_exercises-19",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-19",
  "type": "Exercise",
  "number": "6.10.19",
  "title": "",
  "body": "  Complete the proof of .    The key idea is to show that if is the least positive integer for which an interval order has a representation using end points from , then every integer from this set must be both a left end point and a right end point of an interval.   "
},
{
  "id": "s_posets_exercises-20",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-20",
  "type": "Exercise",
  "number": "6.10.20",
  "title": "",
  "body": "  Show that every poset is isomorphic to a poset of each of the four types illustrated in .    For each element , choose some unique identifying key which is an element\/prime\/coordinate\/observer. Then associate with a structure that identifies the keys of elements from .   "
},
{
  "id": "s_posets_exercises-21",
  "level": "2",
  "url": "s_posets_exercises.html#s_posets_exercises-21",
  "type": "Exercise",
  "number": "6.10.21",
  "title": "",
  "body": "  The dimension dimension of a poset , denoted , is the least for which is the intersection of linear orders on .  Show that the dimension of a poset is the same as the dimension of its dual.  Show that is a subposet of , then .  Show that the removal of a point can reduce the dimension by at most .  Find the dimension of the posets in .  Use Dilworth's theorem to show that the dimension of a poset is at most its width.  Use the example on the left side of to show that for every , there exists a poset on points having width and dimension equal to .     "
},
{
  "id": "s_inclusion-exclusion_intro",
  "level": "1",
  "url": "s_inclusion-exclusion_intro.html",
  "type": "Section",
  "number": "7.1",
  "title": "Introduction",
  "body": " Introduction  We start this chapter with an elementary example.    Let be the set of students in an applied combinatorics course at a large technological university. Suppose there are computer science majors and male students. Also, we know there are male students majoring in computer science. How many students in the class are female students not majoring in computer science?    Although the Venn diagrams that you've probably seen drawn many times over the years aren't always the best illustrations (especially if you try to think with some sort of scale), let's use one to get started. In , we see how the groups in the scenario might overlap.   A Venn diagram for an applied combinatorics class      Now we can see that we're after the number of students in the white rectangle but outside the two shaded ovals, which is the female students not majoring in computer science. To compute this, we can start by subtracting the number of male students (the blue region) from the total number of students in the class and then subtracting the number of computer science majors (the yellow region). However, we've now subtracted the overlapping region (the male computer science majors) twice , so we must add that number back. Thus, the number of female students in the class who are not majoring in computer science is      Another type of problem where we can readily see how such a technique is applicable is a generalization of the problem of enumerating integer solutions of equations. In , we discussed how to count the number of solutions to an equation such as where , and . However, we steered clear of the situation where we add the further restriction that . The previous example suggests a way of approaching this modified problem.  First, let's set up the problem so that the lower bound on each variable is of the form . This leads us to the revised problem of enumerating the integer solutions to with , , and . (We'll then have and to get our desired solution.) To count the number of integer solutions to this equation with and , we must exclude any solution in which  or  . There are solutions with , and the number of solutions in which is . At this point, it might be tempting to just subtract and from , the total number of solutions with all variables nonnegative. However, care is required. If we did that, we would eliminate the solutions with both  and   twice . To account for this, we notice that there are solutions with both and . If we add this number back in after subtracting, we've ensured that the solutions with both and are not included in the total count and are not excluded more than once. Thus, the total number of solutions is    From these examples, you should start to see a pattern emerging that leads to a more general setting. In full generality, we will consider a set and a family of properties . We intend that for every and each , either satisfies or it does not. There is no ambiguity. Ultimately, we are interested in determining the number of elements of which satisfy none of the properties in . In , we could have made property  is a computer science major and property  is male . Then the number of students satisfying neither  nor would be the number of female students majoring in something other than computer science, exactly the number we were asked to determine. What would the properties and be for ?  Let's consider three examples of larger sets of properties. These properties will come back up during the remainder of the chapter as we apply inclusion-exclusion to some more involved situations. Recall that throughout this book, we use the notation for the set when is a positive integer.   Let and be fixed positive integers and let consist of all functions from to . Then for each , and each function , we say that satisfies if there is no so that . In other words, is not in the image or output of the function .  As a specific example, suppose that and . Then the function given by the table below satisfies but not or .        1  2  3  4  5       2  3  2  2  3       Let be a fixed positive integer and let consist of all bijections from to . Elements of are called permutations  permutation  function  . Then for each , and each permutation , we say that satisfies if .  For example, the permutation of given in by the table below satisfies and and no other .        1  2  3  4  5       2  4  3  1  5      Note that in the previous example, we could have said that satisfies property if . But remembering that our goal is to count the number of elements satisfying none of the properties, we would then be counting the number of permutations satisfying for each , and perhaps we don't need a lot of theory to accomplish this task the number is one, of course.   Let and be fixed positive integers and let . Then for each , and each , we say that satisfies if is a divisor of . Put another way, the positive integers that satisfy property are precisely those that are multiples of .  At first this may appear to be the most complicated of the sets of properties we've discussed thus far. However, being concrete should help clear up any confusion. Suppose that . Which properties does satisfy? The divisors of are , , , , , and , so satisfies , , , , , and . On the other end of the spectrum, notice that satisfies only properties and , since those are its only divisors.      Referring to the properties as described in , list the integers in that satisfy .      "
},
{
  "id": "exa_inclusion-exclusion_students",
  "level": "2",
  "url": "s_inclusion-exclusion_intro.html#exa_inclusion-exclusion_students",
  "type": "Example",
  "number": "7.1",
  "title": "",
  "body": "  Let be the set of students in an applied combinatorics course at a large technological university. Suppose there are computer science majors and male students. Also, we know there are male students majoring in computer science. How many students in the class are female students not majoring in computer science?    Although the Venn diagrams that you've probably seen drawn many times over the years aren't always the best illustrations (especially if you try to think with some sort of scale), let's use one to get started. In , we see how the groups in the scenario might overlap.   A Venn diagram for an applied combinatorics class      Now we can see that we're after the number of students in the white rectangle but outside the two shaded ovals, which is the female students not majoring in computer science. To compute this, we can start by subtracting the number of male students (the blue region) from the total number of students in the class and then subtracting the number of computer science majors (the yellow region). However, we've now subtracted the overlapping region (the male computer science majors) twice , so we must add that number back. Thus, the number of female students in the class who are not majoring in computer science is    "
},
{
  "id": "exa_inclusion-exclusion_int-solns",
  "level": "2",
  "url": "s_inclusion-exclusion_intro.html#exa_inclusion-exclusion_int-solns",
  "type": "Example",
  "number": "7.3",
  "title": "",
  "body": " Another type of problem where we can readily see how such a technique is applicable is a generalization of the problem of enumerating integer solutions of equations. In , we discussed how to count the number of solutions to an equation such as where , and . However, we steered clear of the situation where we add the further restriction that . The previous example suggests a way of approaching this modified problem.  First, let's set up the problem so that the lower bound on each variable is of the form . This leads us to the revised problem of enumerating the integer solutions to with , , and . (We'll then have and to get our desired solution.) To count the number of integer solutions to this equation with and , we must exclude any solution in which  or  . There are solutions with , and the number of solutions in which is . At this point, it might be tempting to just subtract and from , the total number of solutions with all variables nonnegative. However, care is required. If we did that, we would eliminate the solutions with both  and   twice . To account for this, we notice that there are solutions with both and . If we add this number back in after subtracting, we've ensured that the solutions with both and are not included in the total count and are not excluded more than once. Thus, the total number of solutions is   "
},
{
  "id": "s_inclusion-exclusion_intro-5",
  "level": "2",
  "url": "s_inclusion-exclusion_intro.html#s_inclusion-exclusion_intro-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "properties "
},
{
  "id": "exa_inclusion-exclusion_prop-inject",
  "level": "2",
  "url": "s_inclusion-exclusion_intro.html#exa_inclusion-exclusion_prop-inject",
  "type": "Example",
  "number": "7.4",
  "title": "",
  "body": " Let and be fixed positive integers and let consist of all functions from to . Then for each , and each function , we say that satisfies if there is no so that . In other words, is not in the image or output of the function .  As a specific example, suppose that and . Then the function given by the table below satisfies but not or .        1  2  3  4  5       2  3  2  2  3     "
},
{
  "id": "exa_inclusion-exclusion_prop-derange",
  "level": "2",
  "url": "s_inclusion-exclusion_intro.html#exa_inclusion-exclusion_prop-derange",
  "type": "Example",
  "number": "7.5",
  "title": "",
  "body": " Let be a fixed positive integer and let consist of all bijections from to . Elements of are called permutations  permutation  function  . Then for each , and each permutation , we say that satisfies if .  For example, the permutation of given in by the table below satisfies and and no other .        1  2  3  4  5       2  4  3  1  5     "
},
{
  "id": "exa_inclusion-exclusion_prop-divis",
  "level": "2",
  "url": "s_inclusion-exclusion_intro.html#exa_inclusion-exclusion_prop-divis",
  "type": "Example",
  "number": "7.6",
  "title": "",
  "body": " Let and be fixed positive integers and let . Then for each , and each , we say that satisfies if is a divisor of . Put another way, the positive integers that satisfy property are precisely those that are multiples of .  At first this may appear to be the most complicated of the sets of properties we've discussed thus far. However, being concrete should help clear up any confusion. Suppose that . Which properties does satisfy? The divisors of are , , , , , and , so satisfies , , , , , and . On the other end of the spectrum, notice that satisfies only properties and , since those are its only divisors.  "
},
{
  "id": "inclusion-exclusion_intro-rq-divisor",
  "level": "2",
  "url": "s_inclusion-exclusion_intro.html#inclusion-exclusion_intro-rq-divisor",
  "type": "Reading Question",
  "number": "7.1.1",
  "title": "",
  "body": "  Referring to the properties as described in , list the integers in that satisfy .    "
},
{
  "id": "s_inclusion-exclusion_statement",
  "level": "1",
  "url": "s_inclusion-exclusion_statement.html",
  "type": "Section",
  "number": "7.2",
  "title": "The Inclusion-Exclusion Formula",
  "body": " The Inclusion-Exclusion Formula  Now that we have an understanding of what we mean by a property, let's see how we can use this concept to generalize the process we used in the first two examples of the previous section.  Let be a set and let be a family of properties. Then for each subset , let denote the number of elements of which satisfy property for all . Note that if , then , as every element of satisfies every property in (which contains no actual properties).  Returning for a moment to with being is a computer science major and being is male, we note that , since there are computer science majors in the class. Also, since of the students are male. Finally, since there are male computer science majors in the class.  In the examples of the previous section, we subtracted off for the sets of size and then added back for the set of properties of size , since we'd subtracted the number of things with both properties (male computer science majors or solutions with both and ) twice. Symbolically, we determined that the number of objects satisfying none of the properties was   Suppose that we had three properties , and . How would we count the number of objects satisfying none of the properties? As before, we start by subtracting for each of , , and . Now we have removed the objects satisfying both and twice, so we must add back . similarly, we must do this for the objects satisfying both and and both and . Now let's think about the objects satisfying all three properties. They're counted in , eliminated three times by the terms, and added back three times by the terms. Thus, they're still being counted! Thus, we must yet subtract to get the desired number: We can generalize this as the following theorem:   Principle of Inclusion-Exclusion   principle of inclusion-exclusion    The number of elements of which satisfy none of the properties in is given by     We proceed by induction on the number of properties. If , then the formula reduces to . This is correct since it says just that the number of elements which do not satisfy property is the total number of elements minus the number which do satisfy property .  Now assume validity when for some and consider the case where . Let satisfies and ( , is the set of elements that do not satisfy ). Also, let . Then for each subset , let count the number of elements of satisfying property for all . Also, let count the number of elements of satisfying property for each . Note that for every .  Let denote the set of elements in which satisfy none of the properties in (in other words, those that satisfy only from ), and let denote the set of elements of which satisfy none of the properties in , and therefore none of the properties in .  Now by the inductive hypothesis, we know It follows that     "
},
{
  "id": "thm_inclusion-exclusion",
  "level": "2",
  "url": "s_inclusion-exclusion_statement.html#thm_inclusion-exclusion",
  "type": "Theorem",
  "number": "7.7",
  "title": "Principle of Inclusion-Exclusion.",
  "body": " Principle of Inclusion-Exclusion   principle of inclusion-exclusion    The number of elements of which satisfy none of the properties in is given by     We proceed by induction on the number of properties. If , then the formula reduces to . This is correct since it says just that the number of elements which do not satisfy property is the total number of elements minus the number which do satisfy property .  Now assume validity when for some and consider the case where . Let satisfies and ( , is the set of elements that do not satisfy ). Also, let . Then for each subset , let count the number of elements of satisfying property for all . Also, let count the number of elements of satisfying property for each . Note that for every .  Let denote the set of elements in which satisfy none of the properties in (in other words, those that satisfy only from ), and let denote the set of elements of which satisfy none of the properties in , and therefore none of the properties in .  Now by the inductive hypothesis, we know It follows that    "
},
{
  "id": "s_inclusion-exclusion_surjections",
  "level": "1",
  "url": "s_inclusion-exclusion_surjections.html",
  "type": "Section",
  "number": "7.3",
  "title": "Enumerating Surjections",
  "body": " Enumerating Surjections  As our first example of the power of inclusion-exclusion, consider the following situation: A grandfather has distinct lottery tickets and wants to distribute them to his four grandchildren so that each child gets at least one ticket. In how many ways can he make such a distribution? At first, this looks a lot like the problem of enumerating integer solutions of equations, except here the lottery tickets are not identical! A ticket bearing the numbers , , , , , and will almost surely not pay out the same amount as one with the numbers , , , , , and , so who gets which ticket really makes a difference. Hopefully, you have already recognized that the fact that we're dealing with lottery tickets and grandchildren isn't so important here. Rather, the important fact is that we want to distribute distinguishable objects to distinct entities, which calls for counting functions from one set (lottery tickets) to another (grandchildren). In our example, we don't simply want the total number of functions, but instead we want the number of surjections, so that we can ensure that every grandchild gets a ticket.  For positive integers and , let denote the number of surjections from to . Note that when . In this section, we apply the Inclusion-Exclusion formula to determine a formula for . We start by setting to be the set of all functions from to . Then for each and each , we say that satisfies property if is not in the image of .    For each subset , depends only on . In fact, if , then     Let . Then a function satisfying property for each is a string of length from an alphabet consisting of letters. This shows that     Now the following result follows immediately from this lemma by applying the , as there are  -element subsets of .    The number of surjections from to is given by:     For example,   Returning to our lottery ticket distribution problem at the start of the section, we see that there are ways for the grandfather to distribute his lottery tickets so that each of the grandchildren receives at least one ticket.  "
},
{
  "id": "s_inclusion-exclusion_surjections-4",
  "level": "2",
  "url": "s_inclusion-exclusion_surjections.html#s_inclusion-exclusion_surjections-4",
  "type": "Lemma",
  "number": "7.8",
  "title": "",
  "body": "  For each subset , depends only on . In fact, if , then     Let . Then a function satisfying property for each is a string of length from an alphabet consisting of letters. This shows that    "
},
{
  "id": "s_inclusion-exclusion_surjections-6",
  "level": "2",
  "url": "s_inclusion-exclusion_surjections.html#s_inclusion-exclusion_surjections-6",
  "type": "Theorem",
  "number": "7.9",
  "title": "",
  "body": "  The number of surjections from to is given by:    "
},
{
  "id": "s_inclusion-exclusion_derangements",
  "level": "1",
  "url": "s_inclusion-exclusion_derangements.html",
  "type": "Section",
  "number": "7.4",
  "title": "Derangements",
  "body": " Derangements  Now let's consider a situation where we can make use of the properties defined in . Fix a positive integer and let denote the set of all permutations on . A permutation is called a derangement derangement if for all . For example, the permutation given below is a derangement, while is not.      1  2  3  4     2  4  1  3       1  2  3  4     2  4  3  1     If we again let be the property that , then the derangements are precisely those permutations which do not satisfy for any .    For each subset , depends only on . In fact, if , then     For each , the value is fixed. The other values of are a permutation among the remaining positions, and there are of these.    As before, the principal result of this section follows immediately from the lemma and the .    For each positive integer , the number of derangements of satisfies     For example,   It has been traditional to cast the subject of derangements as a story, called the Hat Check problem hat check problem . The story belongs to the period of time when men wore top hats. For a fancy ball, men check their top hats with the Hat Check person before entering the ballroom floor. Later in the evening, the mischievous hat check person decides to return hats at random. What is the probability that all men receive a hat other than their own? It turns out that the answer is very close to , as the following result shows.    For a positive integer , let denote the number of derangements of . Then Equivalently, the fraction of all permutations of that are derangements approaches as increases.    It is easy to see that Recall from Calculus that the Taylor series expansion of is given by and thus the result then follows by substituting .    Usually we're not as interested in itself as we are in enumerating permutations with certain restrictions, as the following example illustrates.   Consider the Hat Check problem, but suppose instead of wanting no man to leave with his own hat, we are interested in the number of ways to distribute the hats so that precisely of the men leave with their own hats.  If men leave with their own hats, then there are men who do not receive their own hats. There are ways to choose the men who will not receive their own hats and ways to distribute those hats so that no man receives his own. There's only one way to distribute the hats to the men who must receive their own hats, meaning that there are such ways to return the hats.   "
},
{
  "id": "s_inclusion-exclusion_derangements-2",
  "level": "2",
  "url": "s_inclusion-exclusion_derangements.html#s_inclusion-exclusion_derangements-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "derangement "
},
{
  "id": "s_inclusion-exclusion_derangements-5",
  "level": "2",
  "url": "s_inclusion-exclusion_derangements.html#s_inclusion-exclusion_derangements-5",
  "type": "Lemma",
  "number": "7.10",
  "title": "",
  "body": "  For each subset , depends only on . In fact, if , then     For each , the value is fixed. The other values of are a permutation among the remaining positions, and there are of these.   "
},
{
  "id": "s_inclusion-exclusion_derangements-7",
  "level": "2",
  "url": "s_inclusion-exclusion_derangements.html#s_inclusion-exclusion_derangements-7",
  "type": "Theorem",
  "number": "7.11",
  "title": "",
  "body": "  For each positive integer , the number of derangements of satisfies    "
},
{
  "id": "s_inclusion-exclusion_derangements-10",
  "level": "2",
  "url": "s_inclusion-exclusion_derangements.html#s_inclusion-exclusion_derangements-10",
  "type": "Theorem",
  "number": "7.12",
  "title": "",
  "body": "  For a positive integer , let denote the number of derangements of . Then Equivalently, the fraction of all permutations of that are derangements approaches as increases.    It is easy to see that Recall from Calculus that the Taylor series expansion of is given by and thus the result then follows by substituting .   "
},
{
  "id": "s_inclusion-exclusion_derangements-12",
  "level": "2",
  "url": "s_inclusion-exclusion_derangements.html#s_inclusion-exclusion_derangements-12",
  "type": "Example",
  "number": "7.13",
  "title": "",
  "body": " Consider the Hat Check problem, but suppose instead of wanting no man to leave with his own hat, we are interested in the number of ways to distribute the hats so that precisely of the men leave with their own hats.  If men leave with their own hats, then there are men who do not receive their own hats. There are ways to choose the men who will not receive their own hats and ways to distribute those hats so that no man receives his own. There's only one way to distribute the hats to the men who must receive their own hats, meaning that there are such ways to return the hats.  "
},
{
  "id": "s_inclusion-exclusion_euler-phi",
  "level": "1",
  "url": "s_inclusion-exclusion_euler-phi.html",
  "type": "Section",
  "number": "7.5",
  "title": "The Euler <span class=\"process-math\">\\(\\phi\\)<\/span> Function",
  "body": " The Euler Function  The Euler phi-Function  greatest common divisor Euler function  After reading the two previous sections, you're probably wondering why we stated the in such an abstract way, as in those examples depended only on the size of and not its contents. In this section, we produce an important example where the value of  does depend on . Nevertheless, we are able to make a reduction to obtain a useful end result. In what follows, let denote the set of positive integers.  For a positive integer , let This function is usually called the Euler function or the Euler totient function  Euler function and has many connections to number theory. We won't focus on the number-theoretic aspects here, only being able to compute efficiently for any . Euler function   For example, since the only numbers from that are relatively prime to are , , and . As a second example, since , , , , and are relatively prime to . On the other hand, when is a prime. Suppose you were asked to compute . How would you proceed?  In we discussed a recursive procedure for determining the greatest common divisor of two integers, and we wrote code for accomplishing this task. Let's assume that we have a function gcd(m,n) that returns the greatest common divisor of the integers m and n . (Conveniently enough, SageMath comes such a function built in.) Then we can calculate with this code snippet:   Running the code above answers almost immediately that . (As usual, in the web version of the text, you can change the value 321974 to calculate the value of for other integers. However, if you try to increase the value of n to be too large, you may run into memory issues imposed by the Sage Cell Server used by the text. For instance, attempting to calculate results in an error at the time of writing. (You may have better luck running the code directly in the CoCalc or a local installation of SageMath.)  Given these difficulties, how could we find ?  Clearly, the program is useless to tackle this beast! It not only iterates times but also invokes a recursion during each iteration. Fortunately, Inclusion-Exclusion comes to the rescue.    Let be a positive integer and suppose that has distinct prime factors: , . Then     Our proof of requires the following elementary proposition whose proof we leave as an exercise.    Let , , and let be distinct primes each of which divide evenly (without remainder). Then the number of integers from which are divisible by each of these primes is      We present the argument when . The full result is an easy extension.  In light of , the Principle of Inclusion-Exclusion yields:     SageMath reports that is the factorization of into primes. It follows that Thus SageMath quickly reports that     Amanda and Bruce receive the same challenge from their professor, namely to find when However the Professor also tells Amanda that is the product of two large primes where Is this information of any special value to Amanda? Does it really make her job any easier than Bruce's? Would it level the playing field if the professor told Bruce that was the product of two primes?   "
},
{
  "id": "s_inclusion-exclusion_euler-phi-5",
  "level": "2",
  "url": "s_inclusion-exclusion_euler-phi.html#s_inclusion-exclusion_euler-phi-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Euler function Euler totient function "
},
{
  "id": "thm_eulerphi",
  "level": "2",
  "url": "s_inclusion-exclusion_euler-phi.html#thm_eulerphi",
  "type": "Theorem",
  "number": "7.14",
  "title": "",
  "body": "  Let be a positive integer and suppose that has distinct prime factors: , . Then    "
},
{
  "id": "prop_num-divisible",
  "level": "2",
  "url": "s_inclusion-exclusion_euler-phi.html#prop_num-divisible",
  "type": "Proposition",
  "number": "7.15",
  "title": "",
  "body": "  Let , , and let be distinct primes each of which divide evenly (without remainder). Then the number of integers from which are divisible by each of these primes is    "
},
{
  "id": "s_inclusion-exclusion_euler-phi-15",
  "level": "2",
  "url": "s_inclusion-exclusion_euler-phi.html#s_inclusion-exclusion_euler-phi-15",
  "type": "Proof",
  "number": "7.5.1",
  "title": "",
  "body": " We present the argument when . The full result is an easy extension.  In light of , the Principle of Inclusion-Exclusion yields:   "
},
{
  "id": "s_inclusion-exclusion_euler-phi-16",
  "level": "2",
  "url": "s_inclusion-exclusion_euler-phi.html#s_inclusion-exclusion_euler-phi-16",
  "type": "Example",
  "number": "7.16",
  "title": "",
  "body": " SageMath reports that is the factorization of into primes. It follows that Thus SageMath quickly reports that   "
},
{
  "id": "s_inclusion-exclusion_euler-phi-17",
  "level": "2",
  "url": "s_inclusion-exclusion_euler-phi.html#s_inclusion-exclusion_euler-phi-17",
  "type": "Example",
  "number": "7.17",
  "title": "",
  "body": " Amanda and Bruce receive the same challenge from their professor, namely to find when However the Professor also tells Amanda that is the product of two large primes where Is this information of any special value to Amanda? Does it really make her job any easier than Bruce's? Would it level the playing field if the professor told Bruce that was the product of two primes?  "
},
{
  "id": "s_inclusion-exclusion_discussion",
  "level": "1",
  "url": "s_inclusion-exclusion_discussion.html",
  "type": "Section",
  "number": "7.6",
  "title": "Discussion",
  "body": " Discussion  Yolanda said This seemed like a very short chapter, at least it did to me. Bob agreed Yes, but the professor indicated that the goal was just provide some key examples. I think he was hinting at more general notions of inversion although I haven't a clue as to what they might be.   Clearly aggravated, Zori said I've had all I can stand of this big integer stuff. This won't help me to earn a living. Xing now was uncharacteristically firm in his reply Zori. You're off base on this issue. Large integers, and specifically integers which are the product of large primes, are central to public key cryptography. If you, or any other citizen, were highly skilled in large integer arithmetic and could quickly factor integers with, say digits, then you would be able to unravel many important secrets. No doubt your life would be in danger.   At first, the group thought that Xing was way out of bounds but they quickly realized that Xing felt absolutely certain of what he was saying. Zori was quiet for the moment, just reflecting that maybe, just maybe, her skepticism over the relevance of the material in applied combinatorics was unjustified.  "
},
{
  "id": "s_inclusion-exclusion_exercises",
  "level": "1",
  "url": "s_inclusion-exclusion_exercises.html",
  "type": "Exercises",
  "number": "7.7",
  "title": "Exercises",
  "body": "   A school has third graders. The third grade teachers have planned a special treat for the last day of school and brought ice cream for their students. There are three flavors: mint chip, chocolate, and strawberry. Suppose that students like (at least) mint chip, like chocolate, like strawberry, like mint chip and strawberry, like mint chip and chocolate, like chocolate and strawberry, and like all three flavors. How many students don't like any of the flavors available?      There are students majoring in computer science at a particular university. They are surveyed about their knowledge of three programming languages: C++, Java, and Python. The survey results reflect that students know C++, know Java, and know Python. Additionally, students know both C++ and Java, know both C++ and Python, and know both Java and Python. There are students who report knowing all three languages. How many students reported that they did not know any of the three programming languages?      How many positive integers less than or equal to are divisible by ? How many positive integers less than or equal to are divisible by ? Use this information to determine how many positive integers less than or equal to are divisible by neither  nor .      How many positive integers less than or equal to are divisible by none of , , and ?      How many positive integers less than or equal to are divisible by none of , , and ?      The State of Georgia is distributing $ million in funding to Fulton, Gwinnett, DeKalb, Cobb, and Clayton counties (in millions of dollars). In how many ways can this distribution be made, assuming that each county receives at least $ million, Clayton county receives at most $ million, and Cobb county receives at most $ million? What if we add the restriction that Fulton county is to receive at least $ million (instead of at least $ million)?      How many integer solutions are there to the equation with for ?      How many integer solutions are there to the inequality with , , , and ?      A graduate student eats lunch in the campus food court every Tuesday over the course of a -week semester. He is joined each week by some subset of a group of six friends from across campus. Over the course of a semester, he ate lunch with each friend times, each pair times, and each triple times. He ate lunch with each group of four friends times and each group of five friends times. All seven of them ate lunch together only once that semester. Did the graduate student ever eat lunch alone? If so, how many times?      A group of students are surveyed about their ability to speak Mandarin, Korean, and Japanese. There are students who do not speak any of the three languages surveyed. Mandarin is spoken by of the students, Japanese is spoken by of the students, and Korean is spoken by of the students. The survey results also reflect that students speak both Mandarin and Japanese, students speak both Mandarin and Korean, and students speak both Japanese and Korean. How many students speak all three languages?      As in , let be the set of functions from to and let a function satisfy property if there is no such that .  Let the function be defined by . Does satisfy property ? Why or why not? What about property ? List all the properties (with ) satisfied by .  Is it possible to define a function that satisfies no property , ? If so, give an example. If not, explain why not.  Is it possible to define a function that satisfies no property , ? If so, give an example. If not, explain why not.     A function defined by a table   1 2 3 4 5 6 7 8  4 2 6 1 6 2 4 2        As in , let be the set of permutations of and say that satisfies property if .  Let the permutation be defined by . Does satisfy property ? Why or why not? What about property ? List all the properties (with ) satisfied by .  Give an example of a permutation that satisfies properties , , and and no other properties with .  Give an example of a permutation that does not satisfy any property with .     A permutation defined by a table   1 2 3 4 5 6 7 8  3 1 8 4 7 6 5 2        As in , let and be positive integers and . Say that satisfies property for an with if is a divisor of .  Let . Does satisfy property ? Why or why not? What about property ? List the properties with that satisfies.  Give an example of an integer with that satisfies exactly two properties with .  Give an example of an integer with that satisfies exactly four properties with or explain why such an integer does not exist.  Give an example of an integer with that satisfies exactly three properties with or explain why such an integer does not exist.        How many surjections are there from an eight-element set to a six-element set?      A teacher has books (all different) that she wants to distribute to John, Paul, Ringo, and George, ensuring that each of them gets at least one book. In how many ways can she do this?      A supervisor has nine tasks that must be completed and five employees to whom she may assign them. If she wishes to ensure that each employee is assigned at least one task to perform, how many ways are there to assign the tasks to the employees?      A professor is working with six undergraduate research students. He has topics that he would like these students to begin investigating. Since he has been working with Katie for several terms, he wants to ensure that she is given the most challenging topic (and possibly others). Each topic must be assigned to a single student. Subject to this, in how many ways can he assign the topics to his students if each student must be assigned at least one topic?      List all the derangements of . (For brevity, you may write a permutation as a string .)      How many derangements of a nine-element set are there?      A soccer team's equipment manager is in a hurry to distribute uniforms to the last six players to show up before a match. Instead of ensuring that each player receives his own uniform, he simply hands a uniform to each of the six players. In how many ways could he hand out the uniforms so that no player receives his own uniform? (Assume that the six remaining uniforms belong to the last six players to arrive.)      A careless payroll clerk is placing employees' paychecks into envelopes that have been pre-labeled. The envelopes are sealed before the clerk realizes he didn't match the names on the paychecks with the names on the envelopes. If there are seven employees, in how many ways could he have placed the paychecks into the envelopes so that exactly three employees receive the correct paycheck?      The principle of inclusion-exclusion is not the only approach available for counting derangements. We know that and . Using this initial information, it is possible to give a recursive form for . In this exercise, we consider two recursions for .  Give a combinatorial argument to prove that the number of derangements satisfies the recursive formula for .  Prove that the number of derangements also satisfies the recursive formula for .        For a derangement , consider the integer with . Argue based on the number of choices for and then whether or not.  You may find it easiest to prove this using the other recursive formula and mathematical induction.         Determine by listing the integers it counts as well as by using the formula of .      Compute .      Given that , compute       Prove .      At a very small school, there is a class with nine students in it. The students, whom we will denote as , , , , , , , , and , walk from their classroom to the lunchroom in the order . (Let's say that is at the front of the line.) On the way back to their classroom after lunch, they would like to walk in an order so that no student walks immediately behind the same classmate he or she was behind on the way to lunch. (For instance, and would meet their criteria. However, they would not be happy with since it contains and , so is following again and is following again.)  One student ponders how many possible ways there would be for them to line up meeting this criterion. Help him out by determining the exact value of this number.  Is this number bigger than, smaller than, or equal to the number of ways they could return so that no student walks in the same position as before ( , is not first, is not second, , and is not last)?  What fraction (give it as a decimal) of the total number of ways they could line up meet their criterion of no student following immediately behind the same student on the return trip?      "
},
{
  "id": "s_inclusion-exclusion_exercises-1",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-1",
  "type": "Exercise",
  "number": "7.7.1",
  "title": "",
  "body": "  A school has third graders. The third grade teachers have planned a special treat for the last day of school and brought ice cream for their students. There are three flavors: mint chip, chocolate, and strawberry. Suppose that students like (at least) mint chip, like chocolate, like strawberry, like mint chip and strawberry, like mint chip and chocolate, like chocolate and strawberry, and like all three flavors. How many students don't like any of the flavors available?   "
},
{
  "id": "s_inclusion-exclusion_exercises-2",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-2",
  "type": "Exercise",
  "number": "7.7.2",
  "title": "",
  "body": "  There are students majoring in computer science at a particular university. They are surveyed about their knowledge of three programming languages: C++, Java, and Python. The survey results reflect that students know C++, know Java, and know Python. Additionally, students know both C++ and Java, know both C++ and Python, and know both Java and Python. There are students who report knowing all three languages. How many students reported that they did not know any of the three programming languages?   "
},
{
  "id": "s_inclusion-exclusion_exercises-3",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-3",
  "type": "Exercise",
  "number": "7.7.3",
  "title": "",
  "body": "  How many positive integers less than or equal to are divisible by ? How many positive integers less than or equal to are divisible by ? Use this information to determine how many positive integers less than or equal to are divisible by neither  nor .   "
},
{
  "id": "s_inclusion-exclusion_exercises-4",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-4",
  "type": "Exercise",
  "number": "7.7.4",
  "title": "",
  "body": "  How many positive integers less than or equal to are divisible by none of , , and ?   "
},
{
  "id": "s_inclusion-exclusion_exercises-5",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-5",
  "type": "Exercise",
  "number": "7.7.5",
  "title": "",
  "body": "  How many positive integers less than or equal to are divisible by none of , , and ?   "
},
{
  "id": "s_inclusion-exclusion_exercises-6",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-6",
  "type": "Exercise",
  "number": "7.7.6",
  "title": "",
  "body": "  The State of Georgia is distributing $ million in funding to Fulton, Gwinnett, DeKalb, Cobb, and Clayton counties (in millions of dollars). In how many ways can this distribution be made, assuming that each county receives at least $ million, Clayton county receives at most $ million, and Cobb county receives at most $ million? What if we add the restriction that Fulton county is to receive at least $ million (instead of at least $ million)?   "
},
{
  "id": "s_inclusion-exclusion_exercises-7",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-7",
  "type": "Exercise",
  "number": "7.7.7",
  "title": "",
  "body": "  How many integer solutions are there to the equation with for ?   "
},
{
  "id": "s_inclusion-exclusion_exercises-8",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-8",
  "type": "Exercise",
  "number": "7.7.8",
  "title": "",
  "body": "  How many integer solutions are there to the inequality with , , , and ?   "
},
{
  "id": "s_inclusion-exclusion_exercises-9",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-9",
  "type": "Exercise",
  "number": "7.7.9",
  "title": "",
  "body": "  A graduate student eats lunch in the campus food court every Tuesday over the course of a -week semester. He is joined each week by some subset of a group of six friends from across campus. Over the course of a semester, he ate lunch with each friend times, each pair times, and each triple times. He ate lunch with each group of four friends times and each group of five friends times. All seven of them ate lunch together only once that semester. Did the graduate student ever eat lunch alone? If so, how many times?   "
},
{
  "id": "s_inclusion-exclusion_exercises-10",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-10",
  "type": "Exercise",
  "number": "7.7.10",
  "title": "",
  "body": "  A group of students are surveyed about their ability to speak Mandarin, Korean, and Japanese. There are students who do not speak any of the three languages surveyed. Mandarin is spoken by of the students, Japanese is spoken by of the students, and Korean is spoken by of the students. The survey results also reflect that students speak both Mandarin and Japanese, students speak both Mandarin and Korean, and students speak both Japanese and Korean. How many students speak all three languages?   "
},
{
  "id": "s_inclusion-exclusion_exercises-11",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-11",
  "type": "Exercise",
  "number": "7.7.11",
  "title": "",
  "body": "  As in , let be the set of functions from to and let a function satisfy property if there is no such that .  Let the function be defined by . Does satisfy property ? Why or why not? What about property ? List all the properties (with ) satisfied by .  Is it possible to define a function that satisfies no property , ? If so, give an example. If not, explain why not.  Is it possible to define a function that satisfies no property , ? If so, give an example. If not, explain why not.     A function defined by a table   1 2 3 4 5 6 7 8  4 2 6 1 6 2 4 2     "
},
{
  "id": "s_inclusion-exclusion_exercises-12",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-12",
  "type": "Exercise",
  "number": "7.7.12",
  "title": "",
  "body": "  As in , let be the set of permutations of and say that satisfies property if .  Let the permutation be defined by . Does satisfy property ? Why or why not? What about property ? List all the properties (with ) satisfied by .  Give an example of a permutation that satisfies properties , , and and no other properties with .  Give an example of a permutation that does not satisfy any property with .     A permutation defined by a table   1 2 3 4 5 6 7 8  3 1 8 4 7 6 5 2     "
},
{
  "id": "s_inclusion-exclusion_exercises-13",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-13",
  "type": "Exercise",
  "number": "7.7.13",
  "title": "",
  "body": "  As in , let and be positive integers and . Say that satisfies property for an with if is a divisor of .  Let . Does satisfy property ? Why or why not? What about property ? List the properties with that satisfies.  Give an example of an integer with that satisfies exactly two properties with .  Give an example of an integer with that satisfies exactly four properties with or explain why such an integer does not exist.  Give an example of an integer with that satisfies exactly three properties with or explain why such an integer does not exist.     "
},
{
  "id": "s_inclusion-exclusion_exercises-14",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-14",
  "type": "Exercise",
  "number": "7.7.14",
  "title": "",
  "body": "  How many surjections are there from an eight-element set to a six-element set?   "
},
{
  "id": "s_inclusion-exclusion_exercises-15",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-15",
  "type": "Exercise",
  "number": "7.7.15",
  "title": "",
  "body": "  A teacher has books (all different) that she wants to distribute to John, Paul, Ringo, and George, ensuring that each of them gets at least one book. In how many ways can she do this?   "
},
{
  "id": "s_inclusion-exclusion_exercises-16",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-16",
  "type": "Exercise",
  "number": "7.7.16",
  "title": "",
  "body": "  A supervisor has nine tasks that must be completed and five employees to whom she may assign them. If she wishes to ensure that each employee is assigned at least one task to perform, how many ways are there to assign the tasks to the employees?   "
},
{
  "id": "s_inclusion-exclusion_exercises-17",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-17",
  "type": "Exercise",
  "number": "7.7.17",
  "title": "",
  "body": "  A professor is working with six undergraduate research students. He has topics that he would like these students to begin investigating. Since he has been working with Katie for several terms, he wants to ensure that she is given the most challenging topic (and possibly others). Each topic must be assigned to a single student. Subject to this, in how many ways can he assign the topics to his students if each student must be assigned at least one topic?   "
},
{
  "id": "s_inclusion-exclusion_exercises-18",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-18",
  "type": "Exercise",
  "number": "7.7.18",
  "title": "",
  "body": "  List all the derangements of . (For brevity, you may write a permutation as a string .)   "
},
{
  "id": "s_inclusion-exclusion_exercises-19",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-19",
  "type": "Exercise",
  "number": "7.7.19",
  "title": "",
  "body": "  How many derangements of a nine-element set are there?   "
},
{
  "id": "s_inclusion-exclusion_exercises-20",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-20",
  "type": "Exercise",
  "number": "7.7.20",
  "title": "",
  "body": "  A soccer team's equipment manager is in a hurry to distribute uniforms to the last six players to show up before a match. Instead of ensuring that each player receives his own uniform, he simply hands a uniform to each of the six players. In how many ways could he hand out the uniforms so that no player receives his own uniform? (Assume that the six remaining uniforms belong to the last six players to arrive.)   "
},
{
  "id": "s_inclusion-exclusion_exercises-21",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-21",
  "type": "Exercise",
  "number": "7.7.21",
  "title": "",
  "body": "  A careless payroll clerk is placing employees' paychecks into envelopes that have been pre-labeled. The envelopes are sealed before the clerk realizes he didn't match the names on the paychecks with the names on the envelopes. If there are seven employees, in how many ways could he have placed the paychecks into the envelopes so that exactly three employees receive the correct paycheck?   "
},
{
  "id": "s_inclusion-exclusion_exercises-22",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-22",
  "type": "Exercise",
  "number": "7.7.22",
  "title": "",
  "body": "  The principle of inclusion-exclusion is not the only approach available for counting derangements. We know that and . Using this initial information, it is possible to give a recursive form for . In this exercise, we consider two recursions for .  Give a combinatorial argument to prove that the number of derangements satisfies the recursive formula for .  Prove that the number of derangements also satisfies the recursive formula for .        For a derangement , consider the integer with . Argue based on the number of choices for and then whether or not.  You may find it easiest to prove this using the other recursive formula and mathematical induction.      "
},
{
  "id": "s_inclusion-exclusion_exercises-23",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-23",
  "type": "Exercise",
  "number": "7.7.23",
  "title": "",
  "body": "  Determine by listing the integers it counts as well as by using the formula of .   "
},
{
  "id": "s_inclusion-exclusion_exercises-24",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-24",
  "type": "Exercise",
  "number": "7.7.24",
  "title": "",
  "body": "  Compute .   "
},
{
  "id": "s_inclusion-exclusion_exercises-25",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-25",
  "type": "Exercise",
  "number": "7.7.25",
  "title": "",
  "body": "  Given that , compute    "
},
{
  "id": "s_inclusion-exclusion_exercises-26",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-26",
  "type": "Exercise",
  "number": "7.7.26",
  "title": "",
  "body": "  Prove .   "
},
{
  "id": "s_inclusion-exclusion_exercises-27",
  "level": "2",
  "url": "s_inclusion-exclusion_exercises.html#s_inclusion-exclusion_exercises-27",
  "type": "Exercise",
  "number": "7.7.27",
  "title": "",
  "body": "  At a very small school, there is a class with nine students in it. The students, whom we will denote as , , , , , , , , and , walk from their classroom to the lunchroom in the order . (Let's say that is at the front of the line.) On the way back to their classroom after lunch, they would like to walk in an order so that no student walks immediately behind the same classmate he or she was behind on the way to lunch. (For instance, and would meet their criteria. However, they would not be happy with since it contains and , so is following again and is following again.)  One student ponders how many possible ways there would be for them to line up meeting this criterion. Help him out by determining the exact value of this number.  Is this number bigger than, smaller than, or equal to the number of ways they could return so that no student walks in the same position as before ( , is not first, is not second, , and is not last)?  What fraction (give it as a decimal) of the total number of ways they could line up meet their criterion of no student following immediately behind the same student on the return trip?     "
},
{
  "id": "s_genfunction_intro",
  "level": "1",
  "url": "s_genfunction_intro.html",
  "type": "Section",
  "number": "8.1",
  "title": "Basic Notation and Terminology",
  "body": " Basic Notation and Terminology  With a sequence of real numbers, we associate a function  defined by The word function is put in quotes as we do not necessarily care about substituting a value of and obtaining a specific value for . In other words, we consider as a formal power series and frequently ignore issues of convergence.  It is customary to refer to as the generating function generating function of the sequence . As we have already remarked, we are not necessarily interested in calculating for specific values of . However, by convention, we take .   series infinite geometric  series infinite geometric sum of  Consider the constant sequence with for every . Then the generating function of is given by , which is called the infinite geometric series .  You may remember that this last expression is the Maclaurin series for the function and that the series converges when . Since we want to think in terms of formal power series, let's see that we can justify the expression without any calculus techniques. Consider the product and notice that, since we multiply formal power series just like we multiply polynomials (power series are pretty much polynomials that go on forever), we have that this product is Now we have that or, more usefully, after dividing through by , series infinite geometric sum of    The method of can be adapted to address the finite geometric series series finite geometric  . In that case, we look at . Looking carefully, we see that everything cancels in the final expression except . Dividing both sides by gives us series finite geometric sum of as the formula for the sum of a finite geometric series.   Just like you learned in calculus for Maclaurin series, formal power series can be differentiated and integrated term by term. The rigorous mathematical framework that underlies such operations is not our focus here, so take us at our word that this can be done for formal power series without concern about issues of convergence.  To see this in action, consider differentiating the power series of the previous example. This gives Integration of the series represented by yields (after a bit of algebraic manipulation)    Before you become convinced that we're only going to concern ourselves with generating functions that actually converge, let's see that we can talk about the formal power series even though it has radius of convergence , , the series converges only for , so that . Nevertheless, it makes sense to speak of the formal power series as the generating function for the sequence , and is the number of permutations of when .  For reference, we state the following elementary result, which emphasizes the form of a product of two power series.    Let and be generating functions. Then is the generating function of the sequence whose term is given by     "
},
{
  "id": "s_genfunction_intro-3",
  "level": "2",
  "url": "s_genfunction_intro.html#s_genfunction_intro-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "generating function "
},
{
  "id": "exam_genfunction_geom-series",
  "level": "2",
  "url": "s_genfunction_intro.html#exam_genfunction_geom-series",
  "type": "Example",
  "number": "8.1",
  "title": "",
  "body": " series infinite geometric  series infinite geometric sum of  Consider the constant sequence with for every . Then the generating function of is given by , which is called the infinite geometric series .  You may remember that this last expression is the Maclaurin series for the function and that the series converges when . Since we want to think in terms of formal power series, let's see that we can justify the expression without any calculus techniques. Consider the product and notice that, since we multiply formal power series just like we multiply polynomials (power series are pretty much polynomials that go on forever), we have that this product is Now we have that or, more usefully, after dividing through by , series infinite geometric sum of   "
},
{
  "id": "s_genfunction_intro-5",
  "level": "2",
  "url": "s_genfunction_intro.html#s_genfunction_intro-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "finite geometric series "
},
{
  "id": "s_genfunction_intro-6",
  "level": "2",
  "url": "s_genfunction_intro.html#s_genfunction_intro-6",
  "type": "Example",
  "number": "8.2",
  "title": "",
  "body": " Just like you learned in calculus for Maclaurin series, formal power series can be differentiated and integrated term by term. The rigorous mathematical framework that underlies such operations is not our focus here, so take us at our word that this can be done for formal power series without concern about issues of convergence.  To see this in action, consider differentiating the power series of the previous example. This gives Integration of the series represented by yields (after a bit of algebraic manipulation)   "
},
{
  "id": "prop_genfunction-product",
  "level": "2",
  "url": "s_genfunction_intro.html#prop_genfunction-product",
  "type": "Proposition",
  "number": "8.3",
  "title": "",
  "body": "  Let and be generating functions. Then is the generating function of the sequence whose term is given by    "
},
{
  "id": "s_genfunction_distributions",
  "level": "1",
  "url": "s_genfunction_distributions.html",
  "type": "Section",
  "number": "8.2",
  "title": "Another look at distributing apples or folders",
  "body": " Another look at distributing apples or folders  A recurring problem so far in this book has been to consider problems that ask about distributing indistinguishable objects (say apples) to distinct entities (say children). We started in by asking how many ways there were to distribute apples to children so that each child is guaranteed to get at least one apple and saw that the answer was . We even saw how to restrict the situation so that one of the children was limited and could receive at most apples. In , we learned how to extend the restrictions so that more than one child had restrictions on the number of apples allowed by taking advantage of the . Before moving on to see how generating functions can allow us to get even more creative with our restrictions, let's take a moment to see how generating functions would allow us to solve the most basic problem at hand.   We already know that the number of ways to distribute apples to children so that each child gets at least one apple is , but it will be instructive to see how we can derive this result using generating functions. Let's start with an even simpler problem: how many ways are there to distribute apples to one child so that each child receives at least one apple? Well, this isn't too hard, there's only one way to do it give all the apples to the lucky kid! Thus the sequence that enumerates the number of ways to do this is with for all . Then the generating function for this sequence is How can we get from this fact to the question of five children? Notice what happens when we multiply   To see what this product represents, first consider how many ways can we get an ? We could use the from the first factor and from each of the other four, or from the second factor and from each of the other four, , meaning that the coefficient on is . More generally, what's the coefficient on in the product? In the expansion, we get an for every product of the form where . Returning to the general question here, we're really dealing with distributing apples to children, and since for , we also have the guarantee that each child receives at least one apple, so the product of the generating function for one child gives the generating function for five children.  Let's pretend for a minute that we didn't know that the coefficients must be . How could we figure out the coefficients just from the generating function? The generating function we're interested in is , which you should be able to pretty quickly see satisfies The coefficient on in this series , just as we expected.   We could revisit an example from to see that if we wanted to limit a child to receive at most apples, we would use as its generating function instead of , but rather than belabor that here, let's try something a bit more exotic.    A grocery store is preparing holiday fruit baskets for sale. Each fruit basket will have pieces of fruit in it, chosen from apples, pears, oranges, and grapefruit. How many different ways can such a basket be prepared if there must be at least one apple in a basket, a basket cannot contain more than three pears, and the number of oranges must be a multiple of four?    In order to get at the number of baskets consisting of pieces of fruit, let's solve the more general problem where each basket has pieces of fruit. Our method is simple: find the generating function for how to do this with each type of fruit individually and then multiply them. As in the previous example, the product will contain the term for every way of assembling a basket of pieces of fruit subject to our restrictions. The apple generating function is , since we only want positive powers of (corresponding to ensuring at least one apple). The generating function for pears is , since we can have only zero, one, two, or three pears in basket. For oranges we have , and the unrestricted grapefruit give us a factor of . Multiplying, we have Now we want to make use of the fact that (by ) to see that our generating function is Thus, there are possible fruit baskets containing pieces of fruit, meaning that the answer to the question we originally asked is .    The compact form of the solution to suggests that perhaps there is a way to come up with this answer without the use of generating functions. Thinking about such an approach would be a good way to solidify your understanding of a variety of the enumerative topics we have already covered.    Find the number of integer solutions to the equation ( an integer) with even, , and .    Again, we want to look at the generating function we would have if each variable existed individually and take their product. For , we get a factor of ; for , we have ; and for our factor is . Therefore, the generating function for the number of solutions to the equation above is In calculus, when we wanted to integrate a rational function of this form, we would use the method of partial fractions to write it as a sum of simpler rational functions whose antiderivatives we recognized. Here, our technique is the same, as we can readily recognize the formal power series for many rational functions. Our goal is to write for appropriate constants, , , and . To find the constants, we clear the denominators, giving Equating coefficients on terms of equal degree, we have: Solving the system, we find , , and . Therefore, our generating function is .  The solution to our question is thus the coefficient on in the above generating function, which is a surprising answer that would not be too easy to come up with via other methods!    The invocation of partial fractions in is powerful, but solving the necessary system of equations and then hoping that the resulting formal power series have expansions we immediately recognize can be a challenge. If had not asked about the general case with on the right-hand side of the equation but instead asked specifically about , you might be wondering if it would just be faster to write some Python code to generate all the solutions or more interesting to huddle up and devise some clever strategy to count them. Fortunately, technology can help us out when working with generating functions. In SageMath, we can use the series() method to get the power series expansion of a given function. The two arguments to series are the variable and the degree of the terms you want to truncate. In the cell below, we ask SageMath to expand the generating function from by giving us all the terms of degree at most 30 and then collapsing the rest of the series into its form of big-Oh notation, which we discard by storing the output from series() in a polynomial f(x) .   If all we really want is the coefficient on a specific term, we can use the list() method to turn the polynomial into a list of its coefficients and then index into that list using standard SageMath or Python syntax:   Let's see that the answer agrees with what our formula in the solution to gives us for :   That's a relief, and so long as we only need a single coefficient, we're now in good shape. But what if we really need a formula for the coefficient on in general? Let's see how we can use SageMath to help us with some of the other steps in . The first thing we'll want is the partial_fraction() method:   If you don't like the way that looks, the pretty_print() function can make it easier to read:   Up to the location of a minus sign, this is what we got by hand, but we get it much faster! From this stage, it's frequently possible to use our knowledge of certain fundamental power series that appear when doing the partial fractions expansion to come up with the general form for the coefficient on an arbitrary term of the power series. To facilitate this, we close this section with an example that illustrates how we can use solutions to counting problems we have already studied in order to figure out the coefficients on generating functions.    Let be a positive integer. What is the coefficient on in the generating function ?    We have already encountered the case in the midst of working on , but there we appealed to calculus. Let's take a look at this from the perspective of just counting. The generating function encodes the sequence for the number of ways to distribute apples to one child. There's only one way to do that task: give the lucky kid all the apples. Multiplying together a bunch of copies of then serves to increase the number of children to whom the apples are being distributed, and since each power series being multiplied starts with , we are in the situation where the number of apples each child receives must be nonnegative . This is therefore a problem from . We have children and the coefficient on is the number of ways of distributing apples to them. This requires artificial apples, so we distribute apples, which determine gaps and we must choose of them as the locations for dividers. Therefore, we can conclude that . It's possible to arrive at this conclusion using techniques from calculus, but there are a lot of factorials and s to monitor, so this combinatorial approach may be less error prone!       Suppose you are making a generating function for the number of ways to distribute some type of objects, as in the examples of this section. When a recipient can get no objects, what is the constant term in the factor of the generating function that corresponds to that recipient? What is the constant term when a recipient must get at least one object? Briefly explain your reasoning.       Suppose in the country Combinatoria, they use coins with values , , , , , , and . If you would like to write a generating function in which the coefficient on is the number of ways to form a collection of coins worth subject to the restriction that the number of coins of value is one, three, four, or five, what factor would you introduce into your generating function? Briefly explain your reasoning.      "
},
{
  "id": "exa_genfunction_apples",
  "level": "2",
  "url": "s_genfunction_distributions.html#exa_genfunction_apples",
  "type": "Example",
  "number": "8.4",
  "title": "",
  "body": " We already know that the number of ways to distribute apples to children so that each child gets at least one apple is , but it will be instructive to see how we can derive this result using generating functions. Let's start with an even simpler problem: how many ways are there to distribute apples to one child so that each child receives at least one apple? Well, this isn't too hard, there's only one way to do it give all the apples to the lucky kid! Thus the sequence that enumerates the number of ways to do this is with for all . Then the generating function for this sequence is How can we get from this fact to the question of five children? Notice what happens when we multiply   To see what this product represents, first consider how many ways can we get an ? We could use the from the first factor and from each of the other four, or from the second factor and from each of the other four, , meaning that the coefficient on is . More generally, what's the coefficient on in the product? In the expansion, we get an for every product of the form where . Returning to the general question here, we're really dealing with distributing apples to children, and since for , we also have the guarantee that each child receives at least one apple, so the product of the generating function for one child gives the generating function for five children.  Let's pretend for a minute that we didn't know that the coefficients must be . How could we figure out the coefficients just from the generating function? The generating function we're interested in is , which you should be able to pretty quickly see satisfies The coefficient on in this series , just as we expected.  "
},
{
  "id": "exa_genfunction_fruit",
  "level": "2",
  "url": "s_genfunction_distributions.html#exa_genfunction_fruit",
  "type": "Example",
  "number": "8.5",
  "title": "",
  "body": "  A grocery store is preparing holiday fruit baskets for sale. Each fruit basket will have pieces of fruit in it, chosen from apples, pears, oranges, and grapefruit. How many different ways can such a basket be prepared if there must be at least one apple in a basket, a basket cannot contain more than three pears, and the number of oranges must be a multiple of four?    In order to get at the number of baskets consisting of pieces of fruit, let's solve the more general problem where each basket has pieces of fruit. Our method is simple: find the generating function for how to do this with each type of fruit individually and then multiply them. As in the previous example, the product will contain the term for every way of assembling a basket of pieces of fruit subject to our restrictions. The apple generating function is , since we only want positive powers of (corresponding to ensuring at least one apple). The generating function for pears is , since we can have only zero, one, two, or three pears in basket. For oranges we have , and the unrestricted grapefruit give us a factor of . Multiplying, we have Now we want to make use of the fact that (by ) to see that our generating function is Thus, there are possible fruit baskets containing pieces of fruit, meaning that the answer to the question we originally asked is .   "
},
{
  "id": "exa_genfunction_partial-fracs",
  "level": "2",
  "url": "s_genfunction_distributions.html#exa_genfunction_partial-fracs",
  "type": "Example",
  "number": "8.6",
  "title": "",
  "body": "  Find the number of integer solutions to the equation ( an integer) with even, , and .    Again, we want to look at the generating function we would have if each variable existed individually and take their product. For , we get a factor of ; for , we have ; and for our factor is . Therefore, the generating function for the number of solutions to the equation above is In calculus, when we wanted to integrate a rational function of this form, we would use the method of partial fractions to write it as a sum of simpler rational functions whose antiderivatives we recognized. Here, our technique is the same, as we can readily recognize the formal power series for many rational functions. Our goal is to write for appropriate constants, , , and . To find the constants, we clear the denominators, giving Equating coefficients on terms of equal degree, we have: Solving the system, we find , , and . Therefore, our generating function is .  The solution to our question is thus the coefficient on in the above generating function, which is a surprising answer that would not be too easy to come up with via other methods!   "
},
{
  "id": "exa_genfunction_multisets",
  "level": "2",
  "url": "s_genfunction_distributions.html#exa_genfunction_multisets",
  "type": "Example",
  "number": "8.7",
  "title": "",
  "body": "  Let be a positive integer. What is the coefficient on in the generating function ?    We have already encountered the case in the midst of working on , but there we appealed to calculus. Let's take a look at this from the perspective of just counting. The generating function encodes the sequence for the number of ways to distribute apples to one child. There's only one way to do that task: give the lucky kid all the apples. Multiplying together a bunch of copies of then serves to increase the number of children to whom the apples are being distributed, and since each power series being multiplied starts with , we are in the situation where the number of apples each child receives must be nonnegative . This is therefore a problem from . We have children and the coefficient on is the number of ways of distributing apples to them. This requires artificial apples, so we distribute apples, which determine gaps and we must choose of them as the locations for dividers. Therefore, we can conclude that . It's possible to arrive at this conclusion using techniques from calculus, but there are a lot of factorials and s to monitor, so this combinatorial approach may be less error prone!   "
},
{
  "id": "genfunction_distributions_rq-constant_term",
  "level": "2",
  "url": "s_genfunction_distributions.html#genfunction_distributions_rq-constant_term",
  "type": "Reading Question",
  "number": "8.2.1",
  "title": "",
  "body": "  Suppose you are making a generating function for the number of ways to distribute some type of objects, as in the examples of this section. When a recipient can get no objects, what is the constant term in the factor of the generating function that corresponds to that recipient? What is the constant term when a recipient must get at least one object? Briefly explain your reasoning.    "
},
{
  "id": "genfunction_distributions_rq-coins",
  "level": "2",
  "url": "s_genfunction_distributions.html#genfunction_distributions_rq-coins",
  "type": "Reading Question",
  "number": "8.2.2",
  "title": "",
  "body": "  Suppose in the country Combinatoria, they use coins with values , , , , , , and . If you would like to write a generating function in which the coefficient on is the number of ways to form a collection of coins worth subject to the restriction that the number of coins of value is one, three, four, or five, what factor would you introduce into your generating function? Briefly explain your reasoning.    "
},
{
  "id": "s_genfunction_gen-bin-thm",
  "level": "1",
  "url": "s_genfunction_gen-bin-thm.html",
  "type": "Section",
  "number": "8.3",
  "title": "Newton’s Binomial Theorem",
  "body": " Newton's Binomial Theorem  In , we discussed the binomial theorem and saw that the following formula holds for all integers : You should quickly realize that this formula implies that the generating function for the number of -element subsets of a -element set is . The topic of generating functions is what leads us to consider what happens if we encounter as a generating function with not a positive integer. It turns out that, by suitably extending the definition of the binomial coefficients to real numbers, we can also extend the binomial theorem in a manner originally discovered by Sir Isaac Newton.  We've seen several expressions that can be used to calculate the binomial coefficients, but in order to extend to real values of , we will utilize the form recalling that we've defined recursively as for all integers and when ( an integer). Notice here, however, that the expression for makes sense for any real number , so long as is a non-negative integer. We make this definition formal.    For all real numbers and nonnegative integers , the number is defined by  for all real numbers and  for all real numbers and integers .      (Notice that this definition does not require as we did with integers.)  We are now prepared to extend the definition of binomial coefficient so that is defined for all real and nonnegative integer values of . We do this as follows.    For all real numbers and nonnegative integers ,  generalized binomial coefficient binomial coefficient generalized     Note that when and are integers with . On the other hand, we have interesting new concepts such as and   With this more general definition of binomial coefficients in hand, we're ready to state Newton's Binomial Theorem for all non-zero real numbers. The proof of this theorem can be found in most advanced calculus books.   Newton's Binomial Theorem  binomial theorem Newton's   For all real with ,     Note that the general form reduces to the original version of the binomial theorem when is a positive integer.  "
},
{
  "id": "s_genfunction_gen-bin-thm-4",
  "level": "2",
  "url": "s_genfunction_gen-bin-thm.html#s_genfunction_gen-bin-thm-4",
  "type": "Definition",
  "number": "8.8",
  "title": "",
  "body": "  For all real numbers and nonnegative integers , the number is defined by  for all real numbers and  for all real numbers and integers .     "
},
{
  "id": "s_genfunction_gen-bin-thm-7",
  "level": "2",
  "url": "s_genfunction_gen-bin-thm.html#s_genfunction_gen-bin-thm-7",
  "type": "Definition",
  "number": "8.9",
  "title": "",
  "body": "  For all real numbers and nonnegative integers ,  generalized binomial coefficient binomial coefficient generalized    "
},
{
  "id": "thm_newton-binomial",
  "level": "2",
  "url": "s_genfunction_gen-bin-thm.html#thm_newton-binomial",
  "type": "Theorem",
  "number": "8.10",
  "title": "Newton’s Binomial Theorem.",
  "body": " Newton's Binomial Theorem  binomial theorem Newton's   For all real with ,    "
},
{
  "id": "s_genfunction_binom-app",
  "level": "1",
  "url": "s_genfunction_binom-app.html",
  "type": "Section",
  "number": "8.4",
  "title": "An Application of the Binomial Theorem",
  "body": " An Application of the Binomial Theorem  In this section, we see how can be used to derive another useful identity. We begin by establishing a different recursive formula for than was used in our definition of it.    For each , .    When , both sides evaluate to . Now assume validity when for some non-negative integer . Then     Our goal in this section will be to invoke with the exponent . To do so in a meaningful manner, we need a simplified expression for , which the next lemma provides.    For each , .    We proceed by induction on . Both sides reduce to when . Now assume validity when for some non-negative integer . Then       The function is the generating function of the sequence .    By and , we know that     We will return to this generating function in , where it will play a role in a seemingly new counting problem that actually is a problem we've already studied in disguise.  Now recalling about the coefficients in the product of two generating functions, we are able to deduce the following corollary of by squaring the function .    For all ,     "
},
{
  "id": "s_genfunction_binom-app-3",
  "level": "2",
  "url": "s_genfunction_binom-app.html#s_genfunction_binom-app-3",
  "type": "Lemma",
  "number": "8.11",
  "title": "",
  "body": "  For each , .    When , both sides evaluate to . Now assume validity when for some non-negative integer . Then    "
},
{
  "id": "l_newbinom",
  "level": "2",
  "url": "s_genfunction_binom-app.html#l_newbinom",
  "type": "Lemma",
  "number": "8.12",
  "title": "",
  "body": "  For each , .    We proceed by induction on . Both sides reduce to when . Now assume validity when for some non-negative integer . Then    "
},
{
  "id": "t_sqrt",
  "level": "2",
  "url": "s_genfunction_binom-app.html#t_sqrt",
  "type": "Theorem",
  "number": "8.13",
  "title": "",
  "body": "  The function is the generating function of the sequence .    By and , we know that    "
},
{
  "id": "s_genfunction_binom-app-9",
  "level": "2",
  "url": "s_genfunction_binom-app.html#s_genfunction_binom-app-9",
  "type": "Corollary",
  "number": "8.14",
  "title": "",
  "body": "  For all ,    "
},
{
  "id": "s_genfunction_partitions-integer",
  "level": "1",
  "url": "s_genfunction_partitions-integer.html",
  "type": "Section",
  "number": "8.5",
  "title": "Partitions of an Integer",
  "body": " Partitions of an Integer  A recurring theme in this course has been to count the number of integer solutions to an equation of the form . What if we wanted to count the number of such solutions but didn't care what was? How about if we took this new question and required that the be distinct ( , for )? What about if we required that each be odd? These certainly don't seem like easy questions to answer at first, but generating functions will allow us to say something very interesting about the answers to the last two questions.  By a partition  of an integer partition of an integer , we mean a collection of (not necessarily distinct) positive integers such that . (By convention, we will write the elements of from largest to smallest.) For example, is a partition of . For each , let denote the number of partitions of the integer (with by convention). Note that as evidenced by the list in .   The partitions of , noting those into distinct parts and those into odd parts.    8 distinct parts  7+1 distinct parts, odd parts  6+2 distinct parts  6+1+1  5+3 distinct parts, odd parts  5+2+1 distinct parts  5+1+1+1 odd parts  4+4  4+3+1 distinct parts  4+2+2  4+2+1+1  4+1+1+1+1  3+3+2  3+3+1+1 odd parts  3+2+2+1  3+2+1+1+1  3+1+1+1+1+1 odd parts  2+2+2+2  2+2+2+1+1  2+2+1+1+1+1  2+1+1+1+1+1+1  1+1+1+1+1+1+1+1 odd parts     Note that there are partitions of into distinct parts. Also there are partitions of into odd parts. While it might seem that this is a coincidence, it in fact is always the case as states. Before looking at that theorem and its proof, let's think about what a generating function for , the number of partitions of , would look like. Given a partition of , we can count how many 's appear, how many 's appear, and so on. This suggests a similarity with our fruit basket problems earlier in the chapter, leading to the generating function Here the factor whose sum contains terms is accounting for the number of 's in the partition. While has a quite elegant form, that doesn't mean that it's terribly useful for computing . In fact, providing an asymptotic estimate for was a notoriously difficult problem, finally addressed by Hardy and Ramanujan in 1918. A popular account of this can be found in Robert Kanigel's 1991 book The Man who Knew Infinity or the 2016 film with the same title.  Proving the relationship between the number of partitions into distinct parts and the number of partitions into odd parts will involve restricted versions of the generating function from above.    For each , the number of partitions of into distinct parts is equal to the number of partitions of into odd parts.    The generating function for the number of partitions of into distinct parts is On the other hand, the generating function for the number of partitions of into odd parts is   To see that , we note that for all . Therefore,     "
},
{
  "id": "s_genfunction_partitions-integer-2",
  "level": "2",
  "url": "s_genfunction_partitions-integer.html#s_genfunction_partitions-integer-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "distinct "
},
{
  "id": "s_genfunction_partitions-integer-3",
  "level": "2",
  "url": "s_genfunction_partitions-integer.html#s_genfunction_partitions-integer-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "partition "
},
{
  "id": "fig_genfunction_partsof8",
  "level": "2",
  "url": "s_genfunction_partitions-integer.html#fig_genfunction_partsof8",
  "type": "Figure",
  "number": "8.15",
  "title": "",
  "body": " The partitions of , noting those into distinct parts and those into odd parts.    8 distinct parts  7+1 distinct parts, odd parts  6+2 distinct parts  6+1+1  5+3 distinct parts, odd parts  5+2+1 distinct parts  5+1+1+1 odd parts  4+4  4+3+1 distinct parts  4+2+2  4+2+1+1  4+1+1+1+1  3+3+2  3+3+1+1 odd parts  3+2+2+1  3+2+1+1+1  3+1+1+1+1+1 odd parts  2+2+2+2  2+2+2+1+1  2+2+1+1+1+1  2+1+1+1+1+1+1  1+1+1+1+1+1+1+1 odd parts    "
},
{
  "id": "thm_partition",
  "level": "2",
  "url": "s_genfunction_partitions-integer.html#thm_partition",
  "type": "Theorem",
  "number": "8.16",
  "title": "",
  "body": "  For each , the number of partitions of into distinct parts is equal to the number of partitions of into odd parts.    The generating function for the number of partitions of into distinct parts is On the other hand, the generating function for the number of partitions of into odd parts is   To see that , we note that for all . Therefore,    "
},
{
  "id": "s_genfunction_exponential",
  "level": "1",
  "url": "s_genfunction_exponential.html",
  "type": "Section",
  "number": "8.6",
  "title": "Exponential generating functions",
  "body": " Exponential generating functions  If we had wanted to be absolutely precise earlier in the chapter, we would have referred to the generating functions we studied as ordinary generating functions or even ordinary power series generating functions .  generating function  ordinary  This is because there are other types of generating functions, based on other types of power series. In this section, we briefly introduce another type of generating function, the exponential generating function .  generating function  exponential  While an ordinary generating function has the form , an exponential generating function is based on the power series for the exponential function . Thus, the exponential generating function for the sequence is . In this section, we will see some ways we can use exponential generating functions to solve problems that we could not tackle with ordinary generating functions. However, we will only scratch the surface of the potential of this type of generating function. We begin with the most fundamental exponential generating function, in analogy with the ordinary generating function of .   Consider the constant sequence . Then the exponential generating function for this sequence is From calculus, you probably recall that this is the power series for the exponential function , which is why we call this type of generating function an exponential generating function. From this example, we can quickly recognize that the exponential generating function for the number of binary strings of length is since    In our study of ordinary generating functions earlier in this chapter, we considered examples where quantity (number of apples, ) mattered but order did not. One of the areas where exponential generating functions are preferable to ordinary generating functions is in applications where order matters, such as counting strings. For instance, although the bit strings and both contain three zeros and two ones, they are not the same strings. On the other hand, two fruit baskets containing two apples and three oranges would be considered equivalent, regardless of how you arranged the fruit. We now consider a couple of examples to illustrate this technique.    string  ternary   Suppose we wish to find the number of ternary strings in which the number of s is even. (There are no restrictions on the number of s and s.) As with ordinary generating functions, we determine a generating function for each of the digits and multiply them. For s and s, since we may have any number of each of them, we introduce a factor of for each. For an even number of s, we need Unlike with ordinary generating functions, we cannot represent this series in a more compact form by simply substituting a function of into the series for . However, with a small amount of cleverness, we are able to achieve the desired result. To do this, first notice that Thus, when we add the series for to the series for all of the terms with odd powers of will cancel! We thus find which is exactly twice what we need. Therefore, the factor we introduce for s is .  Now we have an exponential generating function of To find the number of ternary strings in which the number of s is even, we thus need to look at the coefficient on in the series expansion. In doing this, we find that the number of ternary strings with an even number of s is .   We can also use exponential generating functions when there are bounds on the number of times a symbol appears, such as in the following example.    string  ternary    How many ternary strings of length have at least one and at least one ?    To ensure that a symbol appears at least once, we need the following exponential generating function You should notice that this is almost the series for , except it's missing the first term. Thus, . Using this, we now have as the exponential generating function for this problem. Finding the series expansion, we have Now we can answer the question by reading off the coefficient on , which is .    Before proceeding to an additional example, let's take a minute to look at another way to answer the question from the previous example. To count the number of ternary strings of length with at least one and at least one , we can count all ternary strings of length and use the principle of inclusion-exclusion to eliminate the undesirable strings lacking a and\/or a . If a ternary string lacks a , we're counting all strings made up of s and s, so there are strings. Similarly for lacking a . However, if we subtract , then we've subtracted the strings that lack both a  and a twice. A ternary string that has no s and no s consists only of s. There is a single ternary string of length satisfying this criterion. Thus, we obtain in another way.   Alice needs to set an eight-digit passcode for her mobile phone. The restrictions on the passcode are a little peculiar. Specifically, it must contain an even number of s, at least one , and at most three s. Bob remarks that although the restrictions are unusual, they don't do much to reduce the number of possible passcodes from the total number of eight-digit strings. Carlos isn't convinced that's the case, so he works up an exponential generating function as follows. For the seven digits on which there are no restrictions, a factor of is introduced. To account for an even number of s, he uses . For at least one , a factor of is required. Finally, accounts for the restriction of at most three s. The exponential generating function for the number of -digit passcodes is thus   Dave sees this mess written on the whiteboard and groans. He figures they'll be there all day multiplying and making algebra mistakes in trying to find the desired coefficient. Alice points out that they don't really need to find the coefficient on for all . Instead, she suggests they use SageMath to just find the coefficient on .   Since , this tells them that there are valid passcodes for the mobile phone. A quick calculation shows that Bob was totally off base in claiming that there was no significant reduction in the number of possible strings to use as a passcode. The total number of valid passcodes is only of the total number of eight-digit strings!   Exponential generating functions are useful in many other situations beyond enumerating strings. For instance, they can be used to count the number of -vertex, connected, labeled graphs. However, doing so is beyond the scope of this book. If you are interested in learning much more about generating functions, the book generatingfunctionology by Herbert S. Wilf is available online at .     Suppose Alice's mobile phone passcode restrictions in were modified so that the number of s had to be at least two. Then one of the factors of in the generating function would have to be replaced by what? You can express your answer as either a series or in terms of with suitable adjustments.      "
},
{
  "id": "s_genfunction_exponential-2",
  "level": "2",
  "url": "s_genfunction_exponential.html#s_genfunction_exponential-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "ordinary generating functions ordinary power series generating functions exponential generating function "
},
{
  "id": "s_genfunction_exponential-3",
  "level": "2",
  "url": "s_genfunction_exponential.html#s_genfunction_exponential-3",
  "type": "Example",
  "number": "8.17",
  "title": "",
  "body": " Consider the constant sequence . Then the exponential generating function for this sequence is From calculus, you probably recall that this is the power series for the exponential function , which is why we call this type of generating function an exponential generating function. From this example, we can quickly recognize that the exponential generating function for the number of binary strings of length is since   "
},
{
  "id": "s_genfunction_exponential-5",
  "level": "2",
  "url": "s_genfunction_exponential.html#s_genfunction_exponential-5",
  "type": "Example",
  "number": "8.18",
  "title": "",
  "body": "  string  ternary   Suppose we wish to find the number of ternary strings in which the number of s is even. (There are no restrictions on the number of s and s.) As with ordinary generating functions, we determine a generating function for each of the digits and multiply them. For s and s, since we may have any number of each of them, we introduce a factor of for each. For an even number of s, we need Unlike with ordinary generating functions, we cannot represent this series in a more compact form by simply substituting a function of into the series for . However, with a small amount of cleverness, we are able to achieve the desired result. To do this, first notice that Thus, when we add the series for to the series for all of the terms with odd powers of will cancel! We thus find which is exactly twice what we need. Therefore, the factor we introduce for s is .  Now we have an exponential generating function of To find the number of ternary strings in which the number of s is even, we thus need to look at the coefficient on in the series expansion. In doing this, we find that the number of ternary strings with an even number of s is .  "
},
{
  "id": "s_genfunction_exponential-7",
  "level": "2",
  "url": "s_genfunction_exponential.html#s_genfunction_exponential-7",
  "type": "Example",
  "number": "8.19",
  "title": "",
  "body": "  string  ternary    How many ternary strings of length have at least one and at least one ?    To ensure that a symbol appears at least once, we need the following exponential generating function You should notice that this is almost the series for , except it's missing the first term. Thus, . Using this, we now have as the exponential generating function for this problem. Finding the series expansion, we have Now we can answer the question by reading off the coefficient on , which is .   "
},
{
  "id": "ex_genfunction_exponential_passcode",
  "level": "2",
  "url": "s_genfunction_exponential.html#ex_genfunction_exponential_passcode",
  "type": "Example",
  "number": "8.20",
  "title": "",
  "body": " Alice needs to set an eight-digit passcode for her mobile phone. The restrictions on the passcode are a little peculiar. Specifically, it must contain an even number of s, at least one , and at most three s. Bob remarks that although the restrictions are unusual, they don't do much to reduce the number of possible passcodes from the total number of eight-digit strings. Carlos isn't convinced that's the case, so he works up an exponential generating function as follows. For the seven digits on which there are no restrictions, a factor of is introduced. To account for an even number of s, he uses . For at least one , a factor of is required. Finally, accounts for the restriction of at most three s. The exponential generating function for the number of -digit passcodes is thus   Dave sees this mess written on the whiteboard and groans. He figures they'll be there all day multiplying and making algebra mistakes in trying to find the desired coefficient. Alice points out that they don't really need to find the coefficient on for all . Instead, she suggests they use SageMath to just find the coefficient on .   Since , this tells them that there are valid passcodes for the mobile phone. A quick calculation shows that Bob was totally off base in claiming that there was no significant reduction in the number of possible strings to use as a passcode. The total number of valid passcodes is only of the total number of eight-digit strings!  "
},
{
  "id": "rq-genfunction_exponential_passcode",
  "level": "2",
  "url": "s_genfunction_exponential.html#rq-genfunction_exponential_passcode",
  "type": "Reading Question",
  "number": "8.6.1",
  "title": "",
  "body": "  Suppose Alice's mobile phone passcode restrictions in were modified so that the number of s had to be at least two. Then one of the factors of in the generating function would have to be replaced by what? You can express your answer as either a series or in terms of with suitable adjustments.    "
},
{
  "id": "s_genfunction_discussion",
  "level": "1",
  "url": "s_genfunction_discussion.html",
  "type": "Section",
  "number": "8.7",
  "title": "Discussion",
  "body": " Discussion  After studying the proof that the number of partitions of an integer into odd parts is the same as the number of partitions of that integer into distinct parts, Yolanda was beside herself. Do you guys realize what we just did? We showed that two quantities were equal without saying anything about what those quantities actually were. That's really neat, she said. Nobody said anything for a long time, but after some time Dave said There might be other instances where you would want to be able to communicate fully, yet hold back on every last detail. Bob said I don't get it. Alice interjected a comment that was more of question than a statement Do you mean that parties may want to communicate, while maintaining that the conversation did not occur? Carlos added Or maybe they just want to be able to detect whether anyone else was listening. Now Zori was nearly happy. Privacy and security were big ticket items.  "
},
{
  "id": "s_genfunction_exercises",
  "level": "1",
  "url": "s_genfunction_exercises.html",
  "type": "Exercises",
  "number": "8.8",
  "title": "Exercises",
  "body": "  Computer algebra systems can be powerful tools for working with generating functions. However, unless an exercise specifically suggests that you use a computer algebra system, we strongly encourage you to solve the problem by hand. This will help you develop a better understanding of how generating functions can be used. You might consider editing the content of the SageMathCells in to assist with solving problems here where a computer algebra system is suggested, and in some cases, we have included a SageMathCell within the exercise for you to use.  For all exercises in this section, generating function should be taken to mean ordinary generating function. Exponential generating functions are only required in exercises specifically mentioning them.     For each finite sequence below, give its generating function.              For each infinite sequence suggested below, give its generating function in closed form, , not as an infinite sum. (Use the most obvious choice of form for the general term of each sequence.)                    For each generating function below, give a closed form for the term of its associated sequence.                  Find the coefficient on in each of the generating functions below.                Find the generating function for the number of ways to create a bunch of balloons selected from white, gold, and blue balloons so that the bunch contains at least one white balloon, at least one gold balloon, and at most two blue balloons. How many ways are there to create a bunch of balloons subject to these requirements?      A volunteer coordinator has identical chocolate chip cookies to distribute to six volunteers. Use a generating function (and computer algebra system) to determine the number of ways she can distribute the cookies so that each volunteer receives at least two cookies and no more than seven cookies.       Consider the inequality where are all integers. Suppose also that , is a multiple of , and . Let be the number of solutions of the inequality subject to these restrictions. Find the generating function for the sequence and use it to find a closed formula for .      Find the generating function for the number of ways to distribute blank scratch paper to Alice, Bob, Carlos, and Dave so that Alice gets at least two sheets, Bob gets at most three sheets, the number of sheets Carlos receives is a multiple of three, and Dave gets at least one sheet but no more than six sheets of scratch paper. Without finding the power series expansion for this generating function (or using a computer algebra system!), determine the coefficients on and in this generating function.      What is the generating function for the number of ways to select a group of students from a class of students?      Using generating functions, find a formula for the number of different types of fruit baskets containing of pieces of fruit chosen from pomegranates, bananas, apples, oranges, pears, and figs that can be made subject to the following restrictions:  there are either or pomegranates,  there is at least banana,  the number of figs is a multiple of ,  there are at most pears, and  there are no restrictions on the number of apples or oranges.  How many ways are there to form such a fruit basket with pieces of fruit?      Using generating functions, find the number of ways to make change for a dollar bill using only dollar coins and $ , $ , and $ bills.     Find the partial fractions expansion for your generating function. Be careful here, as you want a partial fraction expansion in which all coefficients for your denominator polynomials have integer coefficients. The partial_fraction() method in SageMath should be useful here, and pretty_print will make it easier to read. Once you have the right partial fractions expansion, you may find the following identity helpful where will be a polynomial in this instance.      A businesswoman is traveling in Belgium and wants to buy chocolates for herself, her husband, and their two daughters. A store has dark chocolate truffles (€ 10\/box), milk chocolate truffles (€ 8\/box), nougat-filled chocolates (€ 5\/box), milk chocolate bars (€ 7\/bar), and 75% cacao chocolate bars (€ 11\/bar). Her purchase is to be subject to the following:  Only the daughters like dark chocolate truffles, and her purchase must ensure that each daughter gets an equal number of boxes of them (if they get any).  At least two boxes of milk chocolate truffles must be purchased.  If she buys any boxes of nougat-filled chocolates, then she buys exactly enough that each family member gets precisely one box of them.  At most three milk chocolate bars may be purchased.  There are no restrictions on the number of 75% cacao chocolate bars.  Let be the number of ways the businesswoman can spend exactly € ( not buy items!) at this chocolate shop. Find the generating function for the sequence . In how many ways can she spend exactly € 100 at the chocolate shop? (A computer algebra system will be helpful for finding coefficients.)       Bags of candy are being prepared to distribute to the children at a school. The types of candy available are chocolate bites, peanut butter cups, peppermint candies, and fruit chews. Each bag must contain at least two chocolate bites, an even number of peanut butter cups, and at most six peppermint candies. The fruit chews are available in four different flavors lemon, orange, strawberry, and cherry. A bag of candy may contain at most two fruit chews, which may be of the same or different flavors. Beyond the number of pieces of each type of candy included, bags of candy are distinguished by using the flavors of the fruit chews included, not just the number. For example, a bag containing two orange fruit chews is different from a bag containing a cherry fruit chew and a strawberry fruit chew, even if the number of pieces of each other type of candy is the same.  Let be the number of different bags of candy with pieces of candy that can be formed subject to these restrictions. Find the generating function for the sequence .  Suppose the school has students and the teachers would like to ensure that each student gets a different bag of candy. However, they know there will be fights if the bags do not all contain the same number of pieces of candy. What is the smallest number of pieces of candy they can include in the bags that ensures each student gets a different bag of candy containing the same number of pieces of candy?        Make up a combinatorial problem (similar to those found in this chapter) that leads to the generating function       Tollbooths in Illinois accept all U.S. coins, including pennies. Carlos has a very large supply of pennies, nickels, dimes, and quarters in his car as he drives on a tollway. He encounters a toll for $ and wonders how many different ways he could use his supply of coins to pay the toll without getting change back. (A computer algebra system is probably the best way to get the required coefficient once you have a generating function, since you're not asked for the coefficient on .)  Use a generating function and computer algebra system to determine the number of ways Carlos could pay his $ toll by dropping the coins together into the toll bin. (Assume coins of the same denomination cannot be distinguished from each other.)  Suppose that instead of having a bin into which motorists drop the coins to pay their toll, the coins must be inserted one-by-one into a coin slot. In this scenario, Carlos wonders how many ways he could pay the $ toll when the order the coins are inserted matters. For instance, in the previous part, the use of three quarters and two dimes would be counted only one time. However, when the coins must be inserted individually into a slot, there are ways to insert this combination. Use a generating function and computer algebra system to determine the number of ways that Carlos could pay the $ toll when considering the order the coins are inserted.       For part , you really want an ordinary generating function and not an exponential generating function, despite the fact that order matters. Once you think you have a generating function that works, you might check the coefficients on by hand to make sure that you're on the right track.      To be inserted.  1856250874024        To be inserted  We are seeking the number of solutions to the equation (where is allowed to vary) subject to . Therefore, the ordinary generating function is . A computer algebra system gives 1856250874024 as the coefficient on .        List the partitions of . Write a D next to each partition into distinct parts and an O next to each partition into odd parts.      Use generating functions to find the number of ways to partition into odd parts.      What is the smallest integer that can be partitioned in at least ways? How many ways can it be partitioned? How many of them are into distinct parts? (A computer algebra system will be helpful for this exercise.)      What is the generating function for the number of partitions of an integer into even parts?      Find the exponential generating function (in closed form, not as an infinite sum) for each infinite sequence whose general term is given below.              For each exponential generating function below, give a formula in closed form for the sequence it represents.            Find the coefficient on in each of the exponential generating functions below.              Find the exponential generating function for the number of strings of length formed from the set if there must be at least one and the number of 's must be even. Find a closed formula for the coefficients of this exponential generating function.      Find the exponential generating function for the number of strings of length formed from the set if there must be at least one and the number of 's must be odd. Find a closed formula for the coefficients of this exponential generating function.      Find the exponential generating function for the number of strings of length formed from the set if there must be at least one , the number of 's must be odd, and the number of 's is either or . Find a closed formula for the coefficients of this exponential generating function.      Find the exponential generating function for the number of alphanumeric strings of length formed from the uppercase letters of the English alphabet and decimal digits if  each vowel must appear at least one time;  the letter must appear at least three times;  the letter may appear at most three times;  each even digit must appear an even number of times; and  each odd digit must appear an odd number of times.        Consider the inequality where are all integers. Suppose also that , is a multiple of , and . Let be the number of solutions of the inequality subject to these restrictions. Find the generating function for the sequence and use it to find a closed formula for .    Yes, this is very close to . However, the bounds on are different here. You might try using a computer algebra system to expedite finding the partial fractions expansion, which will have several terms whose power series you can work with quickly. For the term involving , work out the series by hand. You may find that your solution to this problem has two parts one for when is even and another for when is odd.      Prove about the coefficients in the product of two ordinary generating functions.    "
},
{
  "id": "s_genfunction_exercises-2",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-2",
  "type": "Exercise",
  "number": "8.8.1",
  "title": "",
  "body": "  For each finite sequence below, give its generating function.           "
},
{
  "id": "s_genfunction_exercises-3",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-3",
  "type": "Exercise",
  "number": "8.8.2",
  "title": "",
  "body": "  For each infinite sequence suggested below, give its generating function in closed form, , not as an infinite sum. (Use the most obvious choice of form for the general term of each sequence.)                 "
},
{
  "id": "s_genfunction_exercises-4",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-4",
  "type": "Exercise",
  "number": "8.8.3",
  "title": "",
  "body": "  For each generating function below, give a closed form for the term of its associated sequence.               "
},
{
  "id": "s_genfunction_exercises-5",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-5",
  "type": "Exercise",
  "number": "8.8.4",
  "title": "",
  "body": "  Find the coefficient on in each of the generating functions below.             "
},
{
  "id": "s_genfunction_exercises-6",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-6",
  "type": "Exercise",
  "number": "8.8.5",
  "title": "",
  "body": "  Find the generating function for the number of ways to create a bunch of balloons selected from white, gold, and blue balloons so that the bunch contains at least one white balloon, at least one gold balloon, and at most two blue balloons. How many ways are there to create a bunch of balloons subject to these requirements?   "
},
{
  "id": "s_genfunction_exercises-7",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-7",
  "type": "Exercise",
  "number": "8.8.6",
  "title": "",
  "body": "  A volunteer coordinator has identical chocolate chip cookies to distribute to six volunteers. Use a generating function (and computer algebra system) to determine the number of ways she can distribute the cookies so that each volunteer receives at least two cookies and no more than seven cookies.    "
},
{
  "id": "ex_genfunction_ineq-clean",
  "level": "2",
  "url": "s_genfunction_exercises.html#ex_genfunction_ineq-clean",
  "type": "Exercise",
  "number": "8.8.7",
  "title": "",
  "body": "  Consider the inequality where are all integers. Suppose also that , is a multiple of , and . Let be the number of solutions of the inequality subject to these restrictions. Find the generating function for the sequence and use it to find a closed formula for .   "
},
{
  "id": "s_genfunction_exercises-9",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-9",
  "type": "Exercise",
  "number": "8.8.8",
  "title": "",
  "body": "  Find the generating function for the number of ways to distribute blank scratch paper to Alice, Bob, Carlos, and Dave so that Alice gets at least two sheets, Bob gets at most three sheets, the number of sheets Carlos receives is a multiple of three, and Dave gets at least one sheet but no more than six sheets of scratch paper. Without finding the power series expansion for this generating function (or using a computer algebra system!), determine the coefficients on and in this generating function.   "
},
{
  "id": "s_genfunction_exercises-10",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-10",
  "type": "Exercise",
  "number": "8.8.9",
  "title": "",
  "body": "  What is the generating function for the number of ways to select a group of students from a class of students?   "
},
{
  "id": "s_genfunction_exercises-11",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-11",
  "type": "Exercise",
  "number": "8.8.10",
  "title": "",
  "body": "  Using generating functions, find a formula for the number of different types of fruit baskets containing of pieces of fruit chosen from pomegranates, bananas, apples, oranges, pears, and figs that can be made subject to the following restrictions:  there are either or pomegranates,  there is at least banana,  the number of figs is a multiple of ,  there are at most pears, and  there are no restrictions on the number of apples or oranges.  How many ways are there to form such a fruit basket with pieces of fruit?   "
},
{
  "id": "s_genfunction_exercises-12",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-12",
  "type": "Exercise",
  "number": "8.8.11",
  "title": "",
  "body": "  Using generating functions, find the number of ways to make change for a dollar bill using only dollar coins and $ , $ , and $ bills.     Find the partial fractions expansion for your generating function. Be careful here, as you want a partial fraction expansion in which all coefficients for your denominator polynomials have integer coefficients. The partial_fraction() method in SageMath should be useful here, and pretty_print will make it easier to read. Once you have the right partial fractions expansion, you may find the following identity helpful where will be a polynomial in this instance.   "
},
{
  "id": "s_genfunction_exercises-13",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-13",
  "type": "Exercise",
  "number": "8.8.12",
  "title": "",
  "body": "  A businesswoman is traveling in Belgium and wants to buy chocolates for herself, her husband, and their two daughters. A store has dark chocolate truffles (€ 10\/box), milk chocolate truffles (€ 8\/box), nougat-filled chocolates (€ 5\/box), milk chocolate bars (€ 7\/bar), and 75% cacao chocolate bars (€ 11\/bar). Her purchase is to be subject to the following:  Only the daughters like dark chocolate truffles, and her purchase must ensure that each daughter gets an equal number of boxes of them (if they get any).  At least two boxes of milk chocolate truffles must be purchased.  If she buys any boxes of nougat-filled chocolates, then she buys exactly enough that each family member gets precisely one box of them.  At most three milk chocolate bars may be purchased.  There are no restrictions on the number of 75% cacao chocolate bars.  Let be the number of ways the businesswoman can spend exactly € ( not buy items!) at this chocolate shop. Find the generating function for the sequence . In how many ways can she spend exactly € 100 at the chocolate shop? (A computer algebra system will be helpful for finding coefficients.)    "
},
{
  "id": "s_genfunction_exercises-14",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-14",
  "type": "Exercise",
  "number": "8.8.13",
  "title": "",
  "body": "  Bags of candy are being prepared to distribute to the children at a school. The types of candy available are chocolate bites, peanut butter cups, peppermint candies, and fruit chews. Each bag must contain at least two chocolate bites, an even number of peanut butter cups, and at most six peppermint candies. The fruit chews are available in four different flavors lemon, orange, strawberry, and cherry. A bag of candy may contain at most two fruit chews, which may be of the same or different flavors. Beyond the number of pieces of each type of candy included, bags of candy are distinguished by using the flavors of the fruit chews included, not just the number. For example, a bag containing two orange fruit chews is different from a bag containing a cherry fruit chew and a strawberry fruit chew, even if the number of pieces of each other type of candy is the same.  Let be the number of different bags of candy with pieces of candy that can be formed subject to these restrictions. Find the generating function for the sequence .  Suppose the school has students and the teachers would like to ensure that each student gets a different bag of candy. However, they know there will be fights if the bags do not all contain the same number of pieces of candy. What is the smallest number of pieces of candy they can include in the bags that ensures each student gets a different bag of candy containing the same number of pieces of candy?     "
},
{
  "id": "s_genfunction_exercises-15",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-15",
  "type": "Exercise",
  "number": "8.8.14",
  "title": "",
  "body": "  Make up a combinatorial problem (similar to those found in this chapter) that leads to the generating function    "
},
{
  "id": "s_genfunction_exercises-16",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-16",
  "type": "Exercise",
  "number": "8.8.15",
  "title": "",
  "body": "  Tollbooths in Illinois accept all U.S. coins, including pennies. Carlos has a very large supply of pennies, nickels, dimes, and quarters in his car as he drives on a tollway. He encounters a toll for $ and wonders how many different ways he could use his supply of coins to pay the toll without getting change back. (A computer algebra system is probably the best way to get the required coefficient once you have a generating function, since you're not asked for the coefficient on .)  Use a generating function and computer algebra system to determine the number of ways Carlos could pay his $ toll by dropping the coins together into the toll bin. (Assume coins of the same denomination cannot be distinguished from each other.)  Suppose that instead of having a bin into which motorists drop the coins to pay their toll, the coins must be inserted one-by-one into a coin slot. In this scenario, Carlos wonders how many ways he could pay the $ toll when the order the coins are inserted matters. For instance, in the previous part, the use of three quarters and two dimes would be counted only one time. However, when the coins must be inserted individually into a slot, there are ways to insert this combination. Use a generating function and computer algebra system to determine the number of ways that Carlos could pay the $ toll when considering the order the coins are inserted.       For part , you really want an ordinary generating function and not an exponential generating function, despite the fact that order matters. Once you think you have a generating function that works, you might check the coefficients on by hand to make sure that you're on the right track.      To be inserted.  1856250874024        To be inserted  We are seeking the number of solutions to the equation (where is allowed to vary) subject to . Therefore, the ordinary generating function is . A computer algebra system gives 1856250874024 as the coefficient on .     "
},
{
  "id": "s_genfunction_exercises-17",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-17",
  "type": "Exercise",
  "number": "8.8.16",
  "title": "",
  "body": "  List the partitions of . Write a D next to each partition into distinct parts and an O next to each partition into odd parts.   "
},
{
  "id": "s_genfunction_exercises-18",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-18",
  "type": "Exercise",
  "number": "8.8.17",
  "title": "",
  "body": "  Use generating functions to find the number of ways to partition into odd parts.   "
},
{
  "id": "s_genfunction_exercises-19",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-19",
  "type": "Exercise",
  "number": "8.8.18",
  "title": "",
  "body": "  What is the smallest integer that can be partitioned in at least ways? How many ways can it be partitioned? How many of them are into distinct parts? (A computer algebra system will be helpful for this exercise.)   "
},
{
  "id": "s_genfunction_exercises-20",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-20",
  "type": "Exercise",
  "number": "8.8.19",
  "title": "",
  "body": "  What is the generating function for the number of partitions of an integer into even parts?   "
},
{
  "id": "s_genfunction_exercises-21",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-21",
  "type": "Exercise",
  "number": "8.8.20",
  "title": "",
  "body": "  Find the exponential generating function (in closed form, not as an infinite sum) for each infinite sequence whose general term is given below.           "
},
{
  "id": "s_genfunction_exercises-22",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-22",
  "type": "Exercise",
  "number": "8.8.21",
  "title": "",
  "body": "  For each exponential generating function below, give a formula in closed form for the sequence it represents.         "
},
{
  "id": "s_genfunction_exercises-23",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-23",
  "type": "Exercise",
  "number": "8.8.22",
  "title": "",
  "body": "  Find the coefficient on in each of the exponential generating functions below.           "
},
{
  "id": "s_genfunction_exercises-24",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-24",
  "type": "Exercise",
  "number": "8.8.23",
  "title": "",
  "body": "  Find the exponential generating function for the number of strings of length formed from the set if there must be at least one and the number of 's must be even. Find a closed formula for the coefficients of this exponential generating function.   "
},
{
  "id": "s_genfunction_exercises-25",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-25",
  "type": "Exercise",
  "number": "8.8.24",
  "title": "",
  "body": "  Find the exponential generating function for the number of strings of length formed from the set if there must be at least one and the number of 's must be odd. Find a closed formula for the coefficients of this exponential generating function.   "
},
{
  "id": "s_genfunction_exercises-26",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-26",
  "type": "Exercise",
  "number": "8.8.25",
  "title": "",
  "body": "  Find the exponential generating function for the number of strings of length formed from the set if there must be at least one , the number of 's must be odd, and the number of 's is either or . Find a closed formula for the coefficients of this exponential generating function.   "
},
{
  "id": "s_genfunction_exercises-27",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-27",
  "type": "Exercise",
  "number": "8.8.26",
  "title": "",
  "body": "  Find the exponential generating function for the number of alphanumeric strings of length formed from the uppercase letters of the English alphabet and decimal digits if  each vowel must appear at least one time;  the letter must appear at least three times;  the letter may appear at most three times;  each even digit must appear an even number of times; and  each odd digit must appear an odd number of times.     "
},
{
  "id": "ex_genfunction_ineq-messy",
  "level": "2",
  "url": "s_genfunction_exercises.html#ex_genfunction_ineq-messy",
  "type": "Exercise",
  "number": "8.8.27",
  "title": "",
  "body": "  Consider the inequality where are all integers. Suppose also that , is a multiple of , and . Let be the number of solutions of the inequality subject to these restrictions. Find the generating function for the sequence and use it to find a closed formula for .    Yes, this is very close to . However, the bounds on are different here. You might try using a computer algebra system to expedite finding the partial fractions expansion, which will have several terms whose power series you can work with quickly. For the term involving , work out the series by hand. You may find that your solution to this problem has two parts one for when is even and another for when is odd.   "
},
{
  "id": "s_genfunction_exercises-29",
  "level": "2",
  "url": "s_genfunction_exercises.html#s_genfunction_exercises-29",
  "type": "Exercise",
  "number": "8.8.28",
  "title": "",
  "body": "  Prove about the coefficients in the product of two ordinary generating functions.   "
},
{
  "id": "s_recurrence_intro",
  "level": "1",
  "url": "s_recurrence_intro.html",
  "type": "Section",
  "number": "9.1",
  "title": "Introduction",
  "body": " Introduction   Fibonacci numbers  Fibonacci numbers  One of the most well-known recurrences arises from a simple story. Suppose that a scientist introduces a pair of newborn rabbits to an isolated island. This species of rabbits is unable to reproduce until their third month of life, but after that produces a new pair of rabbits each month. Thus, in the first and second months, there is one pair of rabbits on the island, but in the third month, there are two pairs of rabbits, as the first pair has a pair of offspring. In the fourth month, the original pair of rabbits is still there, as is their first pair of offspring, which are not yet mature enough to reproduce. However, the original pair gives birth to another pair of rabbits, meaning that the island now has three pairs of rabbits. Assuming that there are no rabbit-killing predators on the island and the rabbits have an indefinite lifespan, how many pairs of rabbits are on the island in the tenth month?  Let's see how we can get a recurrence from this story. Let denote the number of pairs rabbits on the island in month . Thus, , , , and from our account above. How can we compute ? Well, in the month we have all the pairs of rabbits that were there during the previous month, which is ; however, some of those pairs of rabbits also reproduce during this month. Only the ones who were born prior to the previous month are able to reproduce during month , so there are pairs of rabbits who are able to reproduce, and each produces a new pair of rabbits. Thus, we have that the number of rabbits in month is for with . The sequence of numbers (we take , which satisfies our recurrence) is known as the Fibonacci sequence Fibonacci sequence after Leonardo of Pisa, better known as Fibonacci, an Italian mathematician who lived from about 1170 until about 1250. The terms of the Fibonacci sequence are   Thus, the answer to our question about the number of pairs of rabbits on the island in the tenth month is . That's really easy to compute, but what if we asked for the value of in the Fibonacci sequence? Could you even tell whether the following inequality is true or false without actually finding ?   Consider the sequence of ratios of consecutive terms of the Fibonacci sequence. shows these ratios for .   The ratios for        The ratios seem to be converging to a number. Can we determine this number? Does this number have anything to do with an explicit formula for (if one even exists)?   The Fibonacci sequence would not be as well-studied as it is if it were only good for counting pairs of rabbits on a hypothetical island. Here's another instance which again results in the Fibonacci sequence. Let count the number of ways a checkerboard can be covered by tiles. Then and while the recurrence is just , since either the rightmost column of the checkerboard contains a vertical tile (and thus the rest of it can be tiled in ways) or the rightmost two columns contain two horizontal tiles (and thus the rest of it can be tiled in ways).     Recurrences for strings  In , we saw several times how we could find recurrences that gave us the number of binary or ternary strings of length when we place a restriction on certain patterns appearing in the string. Let's recall a couple of those types of questions in order to help generate more recurrences to work with.   string binary  Let count the number of binary strings of length in which no two consecutive characters are 's. Evidently, since both binary strings of length are good. Also, since only one of the four binary strings of length is bad, , namely . And , since of the binary strings of length , the following three strings are bad : More generally, it is easy to see that the sequence satisfies the recurrence , since we can partition the set of all good strings into two sets, those ending in and those ending in . If the last bit is , then in the first positions, we can have any good string of length . However, if the last bit is , then the preceding bit must be , and then in the first positions we can have any good string of length .  As a result, this sequence is just the Fibonacci numbers, albeit offset by position, i.e, .    string ternary  Let count the number of ternary strings in which we never have occurring as a substring in two consecutive positions. Now and , as of the ternary strings of length , exactly one of them is bad. Now consider the set of all good strings grouped according to the last character. If this character is a or a , then the preceding characters can be any good string of length . However, if the last character is a , then the first characters form a good string of length which does not end in a . The number of such strings is . Accordingly, the recurrence is . In particular, .     Lines and regions in the plane  Our next example takes us back to one of the motivating problems discussed in . In , we show a family of lines in the plane. Each pair of lines intersects and no point in the plane belongs to more than two lines. These lines determine regions.   Lines and Regions    We ask how many regions a family of lines would determine, given these same restrictions on how the lines intersect. More generally, let denote the number of regions determined by lines. Evidently, , , and . Now it is easy to see that we have the recurrence . To see this, choose any one of the lines and call it . Line intersects each of the other lines and since no point in the plane belongs to three or more lines, the points where intersects the other lines are distinct. Label them consecutively as . Then these points divide line into segments, two of which (first and last) are infinite. Each of these segments partitions one of the regions determined by the other lines into two parts, meaning we have the regions determined by the other lines and new regions that creates.   "
},
{
  "id": "s_recurrence_intro_fib-4",
  "level": "2",
  "url": "s_recurrence_intro.html#s_recurrence_intro_fib-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Fibonacci sequence "
},
{
  "id": "tab_fib-ratios",
  "level": "2",
  "url": "s_recurrence_intro.html#tab_fib-ratios",
  "type": "Figure",
  "number": "9.1",
  "title": "",
  "body": " The ratios for       "
},
{
  "id": "s_recurrence_intro_fib-9",
  "level": "2",
  "url": "s_recurrence_intro.html#s_recurrence_intro_fib-9",
  "type": "Example",
  "number": "9.2",
  "title": "",
  "body": " The Fibonacci sequence would not be as well-studied as it is if it were only good for counting pairs of rabbits on a hypothetical island. Here's another instance which again results in the Fibonacci sequence. Let count the number of ways a checkerboard can be covered by tiles. Then and while the recurrence is just , since either the rightmost column of the checkerboard contains a vertical tile (and thus the rest of it can be tiled in ways) or the rightmost two columns contain two horizontal tiles (and thus the rest of it can be tiled in ways).  "
},
{
  "id": "ex_recurrence_binary-strings-no-11",
  "level": "2",
  "url": "s_recurrence_intro.html#ex_recurrence_binary-strings-no-11",
  "type": "Example",
  "number": "9.3",
  "title": "",
  "body": " string binary  Let count the number of binary strings of length in which no two consecutive characters are 's. Evidently, since both binary strings of length are good. Also, since only one of the four binary strings of length is bad, , namely . And , since of the binary strings of length , the following three strings are bad : More generally, it is easy to see that the sequence satisfies the recurrence , since we can partition the set of all good strings into two sets, those ending in and those ending in . If the last bit is , then in the first positions, we can have any good string of length . However, if the last bit is , then the preceding bit must be , and then in the first positions we can have any good string of length .  As a result, this sequence is just the Fibonacci numbers, albeit offset by position, i.e, .  "
},
{
  "id": "ex_recurrence_ternary-strings-no-20",
  "level": "2",
  "url": "s_recurrence_intro.html#ex_recurrence_ternary-strings-no-20",
  "type": "Example",
  "number": "9.4",
  "title": "",
  "body": " string ternary  Let count the number of ternary strings in which we never have occurring as a substring in two consecutive positions. Now and , as of the ternary strings of length , exactly one of them is bad. Now consider the set of all good strings grouped according to the last character. If this character is a or a , then the preceding characters can be any good string of length . However, if the last character is a , then the first characters form a good string of length which does not end in a . The number of such strings is . Accordingly, the recurrence is . In particular, .  "
},
{
  "id": "fig_geomregions",
  "level": "2",
  "url": "s_recurrence_intro.html#fig_geomregions",
  "type": "Figure",
  "number": "9.5",
  "title": "",
  "body": " Lines and Regions   "
},
{
  "id": "s_recurrence_linear",
  "level": "1",
  "url": "s_recurrence_linear.html",
  "type": "Section",
  "number": "9.2",
  "title": "Linear Recurrence Equations",
  "body": " Linear Recurrence Equations  What do all of the examples of the previous section have in common? The end result that we were able to achieve is a linear recurrence  recurrence equation  linear  , which tells us how we can compute the term of a sequence given some number of previous values (and perhaps also depending nonrecursively on as well, as in the last example). More precisely a recurrence equation is said to be linear when it has the following form where is an integer, are constants with , and is a function. (What we have just defined may more properly be called a linear recurrence equation with constant coefficients  recurrence equation  constant coefficients  , since we require the to be constants and prohibit them from depending on . We will avoid this additional descriptor, instead choosing to speak of linear recurrence equations with nonconstant coefficients  recurrence equation  nonconstant coefficients  in case we allow the to be functions of .) A linear equation is homogeneous  recurrence equation  homogeneous  if the function on the right hand side is the zero function. For example, the Fibonacci sequence  Fibonacci  sequence  satisfies the homogeneous linear recurrence equation Note that in this example, , and .  As a second example, the sequence in satisfies the homogeneous linear recurrence equation Again, with .  On the other hand, the sequence defined in satisfies the nonhomogeneous linear recurrence equation In this case, , and .  Our immediate goal is to develop techniques for solving linear recurrence equations of both homogeneous and nonhomogeneous types. We will be able to fully resolve the question of solving homogeneous linear recurrence equations and discuss a sort of guess-and-test method that can be used to tackle the more tricky nonhomogeneous type.     Match each recurrence equation below with the correct classification.       nonlinear      linear, homogeneous, nonconstant coefficients      linear, homogeneous, constant coefficients      linear, nonhomogeneous, constant coefficients      linear, nonhomogeneous, nonconstant coefficients      "
},
{
  "id": "s_recurrence_linear-2",
  "level": "2",
  "url": "s_recurrence_linear.html#s_recurrence_linear-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "linear recurrence linear constant coefficients nonconstant coefficients homogeneous "
},
{
  "id": "rq-recurrence_linear-matching",
  "level": "2",
  "url": "s_recurrence_linear.html#rq-recurrence_linear-matching",
  "type": "Reading Question",
  "number": "9.2.1",
  "title": "",
  "body": "  Match each recurrence equation below with the correct classification.       nonlinear      linear, homogeneous, nonconstant coefficients      linear, homogeneous, constant coefficients      linear, nonhomogeneous, constant coefficients      linear, nonhomogeneous, nonconstant coefficients    "
},
{
  "id": "s_recurrence_adv-ops",
  "level": "1",
  "url": "s_recurrence_adv-ops.html",
  "type": "Section",
  "number": "9.3",
  "title": "Advancement Operators",
  "body": " Advancement Operators   Much of our motivation for solving recurrence equations comes from an analogous problem in continuous mathematics differential equations. You don't need to have studied these beasts before in order to understand what we will do in the remainder of this chapter, but if you have, the motivation for how we tackle the problems will be clearer. As their name suggests, differential equations involve derivatives, which we will denote using operator notation by instead of the Leibniz notation . In our notation, the second derivative is , the third is , and so on. Consider the following example.    Solve the equation if .    Even if you've not studied differential equations, you should recognize that this question is really just asking us to find a function such that and its derivative is three times itself. Let's ignore the initial condition  for the moment and focus on the meat of the problem. What function, when you take its derivative, changes only by being multiplied by ? You should quickly think of the function , since , which has exactly the property we desire. Of course, for any constant , the function also satisfies this property, and this gives us the hook we need in order to satisfy our initial condition. We have and want to find such that . Now , so does the trick and the solution to this very simple differential equation is .    With differential equations, we apply the differential operator to differentiable (usually infinitely differentiable) functions. For recurrence equations, we consider the vector space whose elements are functions from the set of integers to the set of complex numbers. We then consider a function , called the advancement operator  operator  advancement  , and defined by .     advancement operator applied to  (By various tricks and sleight of hand, we can extend a sequence to be a function whose domain is all of , so this technique will apply to our problems.) More generally, when is a positive integer.   Let be defined by . Then we apply the advancement operator polynomial to with as follows:    As an analogue of , consider the following simple example involving the advancement operator.    Suppose that the sequence satisfies and for . Find an explicit formula for .    First, let's write the question in terms of the advancement operator. We can define a function for , and then the information given becomes that and What function has the property that when we advance it, , evaluate it at , it gives twice the value that it takes at ? The first function that comes into your mind should be . Of course, just like with our differential equation, for any constant , also has this property. This suggests that if we take , we're well on our way to solving our problem. Since we know that , we have , so . Therefore, for . This clearly satisfies our initial condition, and now we can check that it also satisfies our advancement operator equation:     Before moving on to develop general methods for solving advancement operator equations, let's say a word about why we keep talking in terms of operators and mentioned that we can view any sequence as a function with domain . If you've studied any linear algebra, you probably remember learning that the set of all infinitely-differentiable functions on the real line form a vector space and that differentiation is a linear operator on those functions. Our analogy to differential equations holds up just fine here, and functions from to form a vector space and is a linear operator on that space. We won't dwell on the technical aspects of this, and no knowledge of linear algebra is required to understand our development of techniques to solve recurrence equations. However, if you're interested in more placing everything we do on rigorous footing, we discuss this further in .    Constant Coefficient Equations   recurrence equation  constant coefficients   It is easy to see that a linear recurrence equation can be conveniently rewritten using a polynomial of the advancement operator: In , we intend that is an integer, is a fixed vector (function) from , and are constants with . Note that since , we can divide both sides by , , we may in fact assume that whenever convenient to do so.    Roots and Factors  The polynomial can be analyzed like any other polynomial. It has roots and factors, and although these may be difficult to determine, we know they exist. In fact, if the degree of is , we know that over the field of complex numbers, has roots, counting multiplicities. Note that since we assume that , all the roots of the polynomial are non-zero.    What's Special About Zero?  Why have we limited our attention to recurrence equations of the form where the constant term in is non-zero? Let's consider the alternative for a moment. Suppose that the constant term of is zero and that is a root of of multiplicity . Then where the constant term of is non-zero. And the equation can then be written as . To solve this equation, we consider instead the simpler problem . Then is a solution of the original problem if and only if the function defined by is a solution to the simpler problem. In other words, solutions to the original problem are just translations of solutions to the smaller one, so we will for the most part continue to focus on advancement operator equations where has nonzero constant term, since being able to solve such problems is all we need in order to solve the larger class of problems.  As a special case, consider the equation . This requires , , is just a translation of .      For this question, we consider the recurrence equation , which we have written in function notation rather than using the subscript-heavy sequence notation. Rewrite this recurrence equation as an advancement operator equation in the style of : .    In , the form we would have arrived at by getting all copies of on one side would be , so in that example.      "
},
{
  "id": "ex_recurrence_diffeq",
  "level": "2",
  "url": "s_recurrence_adv-ops.html#ex_recurrence_diffeq",
  "type": "Example",
  "number": "9.6",
  "title": "",
  "body": "  Solve the equation if .    Even if you've not studied differential equations, you should recognize that this question is really just asking us to find a function such that and its derivative is three times itself. Let's ignore the initial condition  for the moment and focus on the meat of the problem. What function, when you take its derivative, changes only by being multiplied by ? You should quickly think of the function , since , which has exactly the property we desire. Of course, for any constant , the function also satisfies this property, and this gives us the hook we need in order to satisfy our initial condition. We have and want to find such that . Now , so does the trick and the solution to this very simple differential equation is .   "
},
{
  "id": "s_recurrence_adv-ops-2-3",
  "level": "2",
  "url": "s_recurrence_adv-ops.html#s_recurrence_adv-ops-2-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "advancement operator "
},
{
  "id": "s_recurrence_adv-ops-2-4",
  "level": "2",
  "url": "s_recurrence_adv-ops.html#s_recurrence_adv-ops-2-4",
  "type": "Example",
  "number": "9.7",
  "title": "",
  "body": " Let be defined by . Then we apply the advancement operator polynomial to with as follows:   "
},
{
  "id": "ex_recurrence_adveq",
  "level": "2",
  "url": "s_recurrence_adv-ops.html#ex_recurrence_adveq",
  "type": "Example",
  "number": "9.8",
  "title": "",
  "body": "  Suppose that the sequence satisfies and for . Find an explicit formula for .    First, let's write the question in terms of the advancement operator. We can define a function for , and then the information given becomes that and What function has the property that when we advance it, , evaluate it at , it gives twice the value that it takes at ? The first function that comes into your mind should be . Of course, just like with our differential equation, for any constant , also has this property. This suggests that if we take , we're well on our way to solving our problem. Since we know that , we have , so . Therefore, for . This clearly satisfies our initial condition, and now we can check that it also satisfies our advancement operator equation:    "
},
{
  "id": "rq-recurrence_adv-ops_rewrite",
  "level": "2",
  "url": "s_recurrence_adv-ops.html#rq-recurrence_adv-ops_rewrite",
  "type": "Reading Question",
  "number": "9.3.4.1",
  "title": "",
  "body": "  For this question, we consider the recurrence equation , which we have written in function notation rather than using the subscript-heavy sequence notation. Rewrite this recurrence equation as an advancement operator equation in the style of : .    In , the form we would have arrived at by getting all copies of on one side would be , so in that example.    "
},
{
  "id": "s_recurrence_solving",
  "level": "1",
  "url": "s_recurrence_solving.html",
  "type": "Section",
  "number": "9.4",
  "title": "Solving advancement operator equations",
  "body": " Solving advancement operator equations   In this section, we will explore some ways of solving advancement operator equations. Some we will make up just for the sake of solving, while others will be drawn from the examples we developed in . Again, readers familiar with differential equations will notice many similarities between the techniques used here and those used to solve linear differential equations with constant coefficients, but we will not give any further examples to make those parallels explicit.    Homogeneous equations  Homogeneous equations, it will turn out, can be solved using very explicit methodology that will work any time we can find the roots of a polynomial. Let's start with another fairly straightforward example.    Find all solutions to the advancement operator equation     Before focusing on finding all solutions as we've been asked to do, let's just try to find some solution. We start by noticing that here . With factored like this, we realize that we've already solved part of this problem in ! In that example, the polynomial of we encountered was (while not explicitly stated as such there) . The solutions to are of the form . What happens if we try such a function here? We have so that is a solution to our given advancement operator equation. Of course, it can't be all of them. However, it's not hard to see now that has as a solution by the same reasoning that we used in . Since , we see right away that is also a solution of .  Now we've got two infinite families of solutions to . Do they give us all the solutions? It turns out that by combining them, they do in fact give all of the solutions. Consider what happens if we take and apply to it. We have   It's not all that hard to see that since gives a two-parameter family of solutions to , it gives us all the solutions, as we will show in detail in .    What happened in this example is far from a fluke. If you have an advancement operator equation of the form (the constant term of nonzero) and has degree , then the general solution  recurrence equation  general solution  of will be a -parameter family (in the previous example, our parameters are the constants and ) whose terms come from solutions to simpler equations arising from the factors of . We'll return to this thought in a little bit, but first let's look at another example.    string  ternary   Let's revisit the problem of enumerating ternary strings of length that do have occurring as a substring in two consecutive positions that we encountered in . There we saw that this number satisfies the recurrence equation and and . Before endeavoring to solve this, let's rewrite our recurrence equation as an advancement operator equation. This gives us   The roots of are . Following the approach of the previous example, our general solution is This probably looks suspicious; we're counting strings here, so needs to be a nonnegative integer, but the form we've given includes not just fractions but also square roots! You can mimic the verification we used in the previous example to see that this does satisfy . If that feels tedious, consider how you would use the binomial theorem to expand the terms in this expression for . With appropriate values for and , it seems plausible that we could get rid of the square roots and fractions. Because we have initial values for , we are able to solve for and here. Evaluating at and we get A little bit of computation gives so that      Find the general solution to the advancement operator equation     By now, you shouldn't be surprised that we immediately make use of the roots of and have that the solution is     By now, you should be able to see most of the pattern for solving homogeneous advancement operator equations. However, the examples we've considered thus far have all had one thing in common: the roots of were all distinct. Solving advancement operator equations in which this is not the case is not much harder than what we've done so far, but we do need to treat it as a distinct case.    recurrence equation  repeated roots    Find the general solution of the advancement operator equation     Here we have the repeated root problem that we mentioned a moment ago. We see immediately that is a solution to this equation, but that can't be all, as we mentioned earlier that we must have a -parameter family of solutions to such an equation. You might be tempted to try and , but then this is just , which is really just a single parameter, .  What can we do to resolve this conundrum? What if we tried ? Again, if you're familiar with differential equations, this would be the analogous thing to try, so let's give it a shot. Let's apply to this . We have Since satisfies our advancement operator equation, we have that the general solution is       Consider the recurrence equation with initial conditions , , , and . Find an explicit formula for .    We again start by writing the given recurrence equation as an advancement operator equation for a function : Factoring gives . Right away, we see that is a solution. The previous example should have you convinced that and are also solutions, and it's not likely to surprise you when we suggest trying as another solution. To verify that it works, we see Thus, the general solution is   Since we have initial conditions, we see that is a system of equations whose solution gives the values for the . Solving this system gives that the desired solution is       Nonhomogeneous equations   recurrence equations  nonhomogeneous   As we mentioned earlier, nonhomogeneous equations are a bit trickier than solving homogeneous equations, and sometimes our first attempt at a solution will not be successful but will suggest a better function to try. Before we're done, we'll revisit the problem of lines in the plane that we've considered a couple of times, but let's start with a more illustrative example.   Consider the advancement operator equation Let's try to find the general solution to this, since once we have that, we could find the specific solution corresponding to any given set of initial conditions.  When dealing with nonhomogeneous equations, we proceed in two steps. The reason for this will be made clear in , but let's focus on the method for the moment. Our first step is to find the general solution of the homogeneous equation corresponding to the given nonhomogeneous equation. In this case, the homogeneous equation we want to solve is for which by now you should be quite comfortable in rattling off a general solution of   Now for the process of actually dealing with the nonhomogeneity of the advancement operator equation. It actually suffices to find any solution of the nonhomogeneous equation, which we will call a particular solution .  recurrence equation  particular solution  Once we have a particular solution to the equation, the general solution is simply , where is the general solution to the homogeneous equation.  Finding a particular solution is a bit trickier than finding the general solution of the homogeneous equation. It's something for which you can develop an intuition by solving lots of problems, but even with a good intuition for what to try, you'll still likely find yourself having to try more than one thing on occasion in order to get a particular solution. What's the best starting point for this intuition? It turns out that the best thing to try is usually (and not terribly surprisingly) something that looks a lot like the right hand side of the equation, but we will want to include one or more new constants to help us actually get a solution. Thus, here we try . We have We want to be a solution to the nonhomogeneous equation, meaning that . This implies that we need to take . Now, as we mentioned earlier, the general solution is   We leave it to you to verify that this does satisfy the given equation.   You hopefully noticed that in the previous example, we said that the first guess to try for a particular solution looks a lot like right hand side of the equation, rather than exactly like. Our next example will show why we can't always take something that matches exactly.    Find the solution to the advancement operator equation if and .    The corresponding homogeneous equation here is the same as in the previous example, so its general solution is again . Thus, the real work here is finding a particular solution to the given advancement operator equation. Let's just try what our work on the previous example would suggest here, namely . Applying the advancement operator polynomial to then gives, uh, well, zero, since . Huh, that didn't work out so well. However, we can take a cue from how we tackled homogeneous advancement operator equations with repeated roots and introduce a factor of . Let's try . Now we have We want this to be equal to , so we have . Therefore, the general solution is   All that remains is to use our initial conditions to find the constants and . We have that they satisfy the following pair of equations: Solving these, we arrive at the desired solution, which is     What's the lesson we should take away from this example? When making a guess at a particular solution of a nonhomogeneous advancement operator equation, it does us no good to use any terms that are also solutions of the corresponding homogeneous equation, as they will be annihilated by the advancement operator polynomial. Let's see how this comes into play when finally resolving one of our longstanding examples.   We're now ready to answer the question of how many regions are determined by lines in the plane in general position as we discussed in . We have the recurrence equation which yields the nonhomogeneous advancement operator equation . As usual, we need to start with the general solution to the corresponding homogeneous equation. This solution is . Now our temptation is to try as a particular solution. However since the constant term there is a solution to the homogeneous equation, we need a bit more. Let's try increasing the powers of by , giving . Now we have This tells us that we need and , giving . The general solution is then   What is our initial condition here? Well, one line divides the plane into two regions, so . On the other hand, , so and thus is the number of regions into which the plane is divided by lines in general position.   We conclude this section with one more example showing how to deal with a nonhomogeneous advancement operator equation in which the right hand side is of mixed type .    Give the general solution of the advancement operator equation     Finding the solution to the corresponding homogeneous equation is getting pretty easy at this point, so just note that   What should we try as a particular solution? Fortunately, we have no interference from here. Our first instinct is probably to try . However, this won't actually work. (Try it. You wind up with a leftover constant term that you can't just make zero.) The key here is that if we use a term with a nonzero power of in it, we need to include the lower order powers as well (so long as they're not superfluous because of ). Thus, we try This gives We want this to be , so matching coefficients gives , , and . Thus, the general solution is         Solve the advancement operator equation with the initial condition . In the box below, type your answer in the form and briefly explain in couple of sentences how you arrived at this solution.       Let and be constants and define . Compute in two steps: First, compute and in the box below tell me what you get for this first step after simplifying. (Please do not put all your work in the box!) Second, take your answer from the first step and apply to it. In the box below, tell me what you get for this second step after simplifying.      "
},
{
  "id": "ex_recurrence_deg2",
  "level": "2",
  "url": "s_recurrence_solving.html#ex_recurrence_deg2",
  "type": "Example",
  "number": "9.9",
  "title": "",
  "body": "  Find all solutions to the advancement operator equation     Before focusing on finding all solutions as we've been asked to do, let's just try to find some solution. We start by noticing that here . With factored like this, we realize that we've already solved part of this problem in ! In that example, the polynomial of we encountered was (while not explicitly stated as such there) . The solutions to are of the form . What happens if we try such a function here? We have so that is a solution to our given advancement operator equation. Of course, it can't be all of them. However, it's not hard to see now that has as a solution by the same reasoning that we used in . Since , we see right away that is also a solution of .  Now we've got two infinite families of solutions to . Do they give us all the solutions? It turns out that by combining them, they do in fact give all of the solutions. Consider what happens if we take and apply to it. We have   It's not all that hard to see that since gives a two-parameter family of solutions to , it gives us all the solutions, as we will show in detail in .   "
},
{
  "id": "s_recurrence_solving_homogeneous-4",
  "level": "2",
  "url": "s_recurrence_solving.html#s_recurrence_solving_homogeneous-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "general solution "
},
{
  "id": "ex_recurrence_ternary-strings-no-20-solved",
  "level": "2",
  "url": "s_recurrence_solving.html#ex_recurrence_ternary-strings-no-20-solved",
  "type": "Example",
  "number": "9.10",
  "title": "",
  "body": "  string  ternary   Let's revisit the problem of enumerating ternary strings of length that do have occurring as a substring in two consecutive positions that we encountered in . There we saw that this number satisfies the recurrence equation and and . Before endeavoring to solve this, let's rewrite our recurrence equation as an advancement operator equation. This gives us   The roots of are . Following the approach of the previous example, our general solution is This probably looks suspicious; we're counting strings here, so needs to be a nonnegative integer, but the form we've given includes not just fractions but also square roots! You can mimic the verification we used in the previous example to see that this does satisfy . If that feels tedious, consider how you would use the binomial theorem to expand the terms in this expression for . With appropriate values for and , it seems plausible that we could get rid of the square roots and fractions. Because we have initial values for , we are able to solve for and here. Evaluating at and we get A little bit of computation gives so that   "
},
{
  "id": "s_recurrence_solving_homogeneous-6",
  "level": "2",
  "url": "s_recurrence_solving.html#s_recurrence_solving_homogeneous-6",
  "type": "Example",
  "number": "9.11",
  "title": "",
  "body": "  Find the general solution to the advancement operator equation     By now, you shouldn't be surprised that we immediately make use of the roots of and have that the solution is    "
},
{
  "id": "ex_recurrence_deg2-repeated",
  "level": "2",
  "url": "s_recurrence_solving.html#ex_recurrence_deg2-repeated",
  "type": "Example",
  "number": "9.12",
  "title": "",
  "body": "  recurrence equation  repeated roots    Find the general solution of the advancement operator equation     Here we have the repeated root problem that we mentioned a moment ago. We see immediately that is a solution to this equation, but that can't be all, as we mentioned earlier that we must have a -parameter family of solutions to such an equation. You might be tempted to try and , but then this is just , which is really just a single parameter, .  What can we do to resolve this conundrum? What if we tried ? Again, if you're familiar with differential equations, this would be the analogous thing to try, so let's give it a shot. Let's apply to this . We have Since satisfies our advancement operator equation, we have that the general solution is    "
},
{
  "id": "ex_recurrence_deg4-repeated",
  "level": "2",
  "url": "s_recurrence_solving.html#ex_recurrence_deg4-repeated",
  "type": "Example",
  "number": "9.13",
  "title": "",
  "body": "  Consider the recurrence equation with initial conditions , , , and . Find an explicit formula for .    We again start by writing the given recurrence equation as an advancement operator equation for a function : Factoring gives . Right away, we see that is a solution. The previous example should have you convinced that and are also solutions, and it's not likely to surprise you when we suggest trying as another solution. To verify that it works, we see Thus, the general solution is   Since we have initial conditions, we see that is a system of equations whose solution gives the values for the . Solving this system gives that the desired solution is    "
},
{
  "id": "s_recurrence_solving_nonhomogeneous-4",
  "level": "2",
  "url": "s_recurrence_solving.html#s_recurrence_solving_nonhomogeneous-4",
  "type": "Example",
  "number": "9.14",
  "title": "",
  "body": " Consider the advancement operator equation Let's try to find the general solution to this, since once we have that, we could find the specific solution corresponding to any given set of initial conditions.  When dealing with nonhomogeneous equations, we proceed in two steps. The reason for this will be made clear in , but let's focus on the method for the moment. Our first step is to find the general solution of the homogeneous equation corresponding to the given nonhomogeneous equation. In this case, the homogeneous equation we want to solve is for which by now you should be quite comfortable in rattling off a general solution of   Now for the process of actually dealing with the nonhomogeneity of the advancement operator equation. It actually suffices to find any solution of the nonhomogeneous equation, which we will call a particular solution .  recurrence equation  particular solution  Once we have a particular solution to the equation, the general solution is simply , where is the general solution to the homogeneous equation.  Finding a particular solution is a bit trickier than finding the general solution of the homogeneous equation. It's something for which you can develop an intuition by solving lots of problems, but even with a good intuition for what to try, you'll still likely find yourself having to try more than one thing on occasion in order to get a particular solution. What's the best starting point for this intuition? It turns out that the best thing to try is usually (and not terribly surprisingly) something that looks a lot like the right hand side of the equation, but we will want to include one or more new constants to help us actually get a solution. Thus, here we try . We have We want to be a solution to the nonhomogeneous equation, meaning that . This implies that we need to take . Now, as we mentioned earlier, the general solution is   We leave it to you to verify that this does satisfy the given equation.  "
},
{
  "id": "s_recurrence_solving_nonhomogeneous-6",
  "level": "2",
  "url": "s_recurrence_solving.html#s_recurrence_solving_nonhomogeneous-6",
  "type": "Example",
  "number": "9.15",
  "title": "",
  "body": "  Find the solution to the advancement operator equation if and .    The corresponding homogeneous equation here is the same as in the previous example, so its general solution is again . Thus, the real work here is finding a particular solution to the given advancement operator equation. Let's just try what our work on the previous example would suggest here, namely . Applying the advancement operator polynomial to then gives, uh, well, zero, since . Huh, that didn't work out so well. However, we can take a cue from how we tackled homogeneous advancement operator equations with repeated roots and introduce a factor of . Let's try . Now we have We want this to be equal to , so we have . Therefore, the general solution is   All that remains is to use our initial conditions to find the constants and . We have that they satisfy the following pair of equations: Solving these, we arrive at the desired solution, which is    "
},
{
  "id": "ex_recurrence_lines-solved",
  "level": "2",
  "url": "s_recurrence_solving.html#ex_recurrence_lines-solved",
  "type": "Example",
  "number": "9.16",
  "title": "",
  "body": " We're now ready to answer the question of how many regions are determined by lines in the plane in general position as we discussed in . We have the recurrence equation which yields the nonhomogeneous advancement operator equation . As usual, we need to start with the general solution to the corresponding homogeneous equation. This solution is . Now our temptation is to try as a particular solution. However since the constant term there is a solution to the homogeneous equation, we need a bit more. Let's try increasing the powers of by , giving . Now we have This tells us that we need and , giving . The general solution is then   What is our initial condition here? Well, one line divides the plane into two regions, so . On the other hand, , so and thus is the number of regions into which the plane is divided by lines in general position.  "
},
{
  "id": "s_recurrence_solving_nonhomogeneous-10",
  "level": "2",
  "url": "s_recurrence_solving.html#s_recurrence_solving_nonhomogeneous-10",
  "type": "Example",
  "number": "9.17",
  "title": "",
  "body": "  Give the general solution of the advancement operator equation     Finding the solution to the corresponding homogeneous equation is getting pretty easy at this point, so just note that   What should we try as a particular solution? Fortunately, we have no interference from here. Our first instinct is probably to try . However, this won't actually work. (Try it. You wind up with a leftover constant term that you can't just make zero.) The key here is that if we use a term with a nonzero power of in it, we need to include the lower order powers as well (so long as they're not superfluous because of ). Thus, we try This gives We want this to be , so matching coefficients gives , , and . Thus, the general solution is    "
},
{
  "id": "rq-recurrence_solving-solve-plus-4",
  "level": "2",
  "url": "s_recurrence_solving.html#rq-recurrence_solving-solve-plus-4",
  "type": "Reading Question",
  "number": "9.4.3.1",
  "title": "",
  "body": "  Solve the advancement operator equation with the initial condition . In the box below, type your answer in the form and briefly explain in couple of sentences how you arrived at this solution.    "
},
{
  "id": "rq-recurrence_solving-solve-plus-deg-two",
  "level": "2",
  "url": "s_recurrence_solving.html#rq-recurrence_solving-solve-plus-deg-two",
  "type": "Reading Question",
  "number": "9.4.3.2",
  "title": "",
  "body": "  Let and be constants and define . Compute in two steps: First, compute and in the box below tell me what you get for this first step after simplifying. (Please do not put all your work in the box!) Second, take your answer from the first step and apply to it. In the box below, tell me what you get for this second step after simplifying.    "
},
{
  "id": "s_recurrence_rigorous",
  "level": "1",
  "url": "s_recurrence_rigorous.html",
  "type": "Section",
  "number": "9.5",
  "title": "Formalizing our approach to recurrence equations",
  "body": " Formalizing our approach to recurrence equations   So far, our approach to solving recurrence equations has been based on intuition, and we've not given a lot of explanation for why the solutions we've given have been the general solution. In this section, we endeavor to remedy this. Some familiarity with the language of linear algebra will be useful for the remainder of this section, but it is not essential.  Our techniques for solving recurrence equations have their roots in a fundamentally important concept in mathematics, the notion of a vector space. Recall that a vector space To be more complete, we should say that we are talking about a vector space over the field of real numbers, but in our course, these are the only kind of vector spaces we will consider. For this reason, we just use the short phrase vector space . consists of a set of elements called vectors ; in addition, there is a binary operation called addition with the sum of vectors and denoted by ; furthermore, there is an operation called scalar multiplication which combines a scalar (real number) and a vector to form a product denoted . These operations satisfy the following properties:  for every .  , for every .  There is a vector called zero and denoted so that for every . Note: We are again overloading an operator and using the symbol for something other than a number.  For every element , there is an element , called the additive inverse of and denoted so that . This property enables us to define subtraction , , .  for every .  , for every and every .  for every and every .  , for every and every .    When is a vector space, a function is called an linear operator operator linear , or just operator for short, when and . When is an operator, it is customary to write rather than , saving a set of parentheses. The set of all operators over a vector space is itself a vector space with addition defined by and scalar multiplication by .  In this chapter, we focus on the real vector space consisting of all functions of the form . Addition is defined by and scalar multiplication is defined by .    The Principal Theorem  Here is the basic theorem about solving recurrence equations (stated in terms of advancement operator equations) and while we won't prove the full result, we will provide enough of an outline where it shouldn't be too difficult to fill in the missing details.    Let be a positive integer , and let be constants with . Then the set of all solutions to the homogeneous linear equation is a -dimensional subspace of .    The conclusion that the set of all solutions is a subspace of is immediate, since What takes a bit of work is to show that is a -dimensional subspace. But once this is done, then to solve the advancement operator equation given in the form of , it suffices to find a basis for the vector space . Every solution is just a linear combination of basis vectors. In the next several subsections, we outline how this goal can be achieved.    The Starting Case  The development proceeds by induction (surprise!) with the case being the base case. In this case, we study a simple equation of the form . Dividing by and rewriting using subtraction rather than addition, it is clear that we are just talking about an equation of the form where .    Let , and let be a solution to the operator equation . If , then for every .    We first show that for every , by induction on . The base case is trivial since . Now suppose that for some non-negative integer . Then implies that , , A very similar argument shows that for every .      Consider a nonhomogeneous operator equation of the form with , and let be the subspace of consisting of all solutions to the corresponding homogeneous equation If is a solution to , then every solution to has the form where .    Let be a solution of , and let . Then This implies that and that so that all solutions to do in fact have the desired form.    Using the preceding two results, we can now provide an outline of the inductive step in the proof of , at least in the case where the polynomial in the advancement operator has distinct roots.    Consider the following advancement operator equation with distinct non-zero constants. Then every solution to has the form     The case is . Now suppose we have established the theorem for some positive integer and consider the case . Rewrite as By the inductive hypothesis, it follows that if is a solution to , then is also a solution to the nonhomogeneous equation To find a particular solution to , we look for a solution having the form On the other hand, a simple calculation shows that for each , we have so it suffices to choose so that , for each . This can be done since is distinct from for .  Now we have a particular solution . Next we consider the corresponding homogeneous equation . The general solution to this equation has the form . It follows that every solution to the original equation has the form which is exactly what we want!      Repeated Roots  It is straightforward to modify the proof given in the preceding section to obtain the following result. We leave the details as an exercise.    Let and consider the equation Then the general solution to has the following form       The General Case  Combining the results in the preceding sections, we can quickly write the general solution of any homogeneous equation of the form  provided we can factor the polynomial . Note that in general, this solution takes us into the field of complex numbers , since the roots of a polynomial with real coefficients are sometimes complex numbers with non-zero imaginary parts.  We close this section with one more example to illustrate how quickly we can read off the general solution of a homogeneous advancement operator equation , provided that is factored.   Consider the advancement operator equation Then every solution has the following form     "
},
{
  "id": "s_recurrence_rigorous-2-2",
  "level": "2",
  "url": "s_recurrence_rigorous.html#s_recurrence_rigorous-2-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "vectors addition scalar multiplication zero additive inverse subtraction "
},
{
  "id": "s_recurrence_rigorous-2-3",
  "level": "2",
  "url": "s_recurrence_rigorous.html#s_recurrence_rigorous-2-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "linear operator operator "
},
{
  "id": "thm_advance",
  "level": "2",
  "url": "s_recurrence_rigorous.html#thm_advance",
  "type": "Theorem",
  "number": "9.18",
  "title": "",
  "body": "  Let be a positive integer , and let be constants with . Then the set of all solutions to the homogeneous linear equation is a -dimensional subspace of .   "
},
{
  "id": "s_recurrence_rigorous_principal-4",
  "level": "2",
  "url": "s_recurrence_rigorous.html#s_recurrence_rigorous_principal-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "basis "
},
{
  "id": "lem_base",
  "level": "2",
  "url": "s_recurrence_rigorous.html#lem_base",
  "type": "Lemma",
  "number": "9.19",
  "title": "",
  "body": "  Let , and let be a solution to the operator equation . If , then for every .    We first show that for every , by induction on . The base case is trivial since . Now suppose that for some non-negative integer . Then implies that , , A very similar argument shows that for every .   "
},
{
  "id": "lem_particular",
  "level": "2",
  "url": "s_recurrence_rigorous.html#lem_particular",
  "type": "Lemma",
  "number": "9.20",
  "title": "",
  "body": "  Consider a nonhomogeneous operator equation of the form with , and let be the subspace of consisting of all solutions to the corresponding homogeneous equation If is a solution to , then every solution to has the form where .    Let be a solution of , and let . Then This implies that and that so that all solutions to do in fact have the desired form.   "
},
{
  "id": "s_recurrence_rigorous_start-6",
  "level": "2",
  "url": "s_recurrence_rigorous.html#s_recurrence_rigorous_start-6",
  "type": "Theorem",
  "number": "9.21",
  "title": "",
  "body": "  Consider the following advancement operator equation with distinct non-zero constants. Then every solution to has the form     The case is . Now suppose we have established the theorem for some positive integer and consider the case . Rewrite as By the inductive hypothesis, it follows that if is a solution to , then is also a solution to the nonhomogeneous equation To find a particular solution to , we look for a solution having the form On the other hand, a simple calculation shows that for each , we have so it suffices to choose so that , for each . This can be done since is distinct from for .  Now we have a particular solution . Next we consider the corresponding homogeneous equation . The general solution to this equation has the form . It follows that every solution to the original equation has the form which is exactly what we want!   "
},
{
  "id": "lem_rr",
  "level": "2",
  "url": "s_recurrence_rigorous.html#lem_rr",
  "type": "Lemma",
  "number": "9.22",
  "title": "",
  "body": "  Let and consider the equation Then the general solution to has the following form    "
},
{
  "id": "s_recurrence_rigorous_general-4",
  "level": "2",
  "url": "s_recurrence_rigorous.html#s_recurrence_rigorous_general-4",
  "type": "Example",
  "number": "9.23",
  "title": "",
  "body": " Consider the advancement operator equation Then every solution has the following form   "
},
{
  "id": "s_recurrence_genfunction",
  "level": "1",
  "url": "s_recurrence_genfunction.html",
  "type": "Section",
  "number": "9.6",
  "title": "Using generating functions to solve recurrences",
  "body": " Using generating functions to solve recurrences  generating function and solving recurrences  The approach we have seen thus far in this chapter is not the only way to solve recurrence equations. Additionally, it really only applies to linear recurrence equations with constant coefficients. In the remainder of the chapter, we will look at some examples of how generating functions can be used as another tool for solving recurrence equations. In this section, our focus will be on linear recurrence equations. In , we will see how generating functions can solve a nonlinear recurrence.  Our first example is the homogeneous recurrence that corresponds to the advancement operator equation in .   Consider the recurrence equation for the sequence with and . This sequence has generating function Now consider for a moment what the function looks like. It has as the coefficient on . Similarly, in the function , the coefficient on is .  What is our point in all of this? Well, if we add them all up, notice what happens. The coefficient on becomes , which is because of the recurrence equation! Now let's see how this all lines up: When we add the left-hand side, we get . On the right-hand side, the coefficient on for is because of the recurrence equation. However, we are left with , using the initial conditions. Thus, we have the equation or . This is a generating function that we can attack using partial fractions in SageMath:   This shows us that . From here, we read off as the coefficient on and have .   Although there's a bit more work involved, this method can be used to solve nonhomogeneous recurrence equations as well, as the next example illustrates.   The recurrence equation is nonhomogeneous. Let and . This time, to solve the recurrence, we start by multiplying both sides by . This gives the equation If we sum this over all values of , we have The right-hand side you should readily recognize as being almost equal to . We are missing the and terms, however, so must subtract them from the rational function form of the series. On the left-hand side, however, we need to do a bit more work.  The first sum is just missing the first two terms of the series, so we can replace it by , where . The second sum is almost , except it's missing the first term. Thus, it's equal to . The sum in the final term is simply . Thus, the equation can be rewritten as A little bit of algebra then gets us to the generating function This generating function can be expanded using partial fractions in SageMath:   Therefore, using for the second rational function, we have . From this generating function, we can read off that .   The recurrence equations of the two examples in this section can both be solved using the techniques we studied earlier in the chapter. One potential benefit to the generating function approach for nonhomogeneous equations is that it does not require determining an appropriate form for the particular solution. However, the method of generating functions often requires that the resulting generating function be expanded using partial fractions. Both approaches have positives and negatives, so unless instructed to use a specific method, you should choose whichever seems most appropriate for a given situation. In the next section, we will see a recurrence equation that is most easily solved using generating functions because it is nonlinear.  "
},
{
  "id": "ex_recurrence_gf-homog",
  "level": "2",
  "url": "s_recurrence_genfunction.html#ex_recurrence_gf-homog",
  "type": "Example",
  "number": "9.24",
  "title": "",
  "body": " Consider the recurrence equation for the sequence with and . This sequence has generating function Now consider for a moment what the function looks like. It has as the coefficient on . Similarly, in the function , the coefficient on is .  What is our point in all of this? Well, if we add them all up, notice what happens. The coefficient on becomes , which is because of the recurrence equation! Now let's see how this all lines up: When we add the left-hand side, we get . On the right-hand side, the coefficient on for is because of the recurrence equation. However, we are left with , using the initial conditions. Thus, we have the equation or . This is a generating function that we can attack using partial fractions in SageMath:   This shows us that . From here, we read off as the coefficient on and have .  "
},
{
  "id": "ex_recurrence_gf-nonhomog",
  "level": "2",
  "url": "s_recurrence_genfunction.html#ex_recurrence_gf-nonhomog",
  "type": "Example",
  "number": "9.25",
  "title": "",
  "body": " The recurrence equation is nonhomogeneous. Let and . This time, to solve the recurrence, we start by multiplying both sides by . This gives the equation If we sum this over all values of , we have The right-hand side you should readily recognize as being almost equal to . We are missing the and terms, however, so must subtract them from the rational function form of the series. On the left-hand side, however, we need to do a bit more work.  The first sum is just missing the first two terms of the series, so we can replace it by , where . The second sum is almost , except it's missing the first term. Thus, it's equal to . The sum in the final term is simply . Thus, the equation can be rewritten as A little bit of algebra then gets us to the generating function This generating function can be expanded using partial fractions in SageMath:   Therefore, using for the second rational function, we have . From this generating function, we can read off that .  "
},
{
  "id": "s_recurrence_rubots",
  "level": "1",
  "url": "s_recurrence_rubots.html",
  "type": "Section",
  "number": "9.7",
  "title": "Solving a nonlinear recurrence",
  "body": " Solving a nonlinear recurrence  In this section, we will use generating functions to enumerate the a certain type of trees. In doing this, we will see how generating functions can be used in solving a nonlinear recurrence equation recurrence equation nonlinear . We will also make a connection to a counting sequence we encountered back in . To do all of this, we must introduce a bit of terminology. A tree is rooted tree rooted if we have designated a special vertex called its root . We will always draw our trees with the root at the top and all other vertices below it. An unlabeled tree tree unlabeled is one in which we do not make distinctions based upon names given to the vertices. For our purposes, a binary tree tree binary is one in which each vertex has or children, and an ordered tree tree ordered is one in which the children of a vertex have some ordering (first, second, third, ). Since we will be focusing on rooted, unlabeled, binary, ordered trees (RUBOTs for short), we will call the two children of vertices that have children the left and right children.  In , we show the rooted, unlabeled, binary, ordered trees with leaves for .   The RUBOTs with leaves for    Let be the generating function for the sequence where is the number of RUBOTs with leaves. (We take for convenience.) Then we can see from that . But what are the remaining coefficients? Let's see how we can break a RUBOT with leaves down into a combination of two smaller RUBOTs to see if we can express in terms of some for . When we look at a RUBOT with leaves, we notice that the root vertex must have two children. Those children can be viewed as root nodes of smaller RUBOTs, say the left child roots a RUBOT with leaves, meaning that the right child roots a RUBOT with leaves. Since there are possible sub-RUBOTs for the left child and sub-RUBOTs for the right child, there are a total of RUBOTs in which the root's left child has leaves on its sub-RUBOT. We can do this for any , giving us that (This is valid since .) Since , we can actually write this as   Let's look at the square of the generating function . By , we have But now we see from our recursion above that the coefficient on in is nothing but for . All we're missing is the term, so adding it in gives us that Now this is a quadratic equation in , so we can solve for and have Hence, we can use to expand . To do so, we use the following lemma. Its proof is nearly identical to that of , and is thus omitted.    For each ,     Now we see that Since we need , we take the minus option from the plus-or-minus in the quadratic formula and thus have the following theorem.    The generating function for the number of rooted, unlabeled, binary, ordered trees with leaves is     Notice that is a Catalan number, which we first encountered in , where we were counting lattice paths that did not cross the diagonal line . (The coefficient is the Catalan number we called in .)  "
},
{
  "id": "s_recurrence_rubots-2",
  "level": "2",
  "url": "s_recurrence_rubots.html#s_recurrence_rubots-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "rooted root unlabeled tree binary tree ordered tree left right "
},
{
  "id": "fig_rubots",
  "level": "2",
  "url": "s_recurrence_rubots.html#fig_rubots",
  "type": "Figure",
  "number": "9.26",
  "title": "",
  "body": " The RUBOTs with leaves for   "
},
{
  "id": "l_half-binomial",
  "level": "2",
  "url": "s_recurrence_rubots.html#l_half-binomial",
  "type": "Lemma",
  "number": "9.27",
  "title": "",
  "body": "  For each ,    "
},
{
  "id": "thm_catalan-genfunction",
  "level": "2",
  "url": "s_recurrence_rubots.html#thm_catalan-genfunction",
  "type": "Theorem",
  "number": "9.28",
  "title": "",
  "body": "  The generating function for the number of rooted, unlabeled, binary, ordered trees with leaves is    "
},
{
  "id": "s_recurrence_discussion",
  "level": "1",
  "url": "s_recurrence_discussion.html",
  "type": "Section",
  "number": "9.8",
  "title": "Discussion",
  "body": " Discussion  Yolanda took a sip of coffee I'm glad I paid attention when we were studying vector spaces, bases, and dimension. All this stuff about solutions for recurrence equations made complete sense. And I can really understand why the professor was making a big deal out of factoring. We saw it our first semester when we were learning about partial fractions in calculus. And we saw it again with the differential equations stuff. Isn't it really neat to see how it all fits together? All this enthusiasm was too much for Alice who was not having a good day. Bob was more sympathetic, saying Except for the detail about zero as a root of an advancement operator polynomial, I was ok with this chapter. Xing said Here we learned a precise approach that depended only on factoring. I've been reading on the web and I see that there have been some recent breakthroughs on factoring. Bob jumped back in But even if you can factor like crazy, if you have a large degree polynomial in the advancement operator equation, then you will have lots of initial conditions. This might be a second major hurdle. Dave mumbled Just do the factoring. The rest is easy. Carlos again was quiet but he knew that Dave was right. Solving big systems of linear equations is relatively easy. The challenge is in the factoring stage.  Despite thinking the material of this chapter was interesting, Bob also wondered if they really needed all of this machinery. Defining a recursive function is easy in almost all programming languages, so why not just use a computer to calculate the values you need? The history of how recursion made its way into ALGOL (and therefore most modern programming languages) involved some intrigue. Maarten van Emden recounts this in a blog post entitled How recursion got into programming: a tale of intrigue, betrayal, and advanced programming-language semantics . Xing started to remark that the techniques of this chapter could provide a good way to understand the growth rate of recursive functions in terms of the big Oh notation of , but Alice interrupted to propose a programming experiment as something that would raise her spirits. (The chance to prove Bob wrong was probably more motivational than the chance to do some coding, but she didn't want to be too mean.)  The group decided to take a look at the recurrence in , which they immediately wrote as a recursive function defined on the nonnegative integers by Alice grabbed her computer and implemented this in SageMath and computed a few test values.   She then defined a second function s that was the explicit (nonrecursive) solution from and checked that values matched.   Is this going somewhere? , Bob asked impatiently. For these values, both r and s seemed to be giving them answers equally quickly. Dave said he'd heard something about a timeit command in SageMath that would allow them to compare run times and comandeered Alice's keyboard to type:   This finally got Bob's attention, since it s seems to be taking a relatively constant time to run even as increases, while r seems to be taking about 10 times as long to run for each increase of 5 in the value of . As a final test, they execute the SageMath code below, which calculates s(100) almost instantly. On the other hand, it seems like getting a refill on their coffee would be a good way to pass the time waiting on r(40) .   "
},
{
  "id": "s_recurrence_exercises",
  "level": "1",
  "url": "s_recurrence_exercises.html",
  "type": "Exercises",
  "number": "9.9",
  "title": "Exercises",
  "body": "   Write each of the following recurrence equations as advancement operator equations.              Solve the recurrence equation if and (Yes, we specify a value for but not for ).      Find the general solution of the recurrence equation .      Solve the recurrence equation if , , and .      Find an explicit formula for the Fibonacci number . (See .)      For each advancement operator equation below, give its general solution.              Solve the advancement operator equation if and .      Give the general solution to each advancement operator equation below.           For each nonhomogeneous advancement operator equation, find its general solution.                  Find and solve a recurrence equation for the number of ternary strings of length that do not contain as a substring.      There is a famous puzzle called the Towers of Hanoi that consists of three pegs and circular discs, all of different sizes. The discs start on the leftmost peg, with the largest disc on the bottom, the second largest on top of it, and so on, up to the smallest disc on top. The goal is to move the discs so that they are stacked in this same order on the rightmost peg. However, you are allowed to move only one disc at a time, and you are never able to place a larger disc on top of a smaller disc. Let denote the fewest moves (a move being taking a disc from one peg and placing it onto another) in which you can accomplish the goal. Determine an explicit formula for .      A valid database identifier of length can be constructed in three ways:  Starting with and followed by any valid identifier of length .  Starting with one of the two-character strings , , , , , or and followed by any valid identifier of length .  Starting with and followed by any ternary ( ) string of length .    Find a recurrence for the number of database identifiers of length and then solve your recurrence to obtain an explicit formula for . (You may consider the empty string of length a valid database identifier, making . This will simplify the arithmetic.)      Let be the number of ways to tile a rectangle using tiles and -tiles. An -tile is a tile with the upper-right square deleted. (An tile may be rotated so that the missing square appears in any of the four positions.) Find a recursive formula for along with enough initial conditions to get the recursion started. Use this recursive formula to find a closed formula for .      Prove about advancement operator equations with repeated roots.      Use generating functions to solve the recurrence equation for with and .      Let , , and . Use generating functions to solve the recurrence equation for .      Let , , and . Use generating functions to solve the recurrence equation for .      Use generating functions to find a closed formula for the Fibonacci numbers .      How many rooted, unlabeled, binary, ordered, trees (RUBOTs) with leaves are there? Draw distinct RUBOTs with leaves.      In this chapter, we developed a generating function for the Catalan numbers. We first encountered the Catalan numbers in , where we learned they count certain lattice paths. Develop a recurrence for the number of lattice paths similar to the recurrence for RUBOTs by thinking of ways to break up a lattice path from to that does not cross the diagonal into two smaller lattice paths of this type.    "
},
{
  "id": "s_recurrence_exercises-1",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-1",
  "type": "Exercise",
  "number": "9.9.1",
  "title": "",
  "body": "  Write each of the following recurrence equations as advancement operator equations.           "
},
{
  "id": "s_recurrence_exercises-2",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-2",
  "type": "Exercise",
  "number": "9.9.2",
  "title": "",
  "body": "  Solve the recurrence equation if and (Yes, we specify a value for but not for ).   "
},
{
  "id": "s_recurrence_exercises-3",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-3",
  "type": "Exercise",
  "number": "9.9.3",
  "title": "",
  "body": "  Find the general solution of the recurrence equation .   "
},
{
  "id": "s_recurrence_exercises-4",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-4",
  "type": "Exercise",
  "number": "9.9.4",
  "title": "",
  "body": "  Solve the recurrence equation if , , and .   "
},
{
  "id": "s_recurrence_exercises-5",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-5",
  "type": "Exercise",
  "number": "9.9.5",
  "title": "",
  "body": "  Find an explicit formula for the Fibonacci number . (See .)   "
},
{
  "id": "s_recurrence_exercises-6",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-6",
  "type": "Exercise",
  "number": "9.9.6",
  "title": "",
  "body": "  For each advancement operator equation below, give its general solution.           "
},
{
  "id": "s_recurrence_exercises-7",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-7",
  "type": "Exercise",
  "number": "9.9.7",
  "title": "",
  "body": "  Solve the advancement operator equation if and .   "
},
{
  "id": "s_recurrence_exercises-8",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-8",
  "type": "Exercise",
  "number": "9.9.8",
  "title": "",
  "body": "  Give the general solution to each advancement operator equation below.        "
},
{
  "id": "s_recurrence_exercises-9",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-9",
  "type": "Exercise",
  "number": "9.9.9",
  "title": "",
  "body": "  For each nonhomogeneous advancement operator equation, find its general solution.               "
},
{
  "id": "s_recurrence_exercises-10",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-10",
  "type": "Exercise",
  "number": "9.9.10",
  "title": "",
  "body": "  Find and solve a recurrence equation for the number of ternary strings of length that do not contain as a substring.   "
},
{
  "id": "s_recurrence_exercises-11",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-11",
  "type": "Exercise",
  "number": "9.9.11",
  "title": "",
  "body": "  There is a famous puzzle called the Towers of Hanoi that consists of three pegs and circular discs, all of different sizes. The discs start on the leftmost peg, with the largest disc on the bottom, the second largest on top of it, and so on, up to the smallest disc on top. The goal is to move the discs so that they are stacked in this same order on the rightmost peg. However, you are allowed to move only one disc at a time, and you are never able to place a larger disc on top of a smaller disc. Let denote the fewest moves (a move being taking a disc from one peg and placing it onto another) in which you can accomplish the goal. Determine an explicit formula for .   "
},
{
  "id": "s_recurrence_exercises-12",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-12",
  "type": "Exercise",
  "number": "9.9.12",
  "title": "",
  "body": "  A valid database identifier of length can be constructed in three ways:  Starting with and followed by any valid identifier of length .  Starting with one of the two-character strings , , , , , or and followed by any valid identifier of length .  Starting with and followed by any ternary ( ) string of length .    Find a recurrence for the number of database identifiers of length and then solve your recurrence to obtain an explicit formula for . (You may consider the empty string of length a valid database identifier, making . This will simplify the arithmetic.)   "
},
{
  "id": "s_recurrence_exercises-13",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-13",
  "type": "Exercise",
  "number": "9.9.13",
  "title": "",
  "body": "  Let be the number of ways to tile a rectangle using tiles and -tiles. An -tile is a tile with the upper-right square deleted. (An tile may be rotated so that the missing square appears in any of the four positions.) Find a recursive formula for along with enough initial conditions to get the recursion started. Use this recursive formula to find a closed formula for .   "
},
{
  "id": "s_recurrence_exercises-14",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-14",
  "type": "Exercise",
  "number": "9.9.14",
  "title": "",
  "body": "  Prove about advancement operator equations with repeated roots.   "
},
{
  "id": "ex_recurrence_gen-fn",
  "level": "2",
  "url": "s_recurrence_exercises.html#ex_recurrence_gen-fn",
  "type": "Exercise",
  "number": "9.9.15",
  "title": "",
  "body": "  Use generating functions to solve the recurrence equation for with and .   "
},
{
  "id": "s_recurrence_exercises-16",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-16",
  "type": "Exercise",
  "number": "9.9.16",
  "title": "",
  "body": "  Let , , and . Use generating functions to solve the recurrence equation for .   "
},
{
  "id": "s_recurrence_exercises-17",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-17",
  "type": "Exercise",
  "number": "9.9.17",
  "title": "",
  "body": "  Let , , and . Use generating functions to solve the recurrence equation for .   "
},
{
  "id": "s_recurrence_exercises-18",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-18",
  "type": "Exercise",
  "number": "9.9.18",
  "title": "",
  "body": "  Use generating functions to find a closed formula for the Fibonacci numbers .   "
},
{
  "id": "s_recurrence_exercises-19",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-19",
  "type": "Exercise",
  "number": "9.9.19",
  "title": "",
  "body": "  How many rooted, unlabeled, binary, ordered, trees (RUBOTs) with leaves are there? Draw distinct RUBOTs with leaves.   "
},
{
  "id": "s_recurrence_exercises-20",
  "level": "2",
  "url": "s_recurrence_exercises.html#s_recurrence_exercises-20",
  "type": "Exercise",
  "number": "9.9.20",
  "title": "",
  "body": "  In this chapter, we developed a generating function for the Catalan numbers. We first encountered the Catalan numbers in , where we learned they count certain lattice paths. Develop a recurrence for the number of lattice paths similar to the recurrence for RUBOTs by thinking of ways to break up a lattice path from to that does not cross the diagonal into two smaller lattice paths of this type.   "
},
{
  "id": "s_probability_intro",
  "level": "1",
  "url": "s_probability_intro.html",
  "type": "Section",
  "number": "10.1",
  "title": "An Introduction to Probability",
  "body": " An Introduction to Probability  We continue with an informal discussion intended to motivate the more structured development that will follow. Consider the spinner shown in . Suppose we give it a good thwack so that the arrow goes round and round. We then record the number of the region in which the pointer comes to rest. Then observers, none of whom have studied combinatorics, might make the following comments:   A Spinner for Games of Chance      The odds of landing in region are the same as those for landing in region .  You are twice as likely to land in region as in region .  When you land in an odd numbered region, then 60% of the time, it will be in region .    We will now develop a more formal framework that will enable us to make such discussions far more precise. We will also see whether Alice is being entirely fair to Bob in her proposed game to one hundred.  We begin by defining a probability space probability space as a pair where is a finite set and is a function that whose domain is the family of all subsets of and whose range is the set of all real numbers which are non-negative and at most one. Furthermore, the following two key properties must be satisfied:  and .  If and are subsets of , and , then .    When is a probability space, the function is called a probability measure probability measure , the subsets of are called events event , and when , the quantity is referred to as the probability probability of the event .  Note that we can consider to be extended to a mapping from to by setting for each element . We call the elements of  outcomes outcomes (some people prefer to say the elements are elementary outcomes ) and the quantity is called the probability of . It is important to realize that if you know for each , then you can calculate for any event , since (by the second property), .   For the spinner, we can take , with , and . So .    Let be a finite, nonempty set and let . For each , set . In particular, for each element . In this trivial example, all outcomes are equally likely.    If a single six sided die is rolled and the number of dots on the top face is recorded, then the ground set is and for each . On the other hand, if a pair of dice are rolled and the sum of the dots on the two top faces is recorded, then with , , , , and . To see this, consider the two die as distinguished, one die red and the other one blue. Then each of the pairs with , the red die showing spots and the blue die showing spots is equally likely. So each has probability . Then, for example, there are three pairs that yield a total of four, namely , and . So the probability of rolling a four is .    In Alice's game as described above, the set can be , the set of possible differences when a pair of dice are rolled. In this game, we will see that the correct definition of the function will set ; ; ; ; ; and . Using Xing's more compact notation, we could say that and when .    A jar contains twenty marbles, of which six are red, nine are blue and the remaining five are green. Three of the twenty marbles are selected at random. This is sometimes called sampling without replacement . You should imagine a jar with opaque sides so you can't see through them. The marbles are stirred\/shaken, and you reach into the jar blind folded and draw out three marbles. sampling without replacement Let , and for each , let denote the probability that the number of blue marbles among the three marbles selected is . Then for , while . Bob says that it doesn't make sense to have outcomes with probability zero, but Carlos says that it does.    In some cards games, each player receives five cards from a standard deck of cards four suits (spades, hearts, diamonds and clubs) with cards, ace though king in each suit. A player has a full house full house (poker hand) if there are two values and for which he has three of the four 's and two of the four 's, three kings and two eights. If five cards are drawn at random from a standard deck, the probability of a full house is    "
},
{
  "id": "fig_spinner",
  "level": "2",
  "url": "s_probability_intro.html#fig_spinner",
  "type": "Figure",
  "number": "10.1",
  "title": "",
  "body": " A Spinner for Games of Chance   "
},
{
  "id": "s_probability_intro-6",
  "level": "2",
  "url": "s_probability_intro.html#s_probability_intro-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "probability space "
},
{
  "id": "s_probability_intro-7",
  "level": "2",
  "url": "s_probability_intro.html#s_probability_intro-7",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "probability measure events probability "
},
{
  "id": "s_probability_intro-8",
  "level": "2",
  "url": "s_probability_intro.html#s_probability_intro-8",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "outcomes elementary outcomes probability "
},
{
  "id": "s_probability_intro-9",
  "level": "2",
  "url": "s_probability_intro.html#s_probability_intro-9",
  "type": "Example",
  "number": "10.2",
  "title": "",
  "body": " For the spinner, we can take , with , and . So .  "
},
{
  "id": "s_probability_intro-10",
  "level": "2",
  "url": "s_probability_intro.html#s_probability_intro-10",
  "type": "Example",
  "number": "10.3",
  "title": "",
  "body": " Let be a finite, nonempty set and let . For each , set . In particular, for each element . In this trivial example, all outcomes are equally likely.  "
},
{
  "id": "s_probability_intro-11",
  "level": "2",
  "url": "s_probability_intro.html#s_probability_intro-11",
  "type": "Example",
  "number": "10.4",
  "title": "",
  "body": " If a single six sided die is rolled and the number of dots on the top face is recorded, then the ground set is and for each . On the other hand, if a pair of dice are rolled and the sum of the dots on the two top faces is recorded, then with , , , , and . To see this, consider the two die as distinguished, one die red and the other one blue. Then each of the pairs with , the red die showing spots and the blue die showing spots is equally likely. So each has probability . Then, for example, there are three pairs that yield a total of four, namely , and . So the probability of rolling a four is .  "
},
{
  "id": "s_probability_intro-12",
  "level": "2",
  "url": "s_probability_intro.html#s_probability_intro-12",
  "type": "Example",
  "number": "10.5",
  "title": "",
  "body": " In Alice's game as described above, the set can be , the set of possible differences when a pair of dice are rolled. In this game, we will see that the correct definition of the function will set ; ; ; ; ; and . Using Xing's more compact notation, we could say that and when .  "
},
{
  "id": "s_probability_intro-13",
  "level": "2",
  "url": "s_probability_intro.html#s_probability_intro-13",
  "type": "Example",
  "number": "10.6",
  "title": "",
  "body": " A jar contains twenty marbles, of which six are red, nine are blue and the remaining five are green. Three of the twenty marbles are selected at random. This is sometimes called sampling without replacement . You should imagine a jar with opaque sides so you can't see through them. The marbles are stirred\/shaken, and you reach into the jar blind folded and draw out three marbles. sampling without replacement Let , and for each , let denote the probability that the number of blue marbles among the three marbles selected is . Then for , while . Bob says that it doesn't make sense to have outcomes with probability zero, but Carlos says that it does.  "
},
{
  "id": "s_probability_intro-14",
  "level": "2",
  "url": "s_probability_intro.html#s_probability_intro-14",
  "type": "Example",
  "number": "10.7",
  "title": "",
  "body": " In some cards games, each player receives five cards from a standard deck of cards four suits (spades, hearts, diamonds and clubs) with cards, ace though king in each suit. A player has a full house full house (poker hand) if there are two values and for which he has three of the four 's and two of the four 's, three kings and two eights. If five cards are drawn at random from a standard deck, the probability of a full house is   "
},
{
  "id": "s_probability_conditional",
  "level": "1",
  "url": "s_probability_conditional.html",
  "type": "Section",
  "number": "10.2",
  "title": "Conditional Probability and Independent Events",
  "body": " Conditional Probability and Independent Events   A jar contains twenty marbles of which six are red, nine are blue and the remaining five are green. While blindfolded, Xing selects two of the twenty marbles random (without replacement) and puts one in his left pocket and one in his right pocket. He then takes off the blindfold.  The probability that the marble in his left pocket is red is . But Xing first reaches into his right pocket, takes this marble out and discovers that it is blue. Is the probability that the marble in his left pocket is red still ? Intuition says that it's slightly higher than that. Here's a more formal framework for answering such questions.  Let be a probability space and let be an event for which . Then for every event , we define the probability of , given probability conditional , denoted probability of given , by setting .   Returning to the question raised at the beginning of the section, Bob says that this is just conditional probability. He says let be the event that the marble in the right pocket is blue and let be the event that the marble in the left pocket is red. Then , and , so that , which is of course slightly larger than . Alice is impressed.    Consider the jar of twenty marbles from the preceding example. A second jar of marbles is introduced. This jar has eighteen marbles: nine red, five blue and four green. A jar is selected at random and from this jar, two marbles are chosen at random. What is the probability that both are green? Bob is on a roll. He says, Let be the event that both marbles are green, and let and be the event that the marbles come from the first jar and the second jar, respectively. Then , and . Furthermore, and , while . Also for each . Therefore, That's about %.  Now Alice is speechless.     Independent Events  Let and be events in a probability space . We say and are independent event independent independent event if . Note that when , and are independent if and only if . Two events that are not independent are said to be dependent event dependent . Returning to our earlier example, the two events ( : the marble in Xing's left pocket is red and : the marble in his right pocket is blue) are dependent.   Consider the two jars of marbles from . One of the two jars is chosen at random and a single marble is drawn from that jar. Let be the event that the second jar is chosen, and let be the event that the marble chosen turns out to be green. Then and . On the other hand, , so , and the two events are not independent. Intuitively, this should be clear, since once you know that the marble is green, it is more likely that you actually chose the first jar.    A pair of dice are rolled, one red and one blue. Let be the event that the red die shows either a or a , and let be the event that you get doubles, , the red die and the blue die show the same number. Then , , and . So and are independent.    "
},
{
  "id": "s_probability_conditional-2-3",
  "level": "2",
  "url": "s_probability_conditional.html#s_probability_conditional-2-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "probability of , given "
},
{
  "id": "s_probability_conditional-2-4",
  "level": "2",
  "url": "s_probability_conditional.html#s_probability_conditional-2-4",
  "type": "Discussion",
  "number": "10.8",
  "title": "",
  "body": " Returning to the question raised at the beginning of the section, Bob says that this is just conditional probability. He says let be the event that the marble in the right pocket is blue and let be the event that the marble in the left pocket is red. Then , and , so that , which is of course slightly larger than . Alice is impressed.  "
},
{
  "id": "exa_twojars",
  "level": "2",
  "url": "s_probability_conditional.html#exa_twojars",
  "type": "Example",
  "number": "10.9",
  "title": "",
  "body": " Consider the jar of twenty marbles from the preceding example. A second jar of marbles is introduced. This jar has eighteen marbles: nine red, five blue and four green. A jar is selected at random and from this jar, two marbles are chosen at random. What is the probability that both are green? Bob is on a roll. He says, Let be the event that both marbles are green, and let and be the event that the marbles come from the first jar and the second jar, respectively. Then , and . Furthermore, and , while . Also for each . Therefore, That's about %.  Now Alice is speechless.  "
},
{
  "id": "s_probability_conditional-3-2",
  "level": "2",
  "url": "s_probability_conditional.html#s_probability_conditional-3-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "independent dependent "
},
{
  "id": "s_probability_conditional-3-3",
  "level": "2",
  "url": "s_probability_conditional.html#s_probability_conditional-3-3",
  "type": "Example",
  "number": "10.10",
  "title": "",
  "body": " Consider the two jars of marbles from . One of the two jars is chosen at random and a single marble is drawn from that jar. Let be the event that the second jar is chosen, and let be the event that the marble chosen turns out to be green. Then and . On the other hand, , so , and the two events are not independent. Intuitively, this should be clear, since once you know that the marble is green, it is more likely that you actually chose the first jar.  "
},
{
  "id": "exa_twodie",
  "level": "2",
  "url": "s_probability_conditional.html#exa_twodie",
  "type": "Example",
  "number": "10.11",
  "title": "",
  "body": " A pair of dice are rolled, one red and one blue. Let be the event that the red die shows either a or a , and let be the event that you get doubles, , the red die and the blue die show the same number. Then , , and . So and are independent.  "
},
{
  "id": "s_probability_bernoulli-trials",
  "level": "1",
  "url": "s_probability_bernoulli-trials.html",
  "type": "Section",
  "number": "10.3",
  "title": "Bernoulli Trials",
  "body": " Bernoulli Trials  Suppose we have a jar with marbles, four of which are red and three are blue. A marble is drawn at random and we record whether it is red or blue. The probability of getting a red marble is ; and the probability of getting a blue is .  Now suppose the marble is put back in the jar, the marbles in the jar are stirred, and the experiment is repeated. Then the probability of getting a red marble on the second trial is again , and this pattern holds regardless of the number of times the experiment is repeated.  It is customary to call this situation a series of Bernoulli trials . Bernoulli trials More formally, we have an experiment with only two outcomes: success and failure . The probability of success is and the probability of failure is . Most importantly, when the experiment is repeated, then the probability of success on any individual test is exactly .  We fix a positive integer and consider the case that the experiment is repeated times. The outcomes are then the binary strings of length from the two-letter alphabet , for success and failure, respectively. If is a string with successes and failures, then . Of course, in applications, success and failure may be replaced by: head\/tails, up\/down, good\/bad, forwards\/backwards, red\/blue,    When a die is rolled, let's say that we have a success if the result is a two or a five. Then the probability of success is and the probability of failure is . If the die is rolled ten times in succession, then the probability that we get exactly four successes is .    A fair coin is tossed times and the outcome (heads or tails) is recorded. Then the probability of getting heads times and tails the other times is     Bob says that if a fair coin is tossed times, it is fairly likely that you will get exactly heads and tails. Dave is not so certain this is right. Carlos fires up his computer and in few second, he reports that the probability of getting exactly heads when a fair coin is tossed times is which is , to six decimal places. In other words, not very likely at all. Xing is doing a modestly more complicated calculation, and he reports that you have a % chance that the number of heads is at least and at most . Carlos adds that when is very large, then it is increasingly certain that the number of heads in tosses will be close to . Dave asks what do you mean by close, and what do you mean by very large?   "
},
{
  "id": "s_probability_bernoulli-trials-4",
  "level": "2",
  "url": "s_probability_bernoulli-trials.html#s_probability_bernoulli-trials-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Bernoulli trials success failure "
},
{
  "id": "s_probability_bernoulli-trials-6",
  "level": "2",
  "url": "s_probability_bernoulli-trials.html#s_probability_bernoulli-trials-6",
  "type": "Example",
  "number": "10.12",
  "title": "",
  "body": " When a die is rolled, let's say that we have a success if the result is a two or a five. Then the probability of success is and the probability of failure is . If the die is rolled ten times in succession, then the probability that we get exactly four successes is .  "
},
{
  "id": "s_probability_bernoulli-trials-7",
  "level": "2",
  "url": "s_probability_bernoulli-trials.html#s_probability_bernoulli-trials-7",
  "type": "Example",
  "number": "10.13",
  "title": "",
  "body": " A fair coin is tossed times and the outcome (heads or tails) is recorded. Then the probability of getting heads times and tails the other times is   "
},
{
  "id": "s_probability_bernoulli-trials-8",
  "level": "2",
  "url": "s_probability_bernoulli-trials.html#s_probability_bernoulli-trials-8",
  "type": "Discussion",
  "number": "10.14",
  "title": "",
  "body": " Bob says that if a fair coin is tossed times, it is fairly likely that you will get exactly heads and tails. Dave is not so certain this is right. Carlos fires up his computer and in few second, he reports that the probability of getting exactly heads when a fair coin is tossed times is which is , to six decimal places. In other words, not very likely at all. Xing is doing a modestly more complicated calculation, and he reports that you have a % chance that the number of heads is at least and at most . Carlos adds that when is very large, then it is increasingly certain that the number of heads in tosses will be close to . Dave asks what do you mean by close, and what do you mean by very large?  "
},
{
  "id": "s_probability_discrete-random-variables",
  "level": "1",
  "url": "s_probability_discrete-random-variables.html",
  "type": "Section",
  "number": "10.4",
  "title": "Discrete Random Variables",
  "body": " Discrete Random Variables   Let be a probability space and let be any function that maps the outcomes in to real numbers (all values allowed, positive, negative and zero). We call For historical reasons, capital letters, like and are used to denote random variables. They are just functions, so letters like , and might more seem more natural but maybe not.  a random variable random variable . The quantity , denoted , is called the expectation expectation (also called the mean mean expectation or expected value expected value expectation ) of the random variable . As the suggestive name reflects, this is what one should expect to be the average behavior of the result of repeated Bernoulli trials.  Note that since we are dealing only with probability spaces where is a finite set, the range of the probability measure is actually a finite set. Accordingly, we can rewrite the formula for as , where the summation extends over a finite range of values for .   For the spinner shown in , let where is the number of the region. Then Note that . The significance of this quantity is captured in the following statement. If we record the result from the spinner times in succession as and Xing receives a prize worth for each , then Xing should expect to receive a total prize worth . Bob asks how this statement can possibly be correct, since may not even be an integer, and any prize Xing receives will have integral value. Carlos goes on to explain that the concept of expected value provides a formal definition for what is meant by a fair game. If Xing pays cents to play the game and is then paid pennies where is the number of the region where the spinner stops, then the game is fair. If he pays less, he has an unfair advantage, and if he pays more, the game is biased against him. Bob says How can Xing pay pennies? Brushing aside Bob's question, Carlos says that one can prove that for every , there is some (which depends on ) so that if , then the probability that Xing's total winnings minus , divided by is within of is at least . Carlos turns to Dave and explains politely that this statement gives a precise meaning of what is meant by close and large .    For Alice's game from the start of the chapter, , we could take to be the function defined by . Then records the amount that Bob wins when the difference is (a negative win for Bob is just a win for Alice in the same amount). We calculate the expectation of as follows: Note that . So if points were dollars, each time the game is played, Bob should expect to lose slightly more than a nickel. Needless to say, Alice likes to play this game and the more times Bob can be tricked into playing, the more she likes it. On the other hand, by this time in the chapter, Bob should be getting the message and telling Alice to go suck a lemon.     The Linearity of Expectation  The following fundamental property of expectation is an immediate consequence of the definition, but we state it formally because it is so important to discussions to follow.    Let be a probability space and let be random variables. Then       Implications for Bernoulli Trials   Consider a series of Bernoulli trials with , the probability of success, and let count the number of successes. Then, we claim that To see this, consider the function . Taking the derivative by the chain rule, we find that . Now when , the derivative has value .  On the other hand, we can use the binomial theorem to expand the function . It follows that And now the claim follows by again setting . Who says calculus isn't useful!    Many states have lotteries to finance college scholarships or other public enterprises judged to have value to the public at large. Although far from a scientific investigation, it seems on the basis of our investigation that many of the games have an expected value of approximately fifty cents when one dollar is invested. So the games are far from fair, and no one should play them unless they have an intrinsic desire to support the various causes for which the lottery profits are targeted.  By contrast, various games of chance played in gambling centers have an expected return of slightly less than ninety cents for every dollar wagered. In this setting, we can only say that one has to place a dollar value on the enjoyment derived from the casino environment. From a mathematical standpoint, you are going to lose. That's how they get the money to build those exotic buildings.    "
},
{
  "id": "s_probability_discrete-random-variables-2-1",
  "level": "2",
  "url": "s_probability_discrete-random-variables.html#s_probability_discrete-random-variables-2-1",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "random variable expectation mean expected value "
},
{
  "id": "s_probability_discrete-random-variables-2-3",
  "level": "2",
  "url": "s_probability_discrete-random-variables.html#s_probability_discrete-random-variables-2-3",
  "type": "Example",
  "number": "10.15",
  "title": "",
  "body": " For the spinner shown in , let where is the number of the region. Then Note that . The significance of this quantity is captured in the following statement. If we record the result from the spinner times in succession as and Xing receives a prize worth for each , then Xing should expect to receive a total prize worth . Bob asks how this statement can possibly be correct, since may not even be an integer, and any prize Xing receives will have integral value. Carlos goes on to explain that the concept of expected value provides a formal definition for what is meant by a fair game. If Xing pays cents to play the game and is then paid pennies where is the number of the region where the spinner stops, then the game is fair. If he pays less, he has an unfair advantage, and if he pays more, the game is biased against him. Bob says How can Xing pay pennies? Brushing aside Bob's question, Carlos says that one can prove that for every , there is some (which depends on ) so that if , then the probability that Xing's total winnings minus , divided by is within of is at least . Carlos turns to Dave and explains politely that this statement gives a precise meaning of what is meant by close and large .  "
},
{
  "id": "s_probability_discrete-random-variables-2-4",
  "level": "2",
  "url": "s_probability_discrete-random-variables.html#s_probability_discrete-random-variables-2-4",
  "type": "Example",
  "number": "10.16",
  "title": "",
  "body": " For Alice's game from the start of the chapter, , we could take to be the function defined by . Then records the amount that Bob wins when the difference is (a negative win for Bob is just a win for Alice in the same amount). We calculate the expectation of as follows: Note that . So if points were dollars, each time the game is played, Bob should expect to lose slightly more than a nickel. Needless to say, Alice likes to play this game and the more times Bob can be tricked into playing, the more she likes it. On the other hand, by this time in the chapter, Bob should be getting the message and telling Alice to go suck a lemon.  "
},
{
  "id": "prop_linearexpect",
  "level": "2",
  "url": "s_probability_discrete-random-variables.html#prop_linearexpect",
  "type": "Proposition",
  "number": "10.17",
  "title": "",
  "body": "  Let be a probability space and let be random variables. Then    "
},
{
  "id": "s_probability_discrete-random-variables-4-2",
  "level": "2",
  "url": "s_probability_discrete-random-variables.html#s_probability_discrete-random-variables-4-2",
  "type": "Example",
  "number": "10.18",
  "title": "",
  "body": " Consider a series of Bernoulli trials with , the probability of success, and let count the number of successes. Then, we claim that To see this, consider the function . Taking the derivative by the chain rule, we find that . Now when , the derivative has value .  On the other hand, we can use the binomial theorem to expand the function . It follows that And now the claim follows by again setting . Who says calculus isn't useful!  "
},
{
  "id": "s_probability_discrete-random-variables-4-3",
  "level": "2",
  "url": "s_probability_discrete-random-variables.html#s_probability_discrete-random-variables-4-3",
  "type": "Example",
  "number": "10.19",
  "title": "",
  "body": " Many states have lotteries to finance college scholarships or other public enterprises judged to have value to the public at large. Although far from a scientific investigation, it seems on the basis of our investigation that many of the games have an expected value of approximately fifty cents when one dollar is invested. So the games are far from fair, and no one should play them unless they have an intrinsic desire to support the various causes for which the lottery profits are targeted.  By contrast, various games of chance played in gambling centers have an expected return of slightly less than ninety cents for every dollar wagered. In this setting, we can only say that one has to place a dollar value on the enjoyment derived from the casino environment. From a mathematical standpoint, you are going to lose. That's how they get the money to build those exotic buildings.  "
},
{
  "id": "s_probability_central-tendency",
  "level": "1",
  "url": "s_probability_central-tendency.html",
  "type": "Section",
  "number": "10.5",
  "title": "Central Tendency",
  "body": " Central Tendency   Consider the following two situations:   Situation 1. A small town decides to hold a lottery to raise funds for charitable purposes. A total of tickets are sold, and the tickets are labeled with numbers from the set . At a public ceremony, duplicate tickets are placed in a big box, and the mayor draws the winning ticket from out of the box. Just to heighten the suspense as to who has actually won the prize, the mayor reports that the winning number is at least . The citizens ooh and aah and they can't wait to see who among them will be the final winner.    Situation 2. Behind a curtain, a fair coin is tossed times, and the number of heads is recorded by an observer, who is reputed to be honest and impartial. Again, the outcome is an integer in the set . The observer then emerges from behind the curtain and announces that the number of heads is at least than . There is a pause and then someone says What? Are you out of your mind?      So we have two probability spaces, both with sample space . For each, we have a random variable , the winning ticket number in the first situation, and the number of heads in the second. In each case, the expected value, , of the random variable is . In the first case, we are not all that surprised at an outcome far from the expected value, while in the second, it seems intuitively clear that this is an extraordinary occurrence. The mathematical concept here is referred to as central tendency , and it helps us to understand just how likely a random variable is to stray from its expected value.  For starters, we have the following elementary result.   Markov's Inequality   Let be a random variable in a probability space . Then for every ,     Of course, the inequality holds trivially unless . For in this range, we establish the equivalent inequality: .     To make Markov's inequality more concrete, we see that on the basis of this trivial result, the probability that either the winning lottery ticket or the number of heads is at least is at most . So nothing alarming here in either case. Since we still feel that the two cases are quite different, a more subtle measure will be required.    Variance and Standard Deviation  Again, let be a probability space and let be a random variable. The quantity is called the variance variance of and is denoted . Evidently, the variance of is a non-negative number. The standard deviation standard deviation of , denoted is then defined as the quantity , , .   For the spinner shown at the beginning of the chapter, let when the pointer stops in region . Then we have already noted that the expectation of the random variable is . It follows that the variance is: It follows that the standard deviation of is then .    Suppose that and consider a series of Bernoulli trials with the probability of success being , and let count the number of successes. We have already noted that . Now we claim the variance of is given by: There are several ways to establish this claim. One way is to proceed directly from the definition, using the same method we used previously to obtain the expectation. But now you need also to calculate the second derivative. Here is a second approach, one that capitalizes on the fact that separate trials in a Bernoulli series are independent.  Let be a family of random variables in a probability space . We say the family is independent independent random variables if for each and with , and for each pair of real numbers with , the following two events are independent: and . When the family is independent, it is straightforward to verify that   With the aid of this observation, the calculation of the variance of the random variable which counts the number of successes becomes a trivial calculation. But in fact, the entire treatment we have outlined here is just a small part of a more complex subject which can be treated more elegantly and ultimately much more compactly provided you first develop additional background material on families of random variables. For this we will refer you to suitable probability and statistics texts, such as those given in our references.     Let be a random variable in a probability space . Then .    Let . From its definition, we note that    Variance (and standard deviation) are quite useful tools in discussions of just how likely a random variable is to be near its expected value. This is reflected in the following theorem.   Chebyshev's Inequality   Let be a random variable in a probability space , and let be a positive real number. If the expectation of is and the standard deviation is , then     Let .  Then we have: Since , we may now deduce that . Therefore, since , we conclude that      Here's an example of how can be applied. Consider tosses of a fair coin with counting the number of heads. As noted before, and , so . When and and . Setting so that , we see that the probability that is within of the expected value of is at least . So it seems very unlikely indeed that the number of heads is at least .  Going back to lottery tickets, if we make the rational assumption that all ticket numbers are equally likely, then the probability that the winning number is at least is exactly , which is very close to .    In the case of Bernoulli trials, we can use basic properties of binomial coefficients to make even more accurate estimates. Clearly, in the case of coin tossing, the probability that the number of heads in tosses is at least is given by Now a computer algebra system can make this calculation exactly, and you are encouraged to check it out just to see how truly small this quantity actually is.    "
},
{
  "id": "s_probability_central-tendency-2-2",
  "level": "2",
  "url": "s_probability_central-tendency.html#s_probability_central-tendency-2-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "central tendency "
},
{
  "id": "thm_markov",
  "level": "2",
  "url": "s_probability_central-tendency.html#thm_markov",
  "type": "Theorem",
  "number": "10.20",
  "title": "Markov’s Inequality.",
  "body": " Markov's Inequality   Let be a random variable in a probability space . Then for every ,     Of course, the inequality holds trivially unless . For in this range, we establish the equivalent inequality: .    "
},
{
  "id": "s_probability_central-tendency-3-2",
  "level": "2",
  "url": "s_probability_central-tendency.html#s_probability_central-tendency-3-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "variance standard deviation "
},
{
  "id": "s_probability_central-tendency-3-3",
  "level": "2",
  "url": "s_probability_central-tendency.html#s_probability_central-tendency-3-3",
  "type": "Example",
  "number": "10.21",
  "title": "",
  "body": " For the spinner shown at the beginning of the chapter, let when the pointer stops in region . Then we have already noted that the expectation of the random variable is . It follows that the variance is: It follows that the standard deviation of is then .  "
},
{
  "id": "s_probability_central-tendency-3-4",
  "level": "2",
  "url": "s_probability_central-tendency.html#s_probability_central-tendency-3-4",
  "type": "Example",
  "number": "10.22",
  "title": "",
  "body": " Suppose that and consider a series of Bernoulli trials with the probability of success being , and let count the number of successes. We have already noted that . Now we claim the variance of is given by: There are several ways to establish this claim. One way is to proceed directly from the definition, using the same method we used previously to obtain the expectation. But now you need also to calculate the second derivative. Here is a second approach, one that capitalizes on the fact that separate trials in a Bernoulli series are independent.  Let be a family of random variables in a probability space . We say the family is independent independent random variables if for each and with , and for each pair of real numbers with , the following two events are independent: and . When the family is independent, it is straightforward to verify that   With the aid of this observation, the calculation of the variance of the random variable which counts the number of successes becomes a trivial calculation. But in fact, the entire treatment we have outlined here is just a small part of a more complex subject which can be treated more elegantly and ultimately much more compactly provided you first develop additional background material on families of random variables. For this we will refer you to suitable probability and statistics texts, such as those given in our references.  "
},
{
  "id": "prop_altvar",
  "level": "2",
  "url": "s_probability_central-tendency.html#prop_altvar",
  "type": "Proposition",
  "number": "10.23",
  "title": "",
  "body": "  Let be a random variable in a probability space . Then .    Let . From its definition, we note that   "
},
{
  "id": "thm_chebyshev",
  "level": "2",
  "url": "s_probability_central-tendency.html#thm_chebyshev",
  "type": "Theorem",
  "number": "10.24",
  "title": "Chebyshev’s Inequality.",
  "body": " Chebyshev's Inequality   Let be a random variable in a probability space , and let be a positive real number. If the expectation of is and the standard deviation is , then     Let .  Then we have: Since , we may now deduce that . Therefore, since , we conclude that    "
},
{
  "id": "s_probability_central-tendency-3-8",
  "level": "2",
  "url": "s_probability_central-tendency.html#s_probability_central-tendency-3-8",
  "type": "Example",
  "number": "10.25",
  "title": "",
  "body": " Here's an example of how can be applied. Consider tosses of a fair coin with counting the number of heads. As noted before, and , so . When and and . Setting so that , we see that the probability that is within of the expected value of is at least . So it seems very unlikely indeed that the number of heads is at least .  Going back to lottery tickets, if we make the rational assumption that all ticket numbers are equally likely, then the probability that the winning number is at least is exactly , which is very close to .  "
},
{
  "id": "s_probability_central-tendency-3-9",
  "level": "2",
  "url": "s_probability_central-tendency.html#s_probability_central-tendency-3-9",
  "type": "Example",
  "number": "10.26",
  "title": "",
  "body": " In the case of Bernoulli trials, we can use basic properties of binomial coefficients to make even more accurate estimates. Clearly, in the case of coin tossing, the probability that the number of heads in tosses is at least is given by Now a computer algebra system can make this calculation exactly, and you are encouraged to check it out just to see how truly small this quantity actually is.  "
},
{
  "id": "s_probability_infinite-outcomes",
  "level": "1",
  "url": "s_probability_infinite-outcomes.html",
  "type": "Section",
  "number": "10.6",
  "title": "Probability Spaces with Infinitely Many Outcomes",
  "body": " Probability Spaces with Infinitely Many Outcomes  To this point, we have focused entirely on probability spaces with a finite set. More generally, probability spaces are defined where is an infinite set. When is countably infinite, we can still define on the members of , and now is an infinite sum which converges absolutely (since all terms are non-negative) to . When is uncountable, is not defined on . Instead, the probability function is defined on a family of subsets of . Given our emphasis on finite sets and combinatorics, we will discuss the first case briefly and refer students to texts that focus on general concepts from probability and statistics for the second.   Consider the following game. Nancy rolls a single die. She wins if she rolls a six. If she rolls any other number, she then rolls again and again until the first time that one of the following two situations occurs: (1) she rolls a six, which now this results in a loss or (2) she rolls the same number as she got on her first roll, which results in a win. As an example, here are some sequences of rolls that this game might take:  . Nancy wins!  . Nancy wins!  . Nancy loses. Ouch.    So what is the probability that Nancy will win this game?  Nancy can win with a six on the first roll. That has probability . Then she might win on round where . To accomplish this, she has a chance of rolling a number other than six on the first roll; a chance of rolling something that avoids a win\/loss decision on each of the rolls, through and then a chance of rolling the matching number on round . So the probability of a win is given by:     You might think that something slightly more general is lurking in the background of the preceding example and it is. Suppose we have two disjoint events and in a probability space and that . Then suppose we make repeated samples from this space with each sample independent of all previous ones. Call it a win if event holds and a loss if event holds. Otherwise, it's a tie and we sample again. Now the probability of a win is:    "
},
{
  "id": "s_probability_infinite-outcomes-3",
  "level": "2",
  "url": "s_probability_infinite-outcomes.html#s_probability_infinite-outcomes-3",
  "type": "Example",
  "number": "10.27",
  "title": "",
  "body": " Consider the following game. Nancy rolls a single die. She wins if she rolls a six. If she rolls any other number, she then rolls again and again until the first time that one of the following two situations occurs: (1) she rolls a six, which now this results in a loss or (2) she rolls the same number as she got on her first roll, which results in a win. As an example, here are some sequences of rolls that this game might take:  . Nancy wins!  . Nancy wins!  . Nancy loses. Ouch.    So what is the probability that Nancy will win this game?  Nancy can win with a six on the first roll. That has probability . Then she might win on round where . To accomplish this, she has a chance of rolling a number other than six on the first roll; a chance of rolling something that avoids a win\/loss decision on each of the rolls, through and then a chance of rolling the matching number on round . So the probability of a win is given by:   "
},
{
  "id": "s_probability_infinite-outcomes-4",
  "level": "2",
  "url": "s_probability_infinite-outcomes.html#s_probability_infinite-outcomes-4",
  "type": "Example",
  "number": "10.28",
  "title": "",
  "body": " You might think that something slightly more general is lurking in the background of the preceding example and it is. Suppose we have two disjoint events and in a probability space and that . Then suppose we make repeated samples from this space with each sample independent of all previous ones. Call it a win if event holds and a loss if event holds. Otherwise, it's a tie and we sample again. Now the probability of a win is:   "
},
{
  "id": "s_probability_discussion",
  "level": "1",
  "url": "s_probability_discussion.html",
  "type": "Section",
  "number": "10.7",
  "title": "Discussion",
  "body": " Discussion  Bob was late for morning coffee and the group was well into dissecting today's applied combinatorics class. As he approached the table, he blurted out Ok guys, here's a problem that doesn't make any sense to me, except that Nadja, my friend from biology, says that if I have a good feel for probability, then it is transparent. Alice not very softly interjected Not much goes through six inches of iron. Bob didn't bite A guy eats lunch at the same diner every day. After lunch, the waiter asks if he wants dessert. He asks for the choices and the waiter replies We have three kinds of pie: apple, cherry and pecan. Then the guy always says I'll have pecan pie. This goes on for six months. Then one day, the waiter says I have bad news. Today, we don't have any apple pie, so your only choices are cherry and pecan. Now the guy says In this case, I'll have the cherry pie. I have to tell you all that this doesn't make any sense to me. Why would the guy ask for cherry pie in preference to pecan pie when he consistently takes pecan pie over both cherry pie and apple pie?   Zori was the first to say something Ok guys, I've finally willing to accept the premise that big integer arithmetic, and things that reflect the same flavor, might and I emphasize might, have some relevance in the real world, but this conversation about dessert in some stupid diner is too much. Xing was hesitant but still offered There's something here. That much I'm sure. Dave said Yeah, a great dessert. Especially the pecan pie. Alice was not amused. All the while Carlos was thinking. Finally, he said I think it has something to do with conditional probability. The patron's preference for pecan pie was conditioned on the fact that there were three choices. When there were only two choices, his preferences changed.   Now Yolanda saw more Doesn't this happen all the time in presidential politics? People prefer candidate when , and are running, but when candidate drops out, they shift their preference to candidate . Alice said You could say the same thing about close personal relationships. Although she didn't say it, she was thinking that it wouldn't matter how many dropped out if Bob was one of the remaining.  "
},
{
  "id": "s_probability_exercises",
  "level": "1",
  "url": "s_probability_exercises.html",
  "type": "Exercises",
  "number": "10.8",
  "title": "Exercises",
  "body": "   Our gang of seven (Alice, Bob, Carlos, Dave, Xing, Yolanda and Zori) are students in a class with a total enrollment of 35. The professor chooses three students at random to go to the board to work challenge problems.  What is the probability that Yolanda is chosen?  What is the probability that Yolanda is chosen and Zori is not?  What is the probability that exactly two members of the club are chosen?  What is the probability that none of the seven members of club are chosen?        Bob says to no one in particular, Did you know that the probability that you will get at least one 7 in three rolls of a pair of dice is slightly less than . On the other hand, the probability that you'll get at least one 5 in six rolls of the dice is just over . Is Bob on target, or out to lunch?      Consider the spinner shown in at the beginning of the chapter.  What is the probability of getting at least one 5 in three spins?  What is the probability of getting at least one 3 in three spins?  If you keep spinning until you get either a 2 or a 5 , what is the probability that you get a 2 first?  If you receive dollars when the spinner halts in region , what is the expected value? Since three is right in the middle of the possible outcomes, is it reasonable to pay three dollars to play this game?        Alice proposes to Bob the following game. Bob pays one dollar to play. Fifty balls marked are placed in a big jar, stirred around, and then drawn out one by one by Zori, who is wearing a blindfold. The result is a random permutation of the integers , . Bob wins with a payout of two dollars and fifty cents if the permutation is a derangement, , for all . Is this a fair game for Bob? If not how should the payoff be adjusted to make it fair?      A random graph with vertex set is constructed using the following method. For each two element subset from , a fair coin is tossed and the edge then belongs to the graph when the result is heads. For each -element subset , let be the event that is a complete subgraph in our random graph.  Explain why for each -element subset .  Explain why and are independent when .  Let , and . Show that        Ten marbles labeled are placed in a big jar and then stirred up. Zori, wearing a blindfold, pulls them out of the jar two at a time. Players are allowed to place bets as to whether the sum of the two marbles in a pair is . There are different pairs and exactly of these pairs sums to eleven.  Suppose Zori draws out a pair; the results are observed; then she returns the two balls to the jar and all ten balls are stirred before the next sample is taken. Since the probability that the sum is an 11 is , then it would be fair to pay one dollar to play the game if the payoff for an 11 is nine dollars. Similarly, the payoff for a wager of one hundred dollars should be nine hundred dollars.  Now consider an alternative way to play the game. Now Zori draws out a pair; the results are observed; and the marbles are set aside. Next, she draws another pair from the remaining eight marbles, followed by a pair selected from the remaining six, Finally, the fifth pair is just the pair that remains after the fourth pair has been selected. Now players may be free to wager on the outcome of any or all or just some of the five rounds. Explain why either everyone should or no one should wager on the fifth round. Accordingly, the last round is skipped and all marbles are returned to the jar and we start over again.  Also explain why an observant player can make lots of money with a payout ratio of nine to one. Now for a more challenging problem, what is the minimum payout ratio above which a player has a winning strategy?    "
},
{
  "id": "s_probability_exercises-1",
  "level": "2",
  "url": "s_probability_exercises.html#s_probability_exercises-1",
  "type": "Exercise",
  "number": "10.8.1",
  "title": "",
  "body": "  Our gang of seven (Alice, Bob, Carlos, Dave, Xing, Yolanda and Zori) are students in a class with a total enrollment of 35. The professor chooses three students at random to go to the board to work challenge problems.  What is the probability that Yolanda is chosen?  What is the probability that Yolanda is chosen and Zori is not?  What is the probability that exactly two members of the club are chosen?  What is the probability that none of the seven members of club are chosen?     "
},
{
  "id": "s_probability_exercises-2",
  "level": "2",
  "url": "s_probability_exercises.html#s_probability_exercises-2",
  "type": "Exercise",
  "number": "10.8.2",
  "title": "",
  "body": "  Bob says to no one in particular, Did you know that the probability that you will get at least one 7 in three rolls of a pair of dice is slightly less than . On the other hand, the probability that you'll get at least one 5 in six rolls of the dice is just over . Is Bob on target, or out to lunch?   "
},
{
  "id": "s_probability_exercises-3",
  "level": "2",
  "url": "s_probability_exercises.html#s_probability_exercises-3",
  "type": "Exercise",
  "number": "10.8.3",
  "title": "",
  "body": "  Consider the spinner shown in at the beginning of the chapter.  What is the probability of getting at least one 5 in three spins?  What is the probability of getting at least one 3 in three spins?  If you keep spinning until you get either a 2 or a 5 , what is the probability that you get a 2 first?  If you receive dollars when the spinner halts in region , what is the expected value? Since three is right in the middle of the possible outcomes, is it reasonable to pay three dollars to play this game?     "
},
{
  "id": "s_probability_exercises-4",
  "level": "2",
  "url": "s_probability_exercises.html#s_probability_exercises-4",
  "type": "Exercise",
  "number": "10.8.4",
  "title": "",
  "body": "  Alice proposes to Bob the following game. Bob pays one dollar to play. Fifty balls marked are placed in a big jar, stirred around, and then drawn out one by one by Zori, who is wearing a blindfold. The result is a random permutation of the integers , . Bob wins with a payout of two dollars and fifty cents if the permutation is a derangement, , for all . Is this a fair game for Bob? If not how should the payoff be adjusted to make it fair?   "
},
{
  "id": "s_probability_exercises-5",
  "level": "2",
  "url": "s_probability_exercises.html#s_probability_exercises-5",
  "type": "Exercise",
  "number": "10.8.5",
  "title": "",
  "body": "  A random graph with vertex set is constructed using the following method. For each two element subset from , a fair coin is tossed and the edge then belongs to the graph when the result is heads. For each -element subset , let be the event that is a complete subgraph in our random graph.  Explain why for each -element subset .  Explain why and are independent when .  Let , and . Show that     "
},
{
  "id": "s_probability_exercises-6",
  "level": "2",
  "url": "s_probability_exercises.html#s_probability_exercises-6",
  "type": "Exercise",
  "number": "10.8.6",
  "title": "",
  "body": "  Ten marbles labeled are placed in a big jar and then stirred up. Zori, wearing a blindfold, pulls them out of the jar two at a time. Players are allowed to place bets as to whether the sum of the two marbles in a pair is . There are different pairs and exactly of these pairs sums to eleven.  Suppose Zori draws out a pair; the results are observed; then she returns the two balls to the jar and all ten balls are stirred before the next sample is taken. Since the probability that the sum is an 11 is , then it would be fair to pay one dollar to play the game if the payoff for an 11 is nine dollars. Similarly, the payoff for a wager of one hundred dollars should be nine hundred dollars.  Now consider an alternative way to play the game. Now Zori draws out a pair; the results are observed; and the marbles are set aside. Next, she draws another pair from the remaining eight marbles, followed by a pair selected from the remaining six, Finally, the fifth pair is just the pair that remains after the fourth pair has been selected. Now players may be free to wager on the outcome of any or all or just some of the five rounds. Explain why either everyone should or no one should wager on the fifth round. Accordingly, the last round is skipped and all marbles are returned to the jar and we start over again.  Also explain why an observant player can make lots of money with a payout ratio of nine to one. Now for a more challenging problem, what is the minimum payout ratio above which a player has a winning strategy?   "
},
{
  "id": "s_probmeth_graph-ramsey",
  "level": "1",
  "url": "s_probmeth_graph-ramsey.html",
  "type": "Section",
  "number": "11.1",
  "title": "A First Taste of Ramsey Theory",
  "body": " A First Taste of Ramsey Theory  Bob likes to think of himself as a wild and crazy guy, totally unpredictable. Most guys do. But Alice says that Bob can't change his basic nature, which is excruciatingly boring. Carlos remarks that perhaps we shouldn't be so hard on Bob, because under certain circumstances, we can all be forced to be dull and repetitive.  Recall that when is a positive integer, we let . In this chapter, when is a set and is a non-negative integer with , we borrow from our in-line notation for binomial coefficients and let family of all -element subsets of denote the family of all -element subsets of . So whenever .  Recall that the asserts that if pigeons are placed in holes, then there must be some hole into which two or more pigeons have been placed. More formally, if and are positive integers, and is any function, then there is a -element subset and an element so that for every .  We now embark on a study of an elegant extension of this basic result, one that continues to fascinate and challenge.  Returning to the discussion at the start of this section, you might say that an induced subgraph of a graph is boring if it is either a complete subgraph or an independent set. In either case, exactly every pair of vertices in behaves in exactly the same boring way. So is boredom inevitable? The answer is yes at least in a relative sense. As a starter, let's show that any graph on six (or more) vertices has a boring subgraph of size three.    Let be any graph with six of more vertices. Then either contains a complete subgraph of size or an independent set of size .    Let be any vertex in . Then split the remaining vertices into two sets and with being the neighbors of and the non-neighbors. Since has at least six vertices, we know that either or . Suppose first that and let , and be distinct vertices from . If is an edge in for some distinct pair , then is a complete subgraph of size in . On the other hand, if there are no edges among the vertices in , then we have an independent set of size .  The argument when is dual.    We note that the bound of six in the preceding lemma is sharp, as a cycle on five vertices does not contain either a complete set of size nor an independent set of size .  Next, here is the statement that generalizes this result.   Ramsey's Theorem for Graphs  Ramsey's theorem   If and are positive integers, then there exists a least positive integer so that if is a graph and has at least vertices, then either contains a complete subgraph on vertices, or contains an independent set of size .    We show that exists and is at most . This claim is trivial when either or , so we may assume that . From this point, we proceed by induction on assuming that the result holds when .  Now let be any vertex in . Then there are at least other vertices, which we partition as , where are those vertices adjacent to in and are those vertices which are not adjacent to .  We recall that the binomial coefficients satisfy So either or . If the first option holds, and does not have an independent set of size , then it contains a complete subgraph of size . It follows that we may add to this set to obtain a complete subgraph of size in .  Similarly, if the second option holds, and does not contain a complete subgraph of size , then contains an independent set of size , and we may add to this set to obtain an independent set of size in .    "
},
{
  "id": "lem_r33",
  "level": "2",
  "url": "s_probmeth_graph-ramsey.html#lem_r33",
  "type": "Lemma",
  "number": "11.1",
  "title": "",
  "body": "  Let be any graph with six of more vertices. Then either contains a complete subgraph of size or an independent set of size .    Let be any vertex in . Then split the remaining vertices into two sets and with being the neighbors of and the non-neighbors. Since has at least six vertices, we know that either or . Suppose first that and let , and be distinct vertices from . If is an edge in for some distinct pair , then is a complete subgraph of size in . On the other hand, if there are no edges among the vertices in , then we have an independent set of size .  The argument when is dual.   "
},
{
  "id": "thm_graphramsey",
  "level": "2",
  "url": "s_probmeth_graph-ramsey.html#thm_graphramsey",
  "type": "Theorem",
  "number": "11.2",
  "title": "Ramsey’s Theorem for Graphs.",
  "body": " Ramsey's Theorem for Graphs  Ramsey's theorem   If and are positive integers, then there exists a least positive integer so that if is a graph and has at least vertices, then either contains a complete subgraph on vertices, or contains an independent set of size .    We show that exists and is at most . This claim is trivial when either or , so we may assume that . From this point, we proceed by induction on assuming that the result holds when .  Now let be any vertex in . Then there are at least other vertices, which we partition as , where are those vertices adjacent to in and are those vertices which are not adjacent to .  We recall that the binomial coefficients satisfy So either or . If the first option holds, and does not have an independent set of size , then it contains a complete subgraph of size . It follows that we may add to this set to obtain a complete subgraph of size in .  Similarly, if the second option holds, and does not contain a complete subgraph of size , then contains an independent set of size , and we may add to this set to obtain an independent set of size in .   "
},
{
  "id": "s_ramsey_small",
  "level": "1",
  "url": "s_ramsey_small.html",
  "type": "Section",
  "number": "11.2",
  "title": "Small Ramsey Numbers",
  "body": " Small Ramsey Numbers  Actually determining the Ramsey numbers Ramsey number Ramsey number  referenced in seems to be a notoriously difficult problem, and only a handful of these values are known precisely. In particular, and , while . The distinguished Hungarian mathematician Paul Erdős said on many occasions that it might be possible to determine exactly, if all the world's mathematical talent were to be focused on the problem. But he also said that finding the exact value of might be beyond our collective abilities.  In the following table, we provide information about the Ramsey numbers when and are at least and at most . When a cell contains a single number, that is the precise answer. When there are two numbers, they represent lower and upper bounds.   Small Ramsey numbers  Ramsey number small       3  4  5  6  7  8  9               3   6  9  14  18  23  36  39    4    18  25  36, 41  49, 61  58, 84  73, 115    5     43, 49  58, 87  80, 143  101, 216  126, 316    6      102, 165  113, 298  127, 495  169, 780    7       205, 540  217, 1031  241, 1713    8        282, 1870  317, 3583    9         565, 6588     For additional (or more current) data, see Dynamic Survey #DS1: Small Ramsey Numbers by Stanisław Radziszowski in the Electronic Journal of Combinatorics . ( was last updated using the 12 January 2014 version of that article.)  "
},
{
  "id": "s_ramsey_small-2",
  "level": "2",
  "url": "s_ramsey_small.html#s_ramsey_small-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Ramsey numbers "
},
{
  "id": "tab_ramsey_small",
  "level": "2",
  "url": "s_ramsey_small.html#tab_ramsey_small",
  "type": "Figure",
  "number": "11.3",
  "title": "",
  "body": " Small Ramsey numbers  Ramsey number small       3  4  5  6  7  8  9               3   6  9  14  18  23  36  39    4    18  25  36, 41  49, 61  58, 84  73, 115    5     43, 49  58, 87  80, 143  101, 216  126, 316    6      102, 165  113, 298  127, 495  169, 780    7       205, 540  217, 1031  241, 1713    8        282, 1870  317, 3583    9         565, 6588    "
},
{
  "id": "s_ramsey_estimatesize",
  "level": "1",
  "url": "s_ramsey_estimatesize.html",
  "type": "Section",
  "number": "11.3",
  "title": "Estimating Ramsey Numbers",
  "body": " Estimating Ramsey Numbers  We will find it convenient to utilize the following approximation due to Stirling. You can find a proof in almost any advanced calculus book. Of course, we will normally be satisfied with the first term: Using Stirling's approximation and the binomial coefficients from the proof of , we have the following upper bound:   "
},
{
  "id": "s_ramsey_probability",
  "level": "1",
  "url": "s_ramsey_probability.html",
  "type": "Section",
  "number": "11.4",
  "title": "Applying Probability to Ramsey Theory",
  "body": " Applying Probability to Ramsey Theory  Ramsey number symmetric  The following theorem, due to P. Erdős, is a true classic, and is presented here in a manner that is faithful to how it was first published. As we shall see later, it was subsequently recast but that's getting the cart ahead of the horse.    If is a positive integer. Then     Let be an integer with and consider the set of all labeled graphs with vertex set . Clearly, there are graphs in this family. Let denote the subfamily consisting of those graphs which contain a complete subgraph of size . It is easy to see that Similarly, let denote the subfamily consisting of those graphs which contain an independent set of size . It follows that   We want to take the integer as large as we can while still guaranteeing that . This will imply that there is a graph in which does not contain a complete subgraph of size or an independent set of size . So consider the following inequality: Now we ask how large can be without violating inequality ? To answer this, we use the trivial inequality and the use the Stirling approximation for . After some algebra and taking the root of both sides, we see that we need only guarantee that     Now let's take a second look at the proof of . We consider a probability space where the outcomes are graphs with vertex set . For each and with , edge is present in the graph with probability . Furthermore, the events for distinct pairs are independent.  Let denote the random variable which counts the number of -element subsets of for which all pairs are edges in the graph. Similarly, is the random variable which counts the number of -element independent subsets of . Then set .  By linearity of expectation, while If , then there must exist a graph with vertex set without a or an . And the question of how large can be while maintaining leads to exactly the same calculation we had before.  After more than fifty years and the efforts of many very bright researchers, only marginal improvements have been made on the bounds on from and . In particular, no one can settle whether there is some constant and an integer so that when . Similarly, no one has been able to answer whether there is some constant and an integer so that when . We would certainly give you an for this course if you managed to do either.   Carlos said that he had been trying to prove a good lower bound on using only constructive methods, , no random techniques allowed. But he was having problems. Anything he tried seemed only to show that where is a constant. That seems so weak compared to the exponential bound which the probabilistic method gives easily. Usually Alice was not very sympathetic to the complaints of others and certainly not from Carlos, who seemed always to be out front. But this time, Alice said to Carlos and in a manner that all could hear Maybe you shouldn't be so hard on yourself. I read an article on the web that nobody has been able to show that there is a constant and an integer so that when , provided that only constructive methods are allowed. And maybe, just maybe, saying that you are unable to do something that lots of other famous people seem also unable to do is not so bad. Bob saw a new side of Alice and this too wasn't all bad.   "
},
{
  "id": "thm_rnn",
  "level": "2",
  "url": "s_ramsey_probability.html#thm_rnn",
  "type": "Theorem",
  "number": "11.4",
  "title": "",
  "body": "  If is a positive integer. Then     Let be an integer with and consider the set of all labeled graphs with vertex set . Clearly, there are graphs in this family. Let denote the subfamily consisting of those graphs which contain a complete subgraph of size . It is easy to see that Similarly, let denote the subfamily consisting of those graphs which contain an independent set of size . It follows that   We want to take the integer as large as we can while still guaranteeing that . This will imply that there is a graph in which does not contain a complete subgraph of size or an independent set of size . So consider the following inequality: Now we ask how large can be without violating inequality ? To answer this, we use the trivial inequality and the use the Stirling approximation for . After some algebra and taking the root of both sides, we see that we need only guarantee that    "
},
{
  "id": "s_ramsey_probability-9",
  "level": "2",
  "url": "s_ramsey_probability.html#s_ramsey_probability-9",
  "type": "Discussion",
  "number": "11.5",
  "title": "",
  "body": " Carlos said that he had been trying to prove a good lower bound on using only constructive methods, , no random techniques allowed. But he was having problems. Anything he tried seemed only to show that where is a constant. That seems so weak compared to the exponential bound which the probabilistic method gives easily. Usually Alice was not very sympathetic to the complaints of others and certainly not from Carlos, who seemed always to be out front. But this time, Alice said to Carlos and in a manner that all could hear Maybe you shouldn't be so hard on yourself. I read an article on the web that nobody has been able to show that there is a constant and an integer so that when , provided that only constructive methods are allowed. And maybe, just maybe, saying that you are unable to do something that lots of other famous people seem also unable to do is not so bad. Bob saw a new side of Alice and this too wasn't all bad.  "
},
{
  "id": "s_ramsey_theorem",
  "level": "1",
  "url": "s_ramsey_theorem.html",
  "type": "Section",
  "number": "11.5",
  "title": "Ramsey’s Theorem",
  "body": " Ramsey's Theorem  Ramsey's theorem  By this time, you are probably not surprised to see that there is a very general form of Ramsey's theorem. We have a bounded number of bins or colors and we are placing the subsets of a fixed size into these categories. The conclusion is that there is a large set which is treated uniformly.  Here's the formal statement.   Ramsey's theorem   Let and be positive integers and let be a string of integers with for each . Then there exists a least positive integer so that if and is any function, then there exists an integer and a subset with so that for every .    We don't include the proof of this general statement here, but the more ambitious students may attempt it on their own. Note that the case is just the , while the case is just . An argument using double induction is required for the proof in the general case. The first induction is on and the second is on .  "
},
{
  "id": "thm_genramsey",
  "level": "2",
  "url": "s_ramsey_theorem.html#thm_genramsey",
  "type": "Theorem",
  "number": "11.6",
  "title": "",
  "body": " Ramsey's theorem   Let and be positive integers and let be a string of integers with for each . Then there exists a least positive integer so that if and is any function, then there exists an integer and a subset with so that for every .   "
},
{
  "id": "s_ramsey_girth",
  "level": "1",
  "url": "s_ramsey_girth.html",
  "type": "Section",
  "number": "11.6",
  "title": "The Probabilistic Method",
  "body": " The Probabilistic Method   At the outset of this chapter, we presented Erdős' original proof for the lower bound for the Ramsey number using counting. Later, we recast the proof in a probabilistic setting. History has shown that this second perspective is the right one. To illustrate the power of this approach, we present a classic theorem, which is also due to Erdős, showing that there are graphs with large girth and large chromatic number.  The girth girth  of a graph is the smallest integer for which contains a cycle on vertices. The girth of a forest is taken to be infinite, while the girth of a graph is three if and only if it has a triangle. You can check the families of triangle-free, large chromatic number, graphs constructed in and see that each has girth four.   Erdős  girth  chromatic number   For every pair of integers with , there exists a graph with and the girth of greater than .    Before proceeding with the details of the argument, let's pause to get the general idea behind the proof. We choose integers and with , and it will eventually be clear how large they need to be in terms of and . We will then consider a random graph on vertex set , and just as before, for each and with , the probability that the pair is an edge is , but now will depend on . Of course, the probability that any given pair is an edge is completely independent of all other pairs.  Our first goal is to choose the values of , and so that with high probability, a random graph does not have an independent set of size . You might think as a second goal, we would try to get a random graph without small cycles. But this goal is too restrictive. Instead, we just try to get a graph in which there are relatively few small cycles. In fact, we want the number of small cycles to be less than . Then we will remove one vertex from each small cycles, resulting in a graph with at least vertices, having no small cycles and no independent set of size . The chromatic number of this graph is at least , so we will want to have the inequality .  Now for some details. Let be the random variable that counts the number of -element independent sets. Then Now we want . Since and , it suffices to set . By , the probability that exceeds is less than .  Now let count the number of cycles in of size at most . Then Now, we want , and an easy calculation shows that when . Again by , the probability that exceeds is less than .  We conclude that there is a graph for which and . Remove a vertex from each of the small cycles in and let be the graph that remains. Clearly, has at least vertices, no cycle of size at most and no independent set of size . Finally, the inequality requires .      Gaining Intuition with the Probabilistic Method  Experienced researchers are able to simplify the calculations in an argument of this type, as they know what can safely be discarded and what can not. Here's a quick tour of the essential steps. We want to be small, so we set and get . We want the number of small cycles to be about so we set and get . Finally, we want which requires . The rest is just paying attention to details.   "
},
{
  "id": "s_ramsey_girth-2-2",
  "level": "2",
  "url": "s_ramsey_girth.html#s_ramsey_girth-2-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "girth "
},
{
  "id": "thm_girth",
  "level": "2",
  "url": "s_ramsey_girth.html#thm_girth",
  "type": "Theorem",
  "number": "11.7",
  "title": "Erdős.",
  "body": " Erdős  girth  chromatic number   For every pair of integers with , there exists a graph with and the girth of greater than .    Before proceeding with the details of the argument, let's pause to get the general idea behind the proof. We choose integers and with , and it will eventually be clear how large they need to be in terms of and . We will then consider a random graph on vertex set , and just as before, for each and with , the probability that the pair is an edge is , but now will depend on . Of course, the probability that any given pair is an edge is completely independent of all other pairs.  Our first goal is to choose the values of , and so that with high probability, a random graph does not have an independent set of size . You might think as a second goal, we would try to get a random graph without small cycles. But this goal is too restrictive. Instead, we just try to get a graph in which there are relatively few small cycles. In fact, we want the number of small cycles to be less than . Then we will remove one vertex from each small cycles, resulting in a graph with at least vertices, having no small cycles and no independent set of size . The chromatic number of this graph is at least , so we will want to have the inequality .  Now for some details. Let be the random variable that counts the number of -element independent sets. Then Now we want . Since and , it suffices to set . By , the probability that exceeds is less than .  Now let count the number of cycles in of size at most . Then Now, we want , and an easy calculation shows that when . Again by , the probability that exceeds is less than .  We conclude that there is a graph for which and . Remove a vertex from each of the small cycles in and let be the graph that remains. Clearly, has at least vertices, no cycle of size at most and no independent set of size . Finally, the inequality requires .   "
},
{
  "id": "s_ramsey_discussion",
  "level": "1",
  "url": "s_ramsey_discussion.html",
  "type": "Section",
  "number": "11.7",
  "title": "Discussion",
  "body": " Discussion  Zori started the conversation with Who in their right mind would trust their lives to an algorithm that used random methods? Xing quickly responded Everyone. At least everyone should. We routinely deal with probabilistic concepts, like getting run over by a bus when crossing the street or having a piano fall on our head. The general public is much more comfortable with notions of probability, even though they may never know the formal definition of a probability space. I for one am completely comfortable taking an airline flight if I can be assured that the probability of a disaster is less than .   Dave wasn't biting on this topic. Instead he offered You have to be struck by the statements that it appears difficult to construct objects which you can prove exist in abundance. I wonder why this is so. Alice said We all find your brain to be a totally random thing, sometimes making sense but often not. There was laughter or at least some snickering. But after a bit, Carlos said There's something fundamental here. Maybe one could prove that there are easily stated theorems which only have long proofs. Bob blurted That doens't make any sense. Zori saw an opportunity where a client would, at considerable expense, commission her to solve a problem (at least better than the competition) that was readily understood but somehow difficult in the end. She knew about the class but maybe there were even bigger challenges (and bigger paychecks) out there.  "
},
{
  "id": "s_ramsey_exercises",
  "level": "1",
  "url": "s_ramsey_exercises.html",
  "type": "Exercises",
  "number": "11.8",
  "title": "Exercises",
  "body": "   Consider a random graph with vertex set . If the edge probability is , then let denote the number of complete subgraphs of size and let denote the number of independent sets of size .  Show that , when is sufficiently large.  Use the result from part a to show that is less than , while the chromatic number of is at least (both statements holding with high probability). As a result, the basic inequality is far from being tight for a random graph.        We form a random tournament as follows. Start with a complete graph with vertex set . For each distinct pair , with , flip a fair coin. If the result is heads, orient the edge from to , which we denote by . If the toss is tails, then the edge is oriented from to , denoted . Show that when is large, with high probability, the following statement is true: For every set of size , there is a vertex so that in for every .      Let be a random tournament on vertices. Show that with high probability, the following statement is true: For every pair , of distinct vertices, either (1) in , or (2) there is a vertex for which both and are in .      Many statements for random graphs exhibit a threshold behavior . threshold probability Show that a random graph with edge probability almost certainly has no isolated vertices, while a random graph with edge probability almost certainly has at least one isolated vertices.      In the sense of the preceding problem, determine the threshold probability for a graph to be connected. threshold probability    "
},
{
  "id": "s_ramsey_exercises-1",
  "level": "2",
  "url": "s_ramsey_exercises.html#s_ramsey_exercises-1",
  "type": "Exercise",
  "number": "11.8.1",
  "title": "",
  "body": "  Consider a random graph with vertex set . If the edge probability is , then let denote the number of complete subgraphs of size and let denote the number of independent sets of size .  Show that , when is sufficiently large.  Use the result from part a to show that is less than , while the chromatic number of is at least (both statements holding with high probability). As a result, the basic inequality is far from being tight for a random graph.     "
},
{
  "id": "s_ramsey_exercises-2",
  "level": "2",
  "url": "s_ramsey_exercises.html#s_ramsey_exercises-2",
  "type": "Exercise",
  "number": "11.8.2",
  "title": "",
  "body": "  We form a random tournament as follows. Start with a complete graph with vertex set . For each distinct pair , with , flip a fair coin. If the result is heads, orient the edge from to , which we denote by . If the toss is tails, then the edge is oriented from to , denoted . Show that when is large, with high probability, the following statement is true: For every set of size , there is a vertex so that in for every .   "
},
{
  "id": "s_ramsey_exercises-3",
  "level": "2",
  "url": "s_ramsey_exercises.html#s_ramsey_exercises-3",
  "type": "Exercise",
  "number": "11.8.3",
  "title": "",
  "body": "  Let be a random tournament on vertices. Show that with high probability, the following statement is true: For every pair , of distinct vertices, either (1) in , or (2) there is a vertex for which both and are in .   "
},
{
  "id": "s_ramsey_exercises-4",
  "level": "2",
  "url": "s_ramsey_exercises.html#s_ramsey_exercises-4",
  "type": "Exercise",
  "number": "11.8.4",
  "title": "",
  "body": "  Many statements for random graphs exhibit a threshold behavior . threshold probability Show that a random graph with edge probability almost certainly has no isolated vertices, while a random graph with edge probability almost certainly has at least one isolated vertices.   "
},
{
  "id": "s_ramsey_exercises-5",
  "level": "2",
  "url": "s_ramsey_exercises.html#s_ramsey_exercises-5",
  "type": "Exercise",
  "number": "11.8.5",
  "title": "",
  "body": "  In the sense of the preceding problem, determine the threshold probability for a graph to be connected. threshold probability   "
},
{
  "id": "s_graphalgorithms_min-wt-span",
  "level": "1",
  "url": "s_graphalgorithms_min-wt-span.html",
  "type": "Section",
  "number": "12.1",
  "title": "Minimum Weight Spanning Trees",
  "body": " Minimum Weight Spanning Trees   In this section, we consider pairs where is a connected graph and . For each edge , the quantity is called the weight weight of . Given a set of edges, we define the weight of , denoted , by setting . In particular, the weight of a spanning tree is just the sum of the weights of the edges in . tree spanning   Weighted graphs arise in many contexts. One of the most natural is when the weights on the edges are distances or costs. For example, consider the weighted graph in . Suppose the vertices represent nodes of a network and the edges represent the ability to establish direct physical connections between those nodes. The weights associated to the edges represent the cost (let's say in thousands of dollars) of building those connections. The company establishing the network among the nodes only cares that there is a way to get data between each pair of nodes. Any additional links would create redundancy in which they are not interested at this time. A spanning tree of the graph ensures that each node can communicate with each of the others and has no redundancy, since removing any edge disconnects it. Thus, to minimize the cost of building the network, we want to find a minimum weight (or cost) spanning tree.   A weighted graph    To do this, this section considers the following problem:   Find a minimum weight spanning tree of .   To solve this problem, we will develop two efficient graph algorithms, each having certain computational advantages and disadvantages. Before developing the algorithms, we need to establish some preliminaries about spanning trees and forests.    Preliminaries  The following proposition about the number of components in a spanning forest of a graph has an easy inductive proof. You are asked to provide it in the exercises.    Let be a graph on vertices, and let be a spanning forest. Then . Furthermore, if , then has components. In particular, is a spanning tree if and only if it contains edges.    The following proposition establishes a way to take a spanning tree of a graph, remove an edge from it, and add an edge of the graph that is not in the spanning tree to create a new spanning tree. Effectively, the process exchanges two edges to form the new spanning tree, so we call this the exchange principle .   Exchange Principle   Let be spanning tree in a graph , and let be an edge of which does not belong to . Then  There is a unique path with (a) ; (b) ; and (c) for each .  For each , let and then set  , we exchange edge for edge . Then is a spanning tree of .      For the first fact, it suffices to note that if there were more than one distinct path from to in , we would be able to find a cycle in . This is impossible since it is a tree. For the second, we refer to . The black and green edges in the graph shown at the left represent the spanning tree . Thus, lies on the unique path from to in and is an edge of  not in . Adding to creates a graph with a unique cycle, since had a unique path from to . Removing (which could be any edge of the path, as stated in the proposition) destroys this cycle. Thus is a connected acyclic subgraph of with edges, so it is a spanning tree.   The exchange principle         For both of the algorithms we develop, the argument to show that the algorithm is optimal rests on the following technical lemma. To avoid trivialities, we assume .    Let be a spanning forest of and let be a component of . Also, let be an edge of minimum weight among all edges with one endpoint in and the other not in . Then among all spanning trees of that contain the forest , there is one of minimum weight that contains the edge .    Let be any spanning tree of minimum weight among all spanning trees that contain the forest , and suppose that is not an edge in . (If it were an edge in , we would be done.) Then let be the unique path in with (a) ; (b) ; and (c) for each . Without loss of generality, we may assume that is a vertex in while does not belong to . Then there is a least non-negative integer for which is in and is not in . It follows that is in for all with .  Let . The edge has minimum weight among all edges with one endpoint in and the other not in , so . Now let be the tree obtained by exchanging the edge for edge . It follows that . Furthermore, contains the spanning forest as well as the edge . It is therefore the minimum weight spanning tree we seek.     Although Bob's combinatorial intuition has improved over the course he doesn't quite understand why we need special algorithms to find minimum weight spanning trees. He figures there can't be that many spanning trees, so he wants to just write them down. Alice groans as she senses that Bob must have been absent when the material from was discussed. In that section, we learned that a graph on vertices can have as many as spanning trees (or horrors, the instructor may have left it off the syllabus). Regardless, this exhaustive approach is already unusable when . Dave mumbles something about being greedy and just adding the lightest edges one-by-one while never adding an edge that would make a cycle. Zori remembers a strategy like this working for finding the height of a poset, but she's worried about the nightmare situation that we learned about with using FirstFit to color graphs. Alice agrees that greedy algorithms have an inconsistent track record but suggests that may be enough to get one to succeed here.     Kruskal's Algorithm  In this section, we develop one of the best known algorithms for finding a minimum weight spanning tree. It is known as Kruskal's Algorithm , although some prefer the descriptive label Avoid Cycles because of the way it builds the spanning tree.  To start Kruskal's algorithm, we sort the edges according to weight. To be more precise, let denote the number of edges in . Then label the edges as so that . Any of the many available efficient sorting algorithms can be used to do this step.  Once the edges are sorted, Kruskal's algorithm proceeds to an initialization step and then inductively builds the spanning tree :   Kruskal's Algorithm  minimum weight spanning tree Kruskal's algorithm for  Kruskal's algorithm      Initialization. Set and .   Inductive Step.  While , let be the least non-negative integer so that and there are no cycles in . Then (using pseudo-code) set        The correctness of Kruskal's Algorithm follows from an inductive argument. First, the set is initialized as the empty set, so there is certainly a minimum weight spanning tree containing all the edges in . Now suppose that for some with , and there is a minimum weight spanning tree containing all the edges in . Let be the spanning forest determined by the edges in , and let be the components of . For each , let be a minimum weight edge with one endpoint in and the other not in . Then the edge added to by Kruskal's Algorithm is just the edge having minimum weight. Applying and the inductive hypothesis, we know that there will still be a minimum weight spanning tree of containing all the edges of .   Kruskal's Algorithm   Let's see what Kruskal's algorithm does on the weighted graph in . It first sorts all of the edges by weight. We won't reproduce the list here, since we won't need all of it. The edge of least weight is , which has weight . It continues adding the edge of least weight, adding , , , , and . However, after doing this, the edge of lowest weight is , which has weight . This edge cannot be added, as doing so would make a cycle. Thus, the algorithm bypasses it and adds . Edge is next inspected, but it, too, would create a cycle and is eliminated from consideration. Then is added, followed by . There are now two edges of weight to be considered: and . Our sorting algorithm has somehow decided one of them should appear first, so let's say it's . After adding , we cannot add , as would form a cycle. Edge is next considered, but it would also form a cycle. However, can be added. Edges and are then bypassed. Finally, edge is added as the twelfth and final edge for this -vertex spanning tree. The full list of edges added (in order) is shown to the right. The total weight of this spanning tree is .  c k 23 a g 25 f g 26 f i 29 f j 30 b j 34 b c 39 e m 49 d l 55 d j 56 e k 59 c h 79      Prim's Algorithm  We now develop Prim's Algorithm for finding a minimum weight spanning tree. This algorithm is also known by a more descriptive label: Build Tree . We begin by choosing a root vertex . Again, the algorithm proceeds with an initialization step followed by a series of inductive steps.   Prim's Algorithm  minimum weight spanning trees Prim's algorithm for  Prim's algorithm      Initialization.  Set and .    Inductive Step.  While , let be an edge of minimum weight among all edges with one endpoint in and the other not in . If , and , update and by setting (using pseudo-code)        The correctness of Prim's algorithm follows immediately from .   Prim's Algorithm   Let's see what Prim's algorithm does on the weighted graph in . We start with vertex as the root vertex. The lightest edge connecting (the only vertex in the tree so far) to the rest of the graph is . Next, is added. This is followed by , , , and . Next, the algorithm identifies as the lightest edge connecting to the remaining vertices. Notice that this is considerably later than Kruskal's algorithm finds the same edge. The algorithm then determines that and , both of weight are the lightest edges connecting vertices in the tree to the other vertices. It picks arbitrarily, so let's say it takes . It next finds , then , and then . The final edge added is . The full list of edges added (in order) is shown to the right. The total weight of this spanning tree is . This (not surprisingly) the same weight we obtained using Kruskal's algorithm. However, notice that the spanning tree found is different, as this one contains instead of . This is not an issue, of course, since in both cases an arbitrary choice between two edges of equal weight was made.  a g 25 f g 26 f i 29 f j 30 b j 34 b c 39 c k 23 a l 56 d l 55 e k 59 e m 49 c h 79      Comments on Efficiency  An implementation of Kruskal's algorithm seems to require that the edges be sorted. If the graph has vertices and edges, this requires operations just for the sort. But once the sort is done, the process takes only steps provided you keep track of the components as the spanning forest expands. Regardless, it is easy to see that at most operations are required.  On the other hand, an implementation of Prim's algorithm requires the program to conveniently keep track of the edges incident with each vertex and always be able to identify the edge with least weight among subsets of these edges. In computer science, the data structure that enables this task to be carried out is called a heap .   "
},
{
  "id": "s_graphalgorithms_min-wt-span-2-1",
  "level": "2",
  "url": "s_graphalgorithms_min-wt-span.html#s_graphalgorithms_min-wt-span-2-1",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "weight weight "
},
{
  "id": "fig_graphalgorithms_spantreegraph",
  "level": "2",
  "url": "s_graphalgorithms_min-wt-span.html#fig_graphalgorithms_spantreegraph",
  "type": "Figure",
  "number": "12.1",
  "title": "",
  "body": " A weighted graph   "
},
{
  "id": "s_graphalgorithms_min-wt-span-2-5",
  "level": "2",
  "url": "s_graphalgorithms_min-wt-span.html#s_graphalgorithms_min-wt-span-2-5",
  "type": "Problem",
  "number": "12.2",
  "title": "",
  "body": " Find a minimum weight spanning tree of .  "
},
{
  "id": "prop_graphalgorithms_spanforest",
  "level": "2",
  "url": "s_graphalgorithms_min-wt-span.html#prop_graphalgorithms_spanforest",
  "type": "Proposition",
  "number": "12.3",
  "title": "",
  "body": "  Let be a graph on vertices, and let be a spanning forest. Then . Furthermore, if , then has components. In particular, is a spanning tree if and only if it contains edges.   "
},
{
  "id": "s_graphalgorithms_min-wt-span-3-4",
  "level": "2",
  "url": "s_graphalgorithms_min-wt-span.html#s_graphalgorithms_min-wt-span-3-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "exchange principle "
},
{
  "id": "prop_graphalgorithms_exchange",
  "level": "2",
  "url": "s_graphalgorithms_min-wt-span.html#prop_graphalgorithms_exchange",
  "type": "Proposition",
  "number": "12.4",
  "title": "Exchange Principle.",
  "body": " Exchange Principle   Let be spanning tree in a graph , and let be an edge of which does not belong to . Then  There is a unique path with (a) ; (b) ; and (c) for each .  For each , let and then set  , we exchange edge for edge . Then is a spanning tree of .      For the first fact, it suffices to note that if there were more than one distinct path from to in , we would be able to find a cycle in . This is impossible since it is a tree. For the second, we refer to . The black and green edges in the graph shown at the left represent the spanning tree . Thus, lies on the unique path from to in and is an edge of  not in . Adding to creates a graph with a unique cycle, since had a unique path from to . Removing (which could be any edge of the path, as stated in the proposition) destroys this cycle. Thus is a connected acyclic subgraph of with edges, so it is a spanning tree.   The exchange principle        "
},
{
  "id": "lem_graphalgorithms_tech",
  "level": "2",
  "url": "s_graphalgorithms_min-wt-span.html#lem_graphalgorithms_tech",
  "type": "Lemma",
  "number": "12.6",
  "title": "",
  "body": "  Let be a spanning forest of and let be a component of . Also, let be an edge of minimum weight among all edges with one endpoint in and the other not in . Then among all spanning trees of that contain the forest , there is one of minimum weight that contains the edge .    Let be any spanning tree of minimum weight among all spanning trees that contain the forest , and suppose that is not an edge in . (If it were an edge in , we would be done.) Then let be the unique path in with (a) ; (b) ; and (c) for each . Without loss of generality, we may assume that is a vertex in while does not belong to . Then there is a least non-negative integer for which is in and is not in . It follows that is in for all with .  Let . The edge has minimum weight among all edges with one endpoint in and the other not in , so . Now let be the tree obtained by exchanging the edge for edge . It follows that . Furthermore, contains the spanning forest as well as the edge . It is therefore the minimum weight spanning tree we seek.   "
},
{
  "id": "s_graphalgorithms_min-wt-span-3-8",
  "level": "2",
  "url": "s_graphalgorithms_min-wt-span.html#s_graphalgorithms_min-wt-span-3-8",
  "type": "Discussion",
  "number": "12.7",
  "title": "",
  "body": " Although Bob's combinatorial intuition has improved over the course he doesn't quite understand why we need special algorithms to find minimum weight spanning trees. He figures there can't be that many spanning trees, so he wants to just write them down. Alice groans as she senses that Bob must have been absent when the material from was discussed. In that section, we learned that a graph on vertices can have as many as spanning trees (or horrors, the instructor may have left it off the syllabus). Regardless, this exhaustive approach is already unusable when . Dave mumbles something about being greedy and just adding the lightest edges one-by-one while never adding an edge that would make a cycle. Zori remembers a strategy like this working for finding the height of a poset, but she's worried about the nightmare situation that we learned about with using FirstFit to color graphs. Alice agrees that greedy algorithms have an inconsistent track record but suggests that may be enough to get one to succeed here.  "
},
{
  "id": "s_graphalgorithms_min-wt-span-4-2",
  "level": "2",
  "url": "s_graphalgorithms_min-wt-span.html#s_graphalgorithms_min-wt-span-4-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Kruskal's Algorithm "
},
{
  "id": "alg_kruskal",
  "level": "2",
  "url": "s_graphalgorithms_min-wt-span.html#alg_kruskal",
  "type": "Algorithm",
  "number": "12.8",
  "title": "Kruskal’s Algorithm.",
  "body": " Kruskal's Algorithm  minimum weight spanning tree Kruskal's algorithm for  Kruskal's algorithm      Initialization. Set and .   Inductive Step.  While , let be the least non-negative integer so that and there are no cycles in . Then (using pseudo-code) set       "
},
{
  "id": "s_graphalgorithms_min-wt-span-4-7",
  "level": "2",
  "url": "s_graphalgorithms_min-wt-span.html#s_graphalgorithms_min-wt-span-4-7",
  "type": "Example",
  "number": "12.9",
  "title": "Kruskal’s Algorithm.",
  "body": " Kruskal's Algorithm   Let's see what Kruskal's algorithm does on the weighted graph in . It first sorts all of the edges by weight. We won't reproduce the list here, since we won't need all of it. The edge of least weight is , which has weight . It continues adding the edge of least weight, adding , , , , and . However, after doing this, the edge of lowest weight is , which has weight . This edge cannot be added, as doing so would make a cycle. Thus, the algorithm bypasses it and adds . Edge is next inspected, but it, too, would create a cycle and is eliminated from consideration. Then is added, followed by . There are now two edges of weight to be considered: and . Our sorting algorithm has somehow decided one of them should appear first, so let's say it's . After adding , we cannot add , as would form a cycle. Edge is next considered, but it would also form a cycle. However, can be added. Edges and are then bypassed. Finally, edge is added as the twelfth and final edge for this -vertex spanning tree. The full list of edges added (in order) is shown to the right. The total weight of this spanning tree is .  c k 23 a g 25 f g 26 f i 29 f j 30 b j 34 b c 39 e m 49 d l 55 d j 56 e k 59 c h 79   "
},
{
  "id": "alg_prim-2",
  "level": "2",
  "url": "s_graphalgorithms_min-wt-span.html#alg_prim-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Prim's Algorithm "
},
{
  "id": "alg_prim-3",
  "level": "2",
  "url": "s_graphalgorithms_min-wt-span.html#alg_prim-3",
  "type": "Algorithm",
  "number": "12.10",
  "title": "Prim’s Algorithm.",
  "body": " Prim's Algorithm  minimum weight spanning trees Prim's algorithm for  Prim's algorithm      Initialization.  Set and .    Inductive Step.  While , let be an edge of minimum weight among all edges with one endpoint in and the other not in . If , and , update and by setting (using pseudo-code)       "
},
{
  "id": "alg_prim-5",
  "level": "2",
  "url": "s_graphalgorithms_min-wt-span.html#alg_prim-5",
  "type": "Example",
  "number": "12.11",
  "title": "Prim’s Algorithm.",
  "body": " Prim's Algorithm   Let's see what Prim's algorithm does on the weighted graph in . We start with vertex as the root vertex. The lightest edge connecting (the only vertex in the tree so far) to the rest of the graph is . Next, is added. This is followed by , , , and . Next, the algorithm identifies as the lightest edge connecting to the remaining vertices. Notice that this is considerably later than Kruskal's algorithm finds the same edge. The algorithm then determines that and , both of weight are the lightest edges connecting vertices in the tree to the other vertices. It picks arbitrarily, so let's say it takes . It next finds , then , and then . The final edge added is . The full list of edges added (in order) is shown to the right. The total weight of this spanning tree is . This (not surprisingly) the same weight we obtained using Kruskal's algorithm. However, notice that the spanning tree found is different, as this one contains instead of . This is not an issue, of course, since in both cases an arbitrary choice between two edges of equal weight was made.  a g 25 f g 26 f i 29 f j 30 b j 34 b c 39 c k 23 a l 56 d l 55 e k 59 e m 49 c h 79   "
},
{
  "id": "s_graphalgorithms_min-wt-span-6-3",
  "level": "2",
  "url": "s_graphalgorithms_min-wt-span.html#s_graphalgorithms_min-wt-span-6-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "heap "
},
{
  "id": "s_graphalgorithms_digraphs",
  "level": "1",
  "url": "s_graphalgorithms_digraphs.html",
  "type": "Section",
  "number": "12.2",
  "title": "Digraphs",
  "body": " Digraphs  In this section, we introduce another useful variant of a graph. In a graph, the existence of an edge can be used to model a connection between and that goes in both ways. However, sometimes such a model is insufficient. For instance, perhaps it is possible to fly from Atlanta directly to Fargo but not possible to fly from Fargo directly to Atlanta. In a graph representing the airline network, an edge between Atlanta and Fargo would lose the information that the flights only operate in one direction. To deal with this problem, we introduce a new discrete structure. A digraph digraph graph directed digraph  is a pair where is a vertex set and with for every . We consider the pair as a directed edge edge directed from to . Note that for distinct vertices and from , the ordered pairs and are distinct, so the digraph may have one, both or neither of the directed edges and . This is in contrast to graphs, where edges are sets, so and are the same.  Diagrams of digraphs use arrowheads on the edges to indicate direction. This is illustrated in . For example, the digraph illustrated there contains the edge but not the edge . It does contain both edges and , however.   A Digraph    When is a digraph, a sequence of distinct vertices is called a directed path path directed from to when is a directed edge in for every . A directed path is called a directed cycle cycle directed when is a directed edge of .  "
},
{
  "id": "s_graphalgorithms_digraphs-2",
  "level": "2",
  "url": "s_graphalgorithms_digraphs.html#s_graphalgorithms_digraphs-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "digraph directed edge "
},
{
  "id": "fig_graphalgorithms_digraph",
  "level": "2",
  "url": "s_graphalgorithms_digraphs.html#fig_graphalgorithms_digraph",
  "type": "Figure",
  "number": "12.12",
  "title": "",
  "body": " A Digraph   "
},
{
  "id": "s_graphalgorithms_digraphs-5",
  "level": "2",
  "url": "s_graphalgorithms_digraphs.html#s_graphalgorithms_digraphs-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "directed path directed cycle "
},
{
  "id": "s_graphalgorithms_shortest-paths",
  "level": "1",
  "url": "s_graphalgorithms_shortest-paths.html",
  "type": "Section",
  "number": "12.3",
  "title": "Dijkstra’s Algorithm for Shortest Paths",
  "body": " Dijkstra's Algorithm for Shortest Paths   Just as with graphs, it is useful to assign weights to the directed edges of a digraph. Specifically, in this section we consider a pair where is a digraph and is a function assigning to each directed edge a non-negative weight . However, in this section, we interpret weight as distance distance so that is now called the length length of the edge . If is a directed path from to , then the length of the path is just the sum of the lengths of the edges in the path, . The distance from to is then defined to be the minimum length of a directed path from to . Our goal in this section is to solve the following natural problem, which has many applications:    For each vertex , find the distance from to . Also, find a shortest path from to .      Description of the Algorithm  To describe Dijkstra's algorithm in a compact manner, it is useful to extend the definition of the function . We do this by setting when and is not a directed edge of . In this way, we will treat as if it were a number (although it is not!). This is not an issue for computer implementation of the algorithm, as instead of using , a value given by the product of the number of vertices and the maximum edge weight may be used to simulate infinity.   We are now prepared to describe Dijkstra's Algorithm.   Dijkstra's Algorithm  Dijkstra's algorithm  graph shortest path in   Let . At Step , where , we will have determined:  A sequence of distinct vertices from with . These vertices are called permanent vertices , while the remaining vertices will be called temporary vertices .  For each vertex , we will have determined a number and a path from to of length .     Initialization (Step 1)  Set . Set and let be the trivial one-point path. Also, set . For each , set and . Let be a temporary vertex for which is minimum. Set , and update by appending to the end of it. Increment .    Inductive Step (Step , )  If , then for each temporary , let If this assignment results in a reduction in the value of , let be the path obtained by adding to the end of .  Let be a temporary vertex for which is minimum. Set , and update by appending to it. Increment .         Example of Dijkstra's Algorithm  Before establishing why Dijkstra's algorithm works, it may be helpful to see an example of how it works. To do this, consider the digraph shown in . For visual clarity, we have chosen a digraph which is an oriented graph , , for each distinct pair of vertices, the graph contains at most one of the two possible directed edges and .   A digraph with edge lengths    Suppose that the root vertex is the vertex labeled . The initialization step of Dijkstra's algorithm then results in the following values for and :   Step 1. Initialization     Before finishing Step 1, the algorithm identifies vertex as closest to and appends it to , making permanent. When entering Step 2, Dijkstra's algorithm attempts to find shorter paths from to each of the temporary vertices by going through . We call this process scanning from vertex . In this scan, the path to vertex is updated, since .    Step 2. Scan from vertex     Before proceeding to the next step, vertex is made permanent by making it . In Step 3, therefore, the scan is from vertex . Vertices , , and have their paths updated. However, although , we do not change since is not decreased by routing through .    Step 3. Scan from vertex     Now vertex is made permanent.    Step 4. Scan from vertex     Now vertex is made permanent.    Step 5. Scan from vertex     Now vertex is made permanent.    Step 6. Scan from vertex     Now vertex is made permanent.    Step 7. Scan from vertex     Now vertex is made permanent. Since this is the last vertex, the algorithm halts and returns the following:    Final Results of Dijkstra's Algorithm        The Correctness of Dijkstra's Algorithm  Now that we've illustrated Dijkstra's algorithm, it's time to prove that it actually does what we claimed it does: find the distance from the root vertex to each of the other vertices and a path of that length. To do this, we first state two elementary propositions. The first is about shortest paths in general, while the second is specific to the sequence of permanent vertices produced by Dijkstra's algorithm.    Let be a vertex and let be a shortest path from to . Then for every integer with , is a shortest path from to and is a shortest path from to       When the algorithm halts, let . Then     We are now ready to prove the correctness of the algorithm. The proof we give will be inductive, but the induction will have nothing to do with the total number of vertices in the digraph or the step number the algorithm is in.    Dijkstra's algorithm yields shortest paths for every vertex in . That is, when Dijkstra's algorithm terminates, for each , the value is the distance from to and is a shortest path from to .    The theorem holds trivially when . So we consider the case where . We argue that is the distance from to and that is a shortest path from to by induction on the minimum number of edges in a shortest path from to . When , the edge is a shortest path from to . Since , we will set and at Step 1.  Now fix a positive integer . Assume that if the minimum number of edges in a shortest path from to is at most , then is the distance from to and is a shortest path from to . Let be a vertex for which the minimum number of edges in a shortest path from to is . Fix a shortest path from to . Then is a shortest path from to . (See .)   Shortest paths      By the inductive hypothesis, is the distance from to , and is a shortest path from to . Note that need not be the same as path , as we suggest in . However, if distinct, the two paths will have the same length, namely . Also, the distance from to is since is a shortest path from to and .  Let and be the unique integers for which and . If , then Therefore the algorithm has found a path from to having length which is at most the distance from to . Clearly, this implies that is the distance from to and that is a shortest path.  On the other hand, if , then the inductive step at Step results in As before, this implies that is the distance from to and that is a shortest path.     "
},
{
  "id": "s_graphalgorithms_shortest-paths-2-1",
  "level": "2",
  "url": "s_graphalgorithms_shortest-paths.html#s_graphalgorithms_shortest-paths-2-1",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "distance length length distance "
},
{
  "id": "s_graphalgorithms_shortest-paths-2-2",
  "level": "2",
  "url": "s_graphalgorithms_shortest-paths.html#s_graphalgorithms_shortest-paths-2-2",
  "type": "Problem",
  "number": "12.13",
  "title": "",
  "body": "  For each vertex , find the distance from to . Also, find a shortest path from to .   "
},
{
  "id": "s_graphalgorithms_shortest-paths-3-2",
  "level": "2",
  "url": "s_graphalgorithms_shortest-paths.html#s_graphalgorithms_shortest-paths-3-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Dijkstra's algorithm "
},
{
  "id": "alg_dijkstra",
  "level": "2",
  "url": "s_graphalgorithms_shortest-paths.html#alg_dijkstra",
  "type": "Algorithm",
  "number": "12.14",
  "title": "Dijkstra’s Algorithm.",
  "body": " Dijkstra's Algorithm  Dijkstra's algorithm  graph shortest path in   Let . At Step , where , we will have determined:  A sequence of distinct vertices from with . These vertices are called permanent vertices , while the remaining vertices will be called temporary vertices .  For each vertex , we will have determined a number and a path from to of length .     Initialization (Step 1)  Set . Set and let be the trivial one-point path. Also, set . For each , set and . Let be a temporary vertex for which is minimum. Set , and update by appending to the end of it. Increment .    Inductive Step (Step , )  If , then for each temporary , let If this assignment results in a reduction in the value of , let be the path obtained by adding to the end of .  Let be a temporary vertex for which is minimum. Set , and update by appending to it. Increment .      "
},
{
  "id": "s_graphalgorithms_shortest-paths-4-2",
  "level": "2",
  "url": "s_graphalgorithms_shortest-paths.html#s_graphalgorithms_shortest-paths-4-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "oriented graph "
},
{
  "id": "fig_graphalgorithms_dijkstragraph",
  "level": "2",
  "url": "s_graphalgorithms_shortest-paths.html#fig_graphalgorithms_dijkstragraph",
  "type": "Figure",
  "number": "12.15",
  "title": "",
  "body": " A digraph with edge lengths   "
},
{
  "id": "s_graphalgorithms_shortest-paths-5-3",
  "level": "2",
  "url": "s_graphalgorithms_shortest-paths.html#s_graphalgorithms_shortest-paths-5-3",
  "type": "Proposition",
  "number": "12.16",
  "title": "",
  "body": "  Let be a vertex and let be a shortest path from to . Then for every integer with , is a shortest path from to and is a shortest path from to    "
},
{
  "id": "s_graphalgorithms_shortest-paths-5-4",
  "level": "2",
  "url": "s_graphalgorithms_shortest-paths.html#s_graphalgorithms_shortest-paths-5-4",
  "type": "Proposition",
  "number": "12.17",
  "title": "",
  "body": "  When the algorithm halts, let . Then    "
},
{
  "id": "s_graphalgorithms_shortest-paths-5-6",
  "level": "2",
  "url": "s_graphalgorithms_shortest-paths.html#s_graphalgorithms_shortest-paths-5-6",
  "type": "Theorem",
  "number": "12.18",
  "title": "",
  "body": "  Dijkstra's algorithm yields shortest paths for every vertex in . That is, when Dijkstra's algorithm terminates, for each , the value is the distance from to and is a shortest path from to .    The theorem holds trivially when . So we consider the case where . We argue that is the distance from to and that is a shortest path from to by induction on the minimum number of edges in a shortest path from to . When , the edge is a shortest path from to . Since , we will set and at Step 1.  Now fix a positive integer . Assume that if the minimum number of edges in a shortest path from to is at most , then is the distance from to and is a shortest path from to . Let be a vertex for which the minimum number of edges in a shortest path from to is . Fix a shortest path from to . Then is a shortest path from to . (See .)   Shortest paths      By the inductive hypothesis, is the distance from to , and is a shortest path from to . Note that need not be the same as path , as we suggest in . However, if distinct, the two paths will have the same length, namely . Also, the distance from to is since is a shortest path from to and .  Let and be the unique integers for which and . If , then Therefore the algorithm has found a path from to having length which is at most the distance from to . Clearly, this implies that is the distance from to and that is a shortest path.  On the other hand, if , then the inductive step at Step results in As before, this implies that is the distance from to and that is a shortest path.   "
},
{
  "id": "s_graphalgorithms_historical-notes",
  "level": "1",
  "url": "s_graphalgorithms_historical-notes.html",
  "type": "Section",
  "number": "12.4",
  "title": "Historical Notes",
  "body": " Historical Notes  Kruskal's algorithm was published in 1956 by Joseph B. Kruskal in a three-page paper that appeared in Proceedings of the American Mathematical Society . Robert C. Prim published the algorithm that now bears his name the following year in The Bell System Technical Journal . Prim's paper focuses on application of the minimum weight (or length or cost) spanning tree problem to telephone networks. He was aware of Kruskal's prior work, as they were colleagues at Bell Laboratories at the time he published his paper. It turns out that Prim had been beaten to the punch by Czech mathematician Vojtěch Jarník in 1929, so some refer to Prim's algorithm as Jarník's algorithm. (It was later rediscovered by Dijkstra, so some attach his name as well, referring to it as the Dijkstra-Jarník-Prim algorithm.) Edsger Dijkstra published his algorithm for finding shortest paths in 1959 in a three-page paper This is also the paper in which Prim's algorithm was published for the third time. Dijkstra was aware of Kruskal's prior work but argued that his algorithm was preferable because it required that less information about the graph be stored in memory at each step of the algorithm. appearing in Numerische Mathematik . In fact, Dijkstra's algorithm had been discovered (in an equivalent form) by Edward F. Moore two years earlier. His result appeared in Proceedings of an International Symposium on the Theory of Switching .  "
},
{
  "id": "s_graphalgorithms_exercises",
  "level": "1",
  "url": "s_graphalgorithms_exercises.html",
  "type": "Exercises",
  "number": "12.5",
  "title": "Exercises",
  "body": "   For the graph in , use Kruskal's algorithm ( avoid cycles ) to find a minimum weight spanning tree. Your answer should include a complete list of the edges, indicating which edges you take for your tree and which (if any) you reject in the course of running the algorithm.   Find a minimum weight spanning tree        For the graph in , use Prim's algorithm ( build tree ) to find a minimum weight spanning tree. Your answer should list the edges selected by the algorithm in the order they were selected.      For the graph in , use Kruskal's algorithm ( avoid cycles ) to find a minimum weight spanning tree. Your answer should include a complete list of the edges, indicating which edges you take for your tree and which (if any) you reject in the course of running the algorithm.   Find a minimum weight spanning tree        For the graph in , use Prim's algorithm ( build tree ) to find a minimum weight spanning tree. Your answer should list the edges selected by the algorithm in the order they were selected.      For the graph in , use Kruskal's algorithm ( avoid cycles ) to find a minimum weight spanning tree. Your answer should include a complete list of the edges, indicating which edges you take for your tree and which (if any) you reject in the course of running the algorithm.   Find a minimum weight spanning tree        For the graph in , use Prim's algorithm ( build tree ) to find a minimum weight spanning tree. Your answer should list the edges selected by the algorithm in the order they were selected.      A new local bank is being created and will establish a headquarters , two branches and , and four ATMs , , , and . They need to build a computer network such that the headquarters, branches, and ATMs can all intercommunicate. Furthermore, they will need to be networked with the Federal Reserve Bank of Atlanta, . The costs of the feasible network connections (in units of $10,000) are listed below: The bank wishes to minimize the cost of building its network (which must allow for connection, possibly routed through other nodes, from each node to each other node), however due to the need for high-speed communication, they must pay to build the connection from to as well as the connection from to . Give a list of the connections the bank should establish in order to minimize their total cost, subject to this constraint. Be sure to explain how you selected the connections and how you know the total cost is minimized.      A disconnected weighted graph obviously has no spanning trees. However, it is possible to find a spanning forest of minimum weight in such a graph. Explain how to modify both Kruskal's algorithm and Prim's algorithm to do this.      Prove .      In the paper where Kruskal's algorithm first appeared, he considered the algorithm a route to a nicer proof that in a connected weighted graph with no two edges having the same weight, there is a unique minimum weight spanning tree. Prove this fact using Kruskal's algorithm.      Use Dijkstra's algorithm to find the distance from to each other vertex in the digraph shown in and a directed path of that length.   A directed graph        contains the length of the directed edge in the intersection of row  and column  in a digraph with vertex set . For example, . (On the other hand, .) Use this data and Dijkstra's algorithm to find the distance from to each of the other vertices and a directed path of that length from .   A digraph represented as a table of data                 0  12  8  43  79  35     93  0  18  21  60  33     17  3  0  37  50  30     85  10  91  0  17  7     28  47  39  14  0  108     31  7  29  73  20  0         Use Dijkstra's algorithm to find the distance from to each other vertex in the digraph shown in and a directed path of that length.   A directed graph        contains the length of the directed edge in the intersection of row  and column  in a digraph with vertex set . For example, . (On the other hand, .) Use this data and Dijkstra's algorithm to find the distance from to each of the other vertices and a directed path of that length from .   A digraph represented as a table of data                 0  7  17  55  83  42     14  0  13  47  27  17     37  42  0  16  93  28     10  6  8  0  4  32     84  19  42  8  0  45     36  3  76  5  17  0         Give an example of a digraph having an undirected path between each pair of vertices, but having a root vertex so that Dijkstra's algorithm cannot find a path of finite length from to some vertex .      Notice that in our discussion of Dijkstra's algorithm, we required that the edge weights be nonnegative. If the edge weights are lengths and meant to model distance, this makes perfect sense. However, in some cases, it might be reasonable to allow negative edge weights. For example, suppose that a positive weight means there is a cost to travel along the directed edge while a negative edge weight means that you make money for traveling along the directed edge. In this case, a directed path with positive total weight results in paying out to travel it, while one with negative total weight results in a profit.  Give an example to show that Dijkstra's algorithm does not always find the path of minimum total weight when negative edge weights are allowed.  Bob and Xing are considering this situation, and Bob suggests that a little modification to the algorithm should solve the problem. He says that if there are negative weights, they just have to find the smallest ( , most negative weight) and add the absolute value of that weight to every directed edge. For example, if for every directed edge , Bob is suggesting that they add to every edge weight. Xing is skeptical, and for good reason. Give an example to show why Bob's modification won't work.      "
},
{
  "id": "s_graphalgorithms_exercises-1",
  "level": "2",
  "url": "s_graphalgorithms_exercises.html#s_graphalgorithms_exercises-1",
  "type": "Exercise",
  "number": "12.5.1",
  "title": "",
  "body": "  For the graph in , use Kruskal's algorithm ( avoid cycles ) to find a minimum weight spanning tree. Your answer should include a complete list of the edges, indicating which edges you take for your tree and which (if any) you reject in the course of running the algorithm.   Find a minimum weight spanning tree     "
},
{
  "id": "s_graphalgorithms_exercises-2",
  "level": "2",
  "url": "s_graphalgorithms_exercises.html#s_graphalgorithms_exercises-2",
  "type": "Exercise",
  "number": "12.5.2",
  "title": "",
  "body": "  For the graph in , use Prim's algorithm ( build tree ) to find a minimum weight spanning tree. Your answer should list the edges selected by the algorithm in the order they were selected.   "
},
{
  "id": "s_graphalgorithms_exercises-3",
  "level": "2",
  "url": "s_graphalgorithms_exercises.html#s_graphalgorithms_exercises-3",
  "type": "Exercise",
  "number": "12.5.3",
  "title": "",
  "body": "  For the graph in , use Kruskal's algorithm ( avoid cycles ) to find a minimum weight spanning tree. Your answer should include a complete list of the edges, indicating which edges you take for your tree and which (if any) you reject in the course of running the algorithm.   Find a minimum weight spanning tree     "
},
{
  "id": "s_graphalgorithms_exercises-4",
  "level": "2",
  "url": "s_graphalgorithms_exercises.html#s_graphalgorithms_exercises-4",
  "type": "Exercise",
  "number": "12.5.4",
  "title": "",
  "body": "  For the graph in , use Prim's algorithm ( build tree ) to find a minimum weight spanning tree. Your answer should list the edges selected by the algorithm in the order they were selected.   "
},
{
  "id": "s_graphalgorithms_exercises-5",
  "level": "2",
  "url": "s_graphalgorithms_exercises.html#s_graphalgorithms_exercises-5",
  "type": "Exercise",
  "number": "12.5.5",
  "title": "",
  "body": "  For the graph in , use Kruskal's algorithm ( avoid cycles ) to find a minimum weight spanning tree. Your answer should include a complete list of the edges, indicating which edges you take for your tree and which (if any) you reject in the course of running the algorithm.   Find a minimum weight spanning tree     "
},
{
  "id": "s_graphalgorithms_exercises-6",
  "level": "2",
  "url": "s_graphalgorithms_exercises.html#s_graphalgorithms_exercises-6",
  "type": "Exercise",
  "number": "12.5.6",
  "title": "",
  "body": "  For the graph in , use Prim's algorithm ( build tree ) to find a minimum weight spanning tree. Your answer should list the edges selected by the algorithm in the order they were selected.   "
},
{
  "id": "s_graphalgorithms_exercises-7",
  "level": "2",
  "url": "s_graphalgorithms_exercises.html#s_graphalgorithms_exercises-7",
  "type": "Exercise",
  "number": "12.5.7",
  "title": "",
  "body": "  A new local bank is being created and will establish a headquarters , two branches and , and four ATMs , , , and . They need to build a computer network such that the headquarters, branches, and ATMs can all intercommunicate. Furthermore, they will need to be networked with the Federal Reserve Bank of Atlanta, . The costs of the feasible network connections (in units of $10,000) are listed below: The bank wishes to minimize the cost of building its network (which must allow for connection, possibly routed through other nodes, from each node to each other node), however due to the need for high-speed communication, they must pay to build the connection from to as well as the connection from to . Give a list of the connections the bank should establish in order to minimize their total cost, subject to this constraint. Be sure to explain how you selected the connections and how you know the total cost is minimized.   "
},
{
  "id": "s_graphalgorithms_exercises-8",
  "level": "2",
  "url": "s_graphalgorithms_exercises.html#s_graphalgorithms_exercises-8",
  "type": "Exercise",
  "number": "12.5.8",
  "title": "",
  "body": "  A disconnected weighted graph obviously has no spanning trees. However, it is possible to find a spanning forest of minimum weight in such a graph. Explain how to modify both Kruskal's algorithm and Prim's algorithm to do this.   "
},
{
  "id": "s_graphalgorithms_exercises-9",
  "level": "2",
  "url": "s_graphalgorithms_exercises.html#s_graphalgorithms_exercises-9",
  "type": "Exercise",
  "number": "12.5.9",
  "title": "",
  "body": "  Prove .   "
},
{
  "id": "s_graphalgorithms_exercises-10",
  "level": "2",
  "url": "s_graphalgorithms_exercises.html#s_graphalgorithms_exercises-10",
  "type": "Exercise",
  "number": "12.5.10",
  "title": "",
  "body": "  In the paper where Kruskal's algorithm first appeared, he considered the algorithm a route to a nicer proof that in a connected weighted graph with no two edges having the same weight, there is a unique minimum weight spanning tree. Prove this fact using Kruskal's algorithm.   "
},
{
  "id": "s_graphalgorithms_exercises-11",
  "level": "2",
  "url": "s_graphalgorithms_exercises.html#s_graphalgorithms_exercises-11",
  "type": "Exercise",
  "number": "12.5.11",
  "title": "",
  "body": "  Use Dijkstra's algorithm to find the distance from to each other vertex in the digraph shown in and a directed path of that length.   A directed graph     "
},
{
  "id": "s_graphalgorithms_exercises-12",
  "level": "2",
  "url": "s_graphalgorithms_exercises.html#s_graphalgorithms_exercises-12",
  "type": "Exercise",
  "number": "12.5.12",
  "title": "",
  "body": "  contains the length of the directed edge in the intersection of row  and column  in a digraph with vertex set . For example, . (On the other hand, .) Use this data and Dijkstra's algorithm to find the distance from to each of the other vertices and a directed path of that length from .   A digraph represented as a table of data                 0  12  8  43  79  35     93  0  18  21  60  33     17  3  0  37  50  30     85  10  91  0  17  7     28  47  39  14  0  108     31  7  29  73  20  0      "
},
{
  "id": "s_graphalgorithms_exercises-13",
  "level": "2",
  "url": "s_graphalgorithms_exercises.html#s_graphalgorithms_exercises-13",
  "type": "Exercise",
  "number": "12.5.13",
  "title": "",
  "body": "  Use Dijkstra's algorithm to find the distance from to each other vertex in the digraph shown in and a directed path of that length.   A directed graph     "
},
{
  "id": "s_graphalgorithms_exercises-14",
  "level": "2",
  "url": "s_graphalgorithms_exercises.html#s_graphalgorithms_exercises-14",
  "type": "Exercise",
  "number": "12.5.14",
  "title": "",
  "body": "  contains the length of the directed edge in the intersection of row  and column  in a digraph with vertex set . For example, . (On the other hand, .) Use this data and Dijkstra's algorithm to find the distance from to each of the other vertices and a directed path of that length from .   A digraph represented as a table of data                 0  7  17  55  83  42     14  0  13  47  27  17     37  42  0  16  93  28     10  6  8  0  4  32     84  19  42  8  0  45     36  3  76  5  17  0      "
},
{
  "id": "s_graphalgorithms_exercises-15",
  "level": "2",
  "url": "s_graphalgorithms_exercises.html#s_graphalgorithms_exercises-15",
  "type": "Exercise",
  "number": "12.5.15",
  "title": "",
  "body": "  Give an example of a digraph having an undirected path between each pair of vertices, but having a root vertex so that Dijkstra's algorithm cannot find a path of finite length from to some vertex .   "
},
{
  "id": "s_graphalgorithms_exercises-16",
  "level": "2",
  "url": "s_graphalgorithms_exercises.html#s_graphalgorithms_exercises-16",
  "type": "Exercise",
  "number": "12.5.16",
  "title": "",
  "body": "  Notice that in our discussion of Dijkstra's algorithm, we required that the edge weights be nonnegative. If the edge weights are lengths and meant to model distance, this makes perfect sense. However, in some cases, it might be reasonable to allow negative edge weights. For example, suppose that a positive weight means there is a cost to travel along the directed edge while a negative edge weight means that you make money for traveling along the directed edge. In this case, a directed path with positive total weight results in paying out to travel it, while one with negative total weight results in a profit.  Give an example to show that Dijkstra's algorithm does not always find the path of minimum total weight when negative edge weights are allowed.  Bob and Xing are considering this situation, and Bob suggests that a little modification to the algorithm should solve the problem. He says that if there are negative weights, they just have to find the smallest ( , most negative weight) and add the absolute value of that weight to every directed edge. For example, if for every directed edge , Bob is suggesting that they add to every edge weight. Xing is skeptical, and for good reason. Give an example to show why Bob's modification won't work.     "
},
{
  "id": "s_networkflow_intro",
  "level": "1",
  "url": "s_networkflow_intro.html",
  "type": "Section",
  "number": "13.1",
  "title": "Basic Notation and Terminology",
  "body": " Basic Notation and Terminology  A directed graph in which for each pair of vertices at most one of the directed edges and between them is present is called an oriented graph graph oriented . The basic setup for a network flow problem begins with an oriented graph , called a network network , in which we have two special vertices called the source source and the sink sink . We use the letter to denote the source, while the letter is used to denote the sink (terminus). All edges incident with the source are oriented away from the source, while all edges incident with the sink are oriented with the sink. Furthermore, on each edge, we have a non-negative capacity capacity of an edge , which functions as a constraint on how much can be transmitted via the edge. The capacity of the edge is denoted or by . In a computer program, the nodes of a network may be identified with integer keys, but in this text, we will typically use letters in labeling the nodes of a network. This helps to distinguish nodes from capacities in diagrams of networks. We illustrate a network in . The numbers associated with the edges are their capacities, so, for instance, and .   A Network    A flow flow network flow  in a network is a function which assigns to each directed edge a non-negative value so that the following conservation laws hold:  conservation law , , the amount leaving the source is equal to the amount arriving at the sink. This quantity is called the value flow value of of the flow .  conservation law  For every vertex which is neither the source nor the sink the amount leaving is equal to the amount entering . That is, .    We illustrate a flow in a network in .   A Network Flow    In this figure, the numbers associated with each edge are its capacity and the amount of flow that places on that edge. For example, the edge has capacity and currently carries a flow of . (Since , it is always easy to determine which number is the capacity and which is the flow.) The value of this flow is . To see that the second conservation law holds at, for example, vertex , note that the flow into is and the flow out of is .  Given a network, it is very easy to find a flow. We simply assign for every edge . It is very easy to underestimate the importance of this observation, actually. Network flow problems are a special case of a more general class of optimization problems known as linear programs , and in general, it may be very difficult to find a feasible solution to a linear programming problem. In fact, conceptually, finding a feasible solution any solution is just as hard as finding an optimal solution.  "
},
{
  "id": "s_networkflow_intro-2",
  "level": "2",
  "url": "s_networkflow_intro.html#s_networkflow_intro-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "oriented graph network source sink capacity "
},
{
  "id": "fig_networkflow_network",
  "level": "2",
  "url": "s_networkflow_intro.html#fig_networkflow_network",
  "type": "Figure",
  "number": "13.1",
  "title": "",
  "body": " A Network   "
},
{
  "id": "s_networkflow_intro-4",
  "level": "2",
  "url": "s_networkflow_intro.html#s_networkflow_intro-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "flow conservation laws value "
},
{
  "id": "fig_networkflow_netflow",
  "level": "2",
  "url": "s_networkflow_intro.html#fig_networkflow_netflow",
  "type": "Figure",
  "number": "13.2",
  "title": "",
  "body": " A Network Flow   "
},
{
  "id": "s_networkflow_intro-8",
  "level": "2",
  "url": "s_networkflow_intro.html#s_networkflow_intro-8",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "linear programs "
},
{
  "id": "s_networkflow_flows-cuts",
  "level": "1",
  "url": "s_networkflow_flows-cuts.html",
  "type": "Section",
  "number": "13.2",
  "title": "Flows and Cuts",
  "body": " Flows and Cuts  Considering the applications suggested at the beginning of the chapter, it is natural to ask for the maximum value of a flow in a given network. Put another way, we want to find the largest number so that there exists a flow of value in the network. Of course, we not only want to find the maximum value , but we also want to find a flow having this value. Although it may seem a bit surprising, we will develop an efficient algorithm which both finds a flow of maximum value and finds a certificate verifying the claim of optimality. This certificate makes use of the following important concept.  A partition of the vertex set of a network with and is called a cut cut . Our choice of and for the names of the two parts of the partition will make more sense later in the chapter. The capacity capacity of a cut of a cut , denoted , is defined by Put another way, the capacity of the cut is the total capacity of all edges from   to  . Note that in computing the capacity of the cut , we only add the capacities of the edges from to . We do not include the edges from to in this sum.   Let's again take a look at the network in . Let's first consider the cut with Here we see that the capacity of the cut is We must be a bit more careful, however, when we look at the cut with Here the capacity of the cut is Notice that we do not include in the calculation as the directed edge is from to .   The relationship between flows and cuts rests on the following fundamentally important theorem.    Let be a network, let be a flow in , and let be a cut. The value of the flow is at most as large as the capacity of the cut.    In this proof (and throughout the chapter), we adopt the very reasonable convention that if is not a directed edge of a network .  Let be a flow of value and let be a cut. First notice that since the second summation is . Also, by the second of our flow conservation laws, we have for any vertex other than the source and the sink, Now we have At this point, we want to pause and look at the last line. Notice that if is a directed edge with both endpoints in , then when the outer sum is conducted for , we get an overall contribution of . On the other hand, when it is conducted for , we get a contribution of . Thus, the terms cancel out and everything simplifies to Thus .     Bob's getting a bit of a sense of déjà vu after reading . He remembers from that the maximum size of a clique in a graph is always at most the minimum number of colors required to properly color the graph. However, he also remembers that there are graphs without cliques of size three but with arbitrarily large chromatic number, so he's not too hopeful that this theorem is going to help out much here. Yolanda chimes in with a reminder of , where they learned that the maximum size of an antichain in a poset is equal to the minimum number of chains into which the ground set of the poset can be partitioned. Alice points out that Yolanda's statement is still true if the words chain and antichain are swapped. This sparks some intense debate about whether the maximum value of a flow in a network must always be equal to the minimum capacity of a cut in that network. After a while, Carlos suggests that continuing to read might be the best idea for resolving their debate.   "
},
{
  "id": "s_networkflow_flows-cuts-3",
  "level": "2",
  "url": "s_networkflow_flows-cuts.html#s_networkflow_flows-cuts-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "cut capacity "
},
{
  "id": "s_networkflow_flows-cuts-4",
  "level": "2",
  "url": "s_networkflow_flows-cuts.html#s_networkflow_flows-cuts-4",
  "type": "Example",
  "number": "13.3",
  "title": "",
  "body": " Let's again take a look at the network in . Let's first consider the cut with Here we see that the capacity of the cut is We must be a bit more careful, however, when we look at the cut with Here the capacity of the cut is Notice that we do not include in the calculation as the directed edge is from to .  "
},
{
  "id": "thm_networkflow_flowleqcut",
  "level": "2",
  "url": "s_networkflow_flows-cuts.html#thm_networkflow_flowleqcut",
  "type": "Theorem",
  "number": "13.4",
  "title": "",
  "body": "  Let be a network, let be a flow in , and let be a cut. The value of the flow is at most as large as the capacity of the cut.    In this proof (and throughout the chapter), we adopt the very reasonable convention that if is not a directed edge of a network .  Let be a flow of value and let be a cut. First notice that since the second summation is . Also, by the second of our flow conservation laws, we have for any vertex other than the source and the sink, Now we have At this point, we want to pause and look at the last line. Notice that if is a directed edge with both endpoints in , then when the outer sum is conducted for , we get an overall contribution of . On the other hand, when it is conducted for , we get a contribution of . Thus, the terms cancel out and everything simplifies to Thus .   "
},
{
  "id": "s_networkflow_flows-cuts-7",
  "level": "2",
  "url": "s_networkflow_flows-cuts.html#s_networkflow_flows-cuts-7",
  "type": "Discussion",
  "number": "13.5",
  "title": "",
  "body": " Bob's getting a bit of a sense of déjà vu after reading . He remembers from that the maximum size of a clique in a graph is always at most the minimum number of colors required to properly color the graph. However, he also remembers that there are graphs without cliques of size three but with arbitrarily large chromatic number, so he's not too hopeful that this theorem is going to help out much here. Yolanda chimes in with a reminder of , where they learned that the maximum size of an antichain in a poset is equal to the minimum number of chains into which the ground set of the poset can be partitioned. Alice points out that Yolanda's statement is still true if the words chain and antichain are swapped. This sparks some intense debate about whether the maximum value of a flow in a network must always be equal to the minimum capacity of a cut in that network. After a while, Carlos suggests that continuing to read might be the best idea for resolving their debate.  "
},
{
  "id": "s_networkflow_augmenting",
  "level": "1",
  "url": "s_networkflow_augmenting.html",
  "type": "Section",
  "number": "13.3",
  "title": "Augmenting Paths",
  "body": " Augmenting Paths   In this section, we develop the classic labeling algorithm of Ford and Fulkerson which starts with any flow in a network and proceeds to modify the flow always increasing the value of the flow until reaching a step where no further improvements are possible. The algorithm will also help resolve the debate Alice, Bob, Carlos, and Yolanda were having in the previous section.  Our presentation of the labeling algorithm makes use of some natural and quite descriptive terminology. Suppose we have a network with a flow of value . We call the current flow and look for ways to augment  by making a relatively small number of changes. An edge with is said to be used , and when , we say the edge is full . When , we say the edge has spare capacity , and when , we say the edge is empty . Note that we simply ignore edges with zero capacity.  The key tool in modifying a network flow is a special type of path, and these paths are not necessarily directed paths. An augmenting path path augmenting is a sequence of distinct vertices in the network such that , , and for each , either  has spare capacity or  is used.  When condition ( ) holds, it is customary to refer to the edge as a forward edge of the augmenting path . Similarly, if condition ( ) holds, then the (nondirected) edge is called a backward edge since the path moves from to , which is opposite the direction of the edge.   Let's look again at the network and flow in . The sequence of vertices meets the criteria to be an augmenting path, and each edge in it is a forward edge. Notice that increasing the flow on each of , , and by any positive amount results in increasing the value of the flow and preserves the conservation laws.  If our first example jumped out at you as an augmenting path, it's probably less clear at a quick glance that is also an augmenting path. All of the edges are forward edges except for , since it's actually that is a directed edge in the network. Don't worry if it's not clear how this path can be used to increase the value of the flow in the network, as that's our next topic.   Ignoring, for the moment, the issue of finding augmenting paths, let's see how they can be used to modify the current flow in a way that increases its value by some . Here's how for an augmenting path . First, let be the positive number defined by: The quantity is nothing but the spare capacity on the edge , and thus is the largest amount by which all of the forward edges of . Note that the edges and are always forward edges, so the positive quantity is defined for every augmenting path.  When the augmenting path has no backward edges, we set . But when has one or more backward edges, we pause to set Since every backward edge is used, whenever we need to define it. We then set .  In either case, we now have a positive number and we make the following elementary observation, for which you are asked to provide a proof in .    Suppose we have an augmenting path with calculated as above. Modify the flow by changing the values along the edges of the path by an amount which is either or according to the following rules:  Increase the flow along the edges of which are forwards.  Decrease the flow along the edges of which are backwards.  Then the resulting function is a flow and it has value .     The network flow shown in has many augmenting paths. We already saw two of them in , which we call and below. In the list below, be sure you understand why each path is an augmenting path and how the value of is determined for each path.  with . All edges are forward.  with . All edges are forward.  with . All edges are forward, except which is backward.  with . All edges are forward, except and which are backward.    In , you are asked to update the flow in for each of these four paths individually.     Caution on Augmenting Paths  Bob's gotten really good at using augmenting paths to increase the value of a network flow. He's not sure how to find them quite yet, but he knows a good thing when he sees it. He's inclined to think that any augmenting path will be a good deal in his quest for a maximum-valued flow. Carlos is pleased about Bob's enthusiasm for network flows but is beginning to think that he should warn Bob about the dangers in using just any old augmenting path to update a network flow. They agree that the best situation is when the number of updates that need to be made is small in terms of the number of vertices in the network and that the size of the capacities on the edges and the value of a maximum flow should not have a role in the number of updates.  Bob says he can't see any way that the edge capacities could create a situation where a network with only a few vertices requires many updates, Carlos is thinking that an example is in order. He asks Bob to pick his favorite very large integer and to call it . He then draws the network on four vertices shown in . Bob quickly recognizes that the maximum value of a flow in this network is . He does this using the flow with , , , and . Carlos is pleased with Bob's work.   A Small Network    Since this network is really small, it was easy for Bob to find the maximum flow. However, Bob and Carlos agree that eyeballing is not an approach that scales well to larger networks, so they need to have an approach to finding that flow using augmenting paths. Bob tells Carlos to give him an augmenting path, and he'll do the updating. Carlos suggests the augmenting path , and Bob determines that for this augmenting path. He updates the network (starting from the zero flow, , with for every edge ) and it now has value . Bob asks Carlos for another augmenting path, so Carlos gives him . Now is backward, but that doesn't phase Bob. He performs the update, obtaining a flow of value with empty again.  Despite Carlos' hope that Bob could already see where this was heading, Bob eagerly asks for another augmenting path. Carlos promptly gives him , which again has . Bob's update gives them a flow of value . Before Carlos can suggest another augmenting path, Bob realizes what the problem is. He points out that Carlos can just give him again, which will still have and result in the flow value increasing to . He says that they could keep alternating between those two augmenting paths, increasing the flow value by each time, until they'd made updates to finally have a flow of value . Since the network only has four vertices and is very large, he realizes that using any old augmenting path is definitely not a good idea.  Carlos leaves Bob to try to figure out a better approach. He realizes that starting from the zero flow, he'd only need the augmenting paths and , each with to quickly get the maximum flow. However, he's not sure why an algorithm should find those augmenting paths to be preferable. About this time, Dave wanders by and mumbles something about the better augmenting paths using only two edges, while Carlos' two evil augmenting paths each used three. Bob thinks that maybe Dave's onto something, so he decides to go back to reading his textbook.   "
},
{
  "id": "s_networkflow_augmenting-2-2",
  "level": "2",
  "url": "s_networkflow_augmenting.html#s_networkflow_augmenting-2-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "current flow augment used full spare capacity empty "
},
{
  "id": "s_networkflow_augmenting-2-3",
  "level": "2",
  "url": "s_networkflow_augmenting.html#s_networkflow_augmenting-2-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "augmenting path forward backward "
},
{
  "id": "exa_networkflow_augpath",
  "level": "2",
  "url": "s_networkflow_augmenting.html#exa_networkflow_augpath",
  "type": "Example",
  "number": "13.6",
  "title": "",
  "body": " Let's look again at the network and flow in . The sequence of vertices meets the criteria to be an augmenting path, and each edge in it is a forward edge. Notice that increasing the flow on each of , , and by any positive amount results in increasing the value of the flow and preserves the conservation laws.  If our first example jumped out at you as an augmenting path, it's probably less clear at a quick glance that is also an augmenting path. All of the edges are forward edges except for , since it's actually that is a directed edge in the network. Don't worry if it's not clear how this path can be used to increase the value of the flow in the network, as that's our next topic.  "
},
{
  "id": "prop_networkflow_update",
  "level": "2",
  "url": "s_networkflow_augmenting.html#prop_networkflow_update",
  "type": "Proposition",
  "number": "13.7",
  "title": "",
  "body": "  Suppose we have an augmenting path with calculated as above. Modify the flow by changing the values along the edges of the path by an amount which is either or according to the following rules:  Increase the flow along the edges of which are forwards.  Decrease the flow along the edges of which are backwards.  Then the resulting function is a flow and it has value .   "
},
{
  "id": "exa_networkflow_delta",
  "level": "2",
  "url": "s_networkflow_augmenting.html#exa_networkflow_delta",
  "type": "Example",
  "number": "13.8",
  "title": "",
  "body": " The network flow shown in has many augmenting paths. We already saw two of them in , which we call and below. In the list below, be sure you understand why each path is an augmenting path and how the value of is determined for each path.  with . All edges are forward.  with . All edges are forward.  with . All edges are forward, except which is backward.  with . All edges are forward, except and which are backward.    In , you are asked to update the flow in for each of these four paths individually.  "
},
{
  "id": "fig_networkflow_smallnet",
  "level": "2",
  "url": "s_networkflow_augmenting.html#fig_networkflow_smallnet",
  "type": "Figure",
  "number": "13.9",
  "title": "",
  "body": " A Small Network   "
},
{
  "id": "s_networkflow_labeling-algorithm",
  "level": "1",
  "url": "s_networkflow_labeling-algorithm.html",
  "type": "Section",
  "number": "13.4",
  "title": "The Ford-Fulkerson Labeling Algorithm",
  "body": " The Ford-Fulkerson Labeling Algorithm  In this section, we outline the classic Ford-Fulkerson labeling algorithm for finding a maximum flow in a network. The algorithm begins with a linear order on the vertex set which establishes a notion of precedence . Typically, the first vertex in this linear order is the source while the second is the sink. After that, the vertices can be listed in any order. In this book, we will use the following convention: the vertices will be labeled with capital letters of the English alphabet and the linear order will be , which we will refer to as the pseudo-alphabetic order pseudo-alphabetic order . Of course, this convention only makes sense for networks with at most vertices, but this limitation will not cramp our style. For real world problems, we take comfort in the fact that computers can deal quite easily with integer keys of just about any size.  Before providing a precise description of the algorithm, let's take a minute to consider a general overview. In carrying out the labeling algorithm, vertices will be classified as either labeled or unlabeled . At first, we will start with only the source being labeled while all other vertices will be unlabeled. By criteria yet to be spelled out, we will systematically consider unlabeled vertices and determine which should be labeled. If we ever label the sink, then we will have discovered an augmenting path, and the flow will be suitably updated. After updating the flow, we start over again with just the source being labeled.  This process will be repeated until (and we will see that this always occurs) we reach a point where the labeling halts with some vertices labeled (one of these is the source) and some vertices unlabeled (one of these is the sink). We will then note that the partition into labeled and unlabeled vertices (hence our choice of and as names) is a cut whose capacity is exactly equal to the value of the current flow. This resolves the debate from earlier in the chapter and says that the maximum flow\/minimum cut question is more like antichains and partitioning into chains than clique number and chromatic number. In particular, the labeling algorithm will provide a proof of the following theorem:   The Max Flow Min Cut Theorem   Let be a network. If is the maximum value of a flow and is the minimum capacity of a cut, then .    We're now ready to describe the Ford-Fulkerson labeling algorithm in detail.   Ford-Fulkerson Labeling Algorithm  labeling algorithm  Ford-Fulkerson labeling algorithm      Labeling the Vertices  Vertices will be labeled with ordered triples of symbols. Each time we start the labeling process, we begin by labeling the source with the triple . The rules by which we label vertices will be explicit.    Potential on a Labeled Vertex  Let be a labeled vertex. The third coordinate of the label given to will be positive real number although it may be infinite. We call this quantity the potential potential on and denote it by . (The potential will serve as the amount that the flow can be updated by.) Note that the potential on the source is infinite.    First Labeled, First Scanned  The labeling algorithm involves a scan from a labeled vertex . As the vertices are labeled, they determine another linear order. The source will always be the first vertex in this order. After that, the order in which vertices are labeled will change with time. But the important rule is that we scan vertices in the order that they are labeled until we label the sink. If for example, the initial scan always done from the source results in labels being applied to vertices , and , then we next scan from vertex . If that scan results in vertices , , and being labeled, then we next scan from , as it was labeled before , even though precedes in the pseudo-alphabetic order. This aspect of the algorithm results in a breadth-first search of the vertices looking for ways to label previously unlabeled vertices.   Never Relabel a Vertex  Once a vertex is labeled, we do not change its label. We are content to label previously unlabeled vertices up until the time where we label the sink. Then, after updating the flow and increasing the value, all labels, except of course the special label on the source, are discarded and we start all over again.    Labeling Vertices Using Forward Edges  Suppose we are scanning from a labeled vertex with potential . From , we consider the unlabeled neighbors of in pseudo-alphabetic order. Now suppose that we are looking at a neighbor of with the edge belonging to the network. This means that the edge is directed from to . If is not full, then we label the vertex with the triple where . We use this definition since the flow cannot be increased by more than the prior potential or the spare capacity on . Note that the potential is positive since is the minimum of two positive numbers.    Labeling Vertices Using Backward Edges  Now suppose that we are looking at a neighbor of with the edge belonging to the network. This means that the edge is directed from to . If is used, then we label the vertex with the triple where . Here is defined this way since the flow on cannot be decreased by more than or . Again, note that the potential is positive since is the minimum of two positive numbers.    What Happens When the Sink is Labeled?  The labeling algorithm halts if the sink is ever labeled. Note that we are always trying our best to label the sink, since in each scan the sink is the very first vertex to be considered. Now suppose that the sink is labeled with the triple . Note that the second coordinate on the label must be since all edges incident with the sink are oriented towards the sink.  We claim that we can find an augmenting path which results in an increased flow with , the potential on the sink. To see this, we merely back-track. The sink got its label from , got its label from , and so forth. Eventually, we discover a vertex which got its label from the source. The augmenting path is then The value of for this path is the potential on the sink since we've carefully ensured that .   And if the Sink is Not Labeled?  On the other hand, suppose we have scanned from every labeled vertex and there are still unlabeled vertices remaining, one of which is the sink. Now we claim victory. To see that we have won, we simply observe that if is the set of labeled vertices, and is the set of unlabeled vertices, then every edge with and is full, , . If this were not the case, then would qualify for a label with as the first coordinate. Also, note that for every edge with and . Regardless, we see that the capacity of the cut is exactly equal to the value of the current flow, so we have both a maximum flow and minimum cut providing a certificate of optimality.       "
},
{
  "id": "s_networkflow_labeling-algorithm-2",
  "level": "2",
  "url": "s_networkflow_labeling-algorithm.html#s_networkflow_labeling-algorithm-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "precedence pseudo-alphabetic order "
},
{
  "id": "s_networkflow_labeling-algorithm-3",
  "level": "2",
  "url": "s_networkflow_labeling-algorithm.html#s_networkflow_labeling-algorithm-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "labeled unlabeled "
},
{
  "id": "s_networkflow_labeling-algorithm-5",
  "level": "2",
  "url": "s_networkflow_labeling-algorithm.html#s_networkflow_labeling-algorithm-5",
  "type": "Theorem",
  "number": "13.10",
  "title": "The Max Flow–Min Cut Theorem.",
  "body": " The Max Flow Min Cut Theorem   Let be a network. If is the maximum value of a flow and is the minimum capacity of a cut, then .   "
},
{
  "id": "s_networkflow_labeling-algorithm-6",
  "level": "2",
  "url": "s_networkflow_labeling-algorithm.html#s_networkflow_labeling-algorithm-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Ford-Fulkerson labeling algorithm "
},
{
  "id": "alg_labeling",
  "level": "2",
  "url": "s_networkflow_labeling-algorithm.html#alg_labeling",
  "type": "Algorithm",
  "number": "13.11",
  "title": "Ford-Fulkerson Labeling Algorithm.",
  "body": " Ford-Fulkerson Labeling Algorithm  labeling algorithm  Ford-Fulkerson labeling algorithm      Labeling the Vertices  Vertices will be labeled with ordered triples of symbols. Each time we start the labeling process, we begin by labeling the source with the triple . The rules by which we label vertices will be explicit.    Potential on a Labeled Vertex  Let be a labeled vertex. The third coordinate of the label given to will be positive real number although it may be infinite. We call this quantity the potential potential on and denote it by . (The potential will serve as the amount that the flow can be updated by.) Note that the potential on the source is infinite.    First Labeled, First Scanned  The labeling algorithm involves a scan from a labeled vertex . As the vertices are labeled, they determine another linear order. The source will always be the first vertex in this order. After that, the order in which vertices are labeled will change with time. But the important rule is that we scan vertices in the order that they are labeled until we label the sink. If for example, the initial scan always done from the source results in labels being applied to vertices , and , then we next scan from vertex . If that scan results in vertices , , and being labeled, then we next scan from , as it was labeled before , even though precedes in the pseudo-alphabetic order. This aspect of the algorithm results in a breadth-first search of the vertices looking for ways to label previously unlabeled vertices.   Never Relabel a Vertex  Once a vertex is labeled, we do not change its label. We are content to label previously unlabeled vertices up until the time where we label the sink. Then, after updating the flow and increasing the value, all labels, except of course the special label on the source, are discarded and we start all over again.    Labeling Vertices Using Forward Edges  Suppose we are scanning from a labeled vertex with potential . From , we consider the unlabeled neighbors of in pseudo-alphabetic order. Now suppose that we are looking at a neighbor of with the edge belonging to the network. This means that the edge is directed from to . If is not full, then we label the vertex with the triple where . We use this definition since the flow cannot be increased by more than the prior potential or the spare capacity on . Note that the potential is positive since is the minimum of two positive numbers.    Labeling Vertices Using Backward Edges  Now suppose that we are looking at a neighbor of with the edge belonging to the network. This means that the edge is directed from to . If is used, then we label the vertex with the triple where . Here is defined this way since the flow on cannot be decreased by more than or . Again, note that the potential is positive since is the minimum of two positive numbers.    What Happens When the Sink is Labeled?  The labeling algorithm halts if the sink is ever labeled. Note that we are always trying our best to label the sink, since in each scan the sink is the very first vertex to be considered. Now suppose that the sink is labeled with the triple . Note that the second coordinate on the label must be since all edges incident with the sink are oriented towards the sink.  We claim that we can find an augmenting path which results in an increased flow with , the potential on the sink. To see this, we merely back-track. The sink got its label from , got its label from , and so forth. Eventually, we discover a vertex which got its label from the source. The augmenting path is then The value of for this path is the potential on the sink since we've carefully ensured that .   And if the Sink is Not Labeled?  On the other hand, suppose we have scanned from every labeled vertex and there are still unlabeled vertices remaining, one of which is the sink. Now we claim victory. To see that we have won, we simply observe that if is the set of labeled vertices, and is the set of unlabeled vertices, then every edge with and is full, , . If this were not the case, then would qualify for a label with as the first coordinate. Also, note that for every edge with and . Regardless, we see that the capacity of the cut is exactly equal to the value of the current flow, so we have both a maximum flow and minimum cut providing a certificate of optimality.      "
},
{
  "id": "s_networkflow_example",
  "level": "1",
  "url": "s_networkflow_example.html",
  "type": "Section",
  "number": "13.5",
  "title": "A Concrete Example",
  "body": " A Concrete Example   Let's apply the Labeling Algorithm to the network flow shown in . Then we start with the source: Since the source is the first vertex labeled, it is also the first one scanned. So we look at the neighbors of using the pseudo-alphabetic order on the vertices. Thus, the first one to be considered is vertex and since the edge is not full, we label as We then consider vertex and label it as Next is vertex , which is labeled as At this point, the scan from is complete.  The first vertex after to be labeled was , so we now scan from . The (unlabeled) neighbors of to be considered, in order, are , , and . This results in the following labels: The next vertex to be scanned is , but has no unlabeled neighbors, so we then move on to , which again has no unlabeled neighbors. Finally, we scan from , and using the pseudo-alphabetic order, we first consider the sink (which in this case is the only remaining unlabeled vertex). This results in the following label for . Now that the sink is labeled, we know there is an augmenting path. We discover this path by backtracking. The sink got its label from , got its label from , and got its label from . Therefore, the augmenting path is with . All edges on this path are forward. The flow is then updated by increasing the flow on the edges of by . This results in the flow shown in . The value of this flow is .   An Updated Network Flow    Here is the sequence (reading down the columns) of labels that will be found when the labeling algorithm is applied to this updated flow. (Note that in the scan from , the vertex will not be labeled, since now the edge is full.) This labeling results in the augmenting path with .  After this update, the value of the flow has been increased and is now . We start the labeling process over again and repeat until we reach a stage where some vertices (including the source) are labeled and some vertices (including the sink) are unlabeled.    How the Labeling Algorithm Halts  Consider the network flow in .   Another Network Flow    The value of the current flow is . Applying the labeling algorithm using the pseudo-alphabetic order results in the following labels (reading down the columns): These labels result in the augmenting path with . After updating the flow and increasing its value to , the labeling algorithm halts with the following labels: Now we observe that the labeled and unlabeled vertices are and . Furthermore, the capacity of the cut is This shows that we have found a cut whose capacity is exactly equal to the value of the current flow. In turn, this shows that the flow is optimal.   "
},
{
  "id": "fig_networkflow_updated-flow",
  "level": "2",
  "url": "s_networkflow_example.html#fig_networkflow_updated-flow",
  "type": "Figure",
  "number": "13.12",
  "title": "",
  "body": " An Updated Network Flow   "
},
{
  "id": "fig_networkflow_flow4",
  "level": "2",
  "url": "s_networkflow_example.html#fig_networkflow_flow4",
  "type": "Figure",
  "number": "13.13",
  "title": "",
  "body": " Another Network Flow   "
},
{
  "id": "s_networkflow_integer-programming",
  "level": "1",
  "url": "s_networkflow_integer-programming.html",
  "type": "Section",
  "number": "13.6",
  "title": "Integer Solutions of Linear Programming Problems",
  "body": " Integer Solutions of Linear Programming Problems  A linear programming problem is an optimization problem that can be stated in the following form: Find the maximum value of a linear function subject to constraints , , where each constraint is a linear equation of the form: where all coefficients and constants are real numbers.  While the general subject of linear programming is far too broad for this course, we would be remiss if we didn't point out that:  Linear programming problems are a very important class of optimization problems and they have many applications in engineering, science, and industrial settings.  There are relatively efficient algorithms for finding solutions to linear programming problems.  A linear programming problem posed with rational coefficients and constants has an optimal solution with rational values if it has an optimal solution at all.  A linear programming problem posed with integer coefficients and constants need not have an optimal solution with integer values even when it has an optimal solution with rational values.  A very important theme in operations research is to determine when a linear programming problem posed in integers has an optimal solution with integer values. This is a subtle and often very difficult problem.  The problem of finding a maximum flow in a network is a special case of a linear programming problem.  A network flow problem in which all capacities are integers has a maximum flow in which the flow on every edge is an integer. The Ford-Fulkerson labeling algorithm guarantees this!  In general, linear programming algorithms are not used on networks. Instead, special purpose algorithms, such as Ford-Fulkerson, have proven to be more efficient in practice.    "
},
{
  "id": "s_networkflow_exercises",
  "level": "1",
  "url": "s_networkflow_exercises.html",
  "type": "Exercises",
  "number": "13.7",
  "title": "Exercises",
  "body": "   Consider the network diagram in . For each directed edge, the first number is the capacity and the second value is intended to give a flow in the network. However, the flow suggested is not valid.  Identify the reason(s) is not valid.  Without changing any of the edge capacities, modify into a valid flow . Try to use as few modifications as possible.     An invalid flow in a network        Alice claims to have found a (valid) network flow of value in the network shown in . Bob tells her that there's no way she's right, since no flow has value greater than . Who's right and why?   A network        Find an augmenting path with at least one backward edge for the flow in the network shown in . What is the value of for ? Carry out an update of using to obtain a new flow . What is the value of ?   A network with flow        Prove . You will need to verify that the flow conservation laws hold at each vertex along an augmenting path (other than and ). There are four cases to consider depending on the forward\/backward status of the two edges on the augmenting path that are incident with the vertex.      Find the capacity of the cut with in the network shown in .      Find the capacity of the cut with in the network shown in .      For each of the augmenting paths , , , and in , update the flow in . (Note that your solution to this exercise should consist of four network flows. Do not attempt to use the four paths in sequence to create one updated network flow.)      Continue running the Ford-Fulkerson labeling algorithm on the network flow in until the algorithm halts without labeling the sink. Find the value of the maximum flow as well as a cut of minimum capacity.      Use the Ford-Fulkerson labeling algorithm to find a maximum flow and a minimum cut in the network shown in by starting from the current flow shown there.   A network with flow        shows a network. Starting from the zero flow, , the flow with for every directed edge in the network, use the Ford-Fulkerson labeling algorithm to find a maximum flow and a minimum cut in this network.   A network        Consider a network in which the source has precisely three neighbors: , , and . Suppose also that , , and . You know that there is a flow on the network but you do not know how much flow is on any edge. You do know, however, that when the Ford-Fulkerson labeling algorithm is run on the network with current flow , the first two vertices labeled are with label and with label . Use this information to determine the value of the flow and explain how you do so.    "
},
{
  "id": "s_networkflow_exercises-1",
  "level": "2",
  "url": "s_networkflow_exercises.html#s_networkflow_exercises-1",
  "type": "Exercise",
  "number": "13.7.1",
  "title": "",
  "body": "  Consider the network diagram in . For each directed edge, the first number is the capacity and the second value is intended to give a flow in the network. However, the flow suggested is not valid.  Identify the reason(s) is not valid.  Without changing any of the edge capacities, modify into a valid flow . Try to use as few modifications as possible.     An invalid flow in a network     "
},
{
  "id": "s_networkflow_exercises-2",
  "level": "2",
  "url": "s_networkflow_exercises.html#s_networkflow_exercises-2",
  "type": "Exercise",
  "number": "13.7.2",
  "title": "",
  "body": "  Alice claims to have found a (valid) network flow of value in the network shown in . Bob tells her that there's no way she's right, since no flow has value greater than . Who's right and why?   A network     "
},
{
  "id": "s_networkflow_exercises-3",
  "level": "2",
  "url": "s_networkflow_exercises.html#s_networkflow_exercises-3",
  "type": "Exercise",
  "number": "13.7.3",
  "title": "",
  "body": "  Find an augmenting path with at least one backward edge for the flow in the network shown in . What is the value of for ? Carry out an update of using to obtain a new flow . What is the value of ?   A network with flow     "
},
{
  "id": "ex_networkflow_update",
  "level": "2",
  "url": "s_networkflow_exercises.html#ex_networkflow_update",
  "type": "Exercise",
  "number": "13.7.4",
  "title": "",
  "body": "  Prove . You will need to verify that the flow conservation laws hold at each vertex along an augmenting path (other than and ). There are four cases to consider depending on the forward\/backward status of the two edges on the augmenting path that are incident with the vertex.   "
},
{
  "id": "s_networkflow_exercises-5",
  "level": "2",
  "url": "s_networkflow_exercises.html#s_networkflow_exercises-5",
  "type": "Exercise",
  "number": "13.7.5",
  "title": "",
  "body": "  Find the capacity of the cut with in the network shown in .   "
},
{
  "id": "s_networkflow_exercises-6",
  "level": "2",
  "url": "s_networkflow_exercises.html#s_networkflow_exercises-6",
  "type": "Exercise",
  "number": "13.7.6",
  "title": "",
  "body": "  Find the capacity of the cut with in the network shown in .   "
},
{
  "id": "ex_networkflow_do-update",
  "level": "2",
  "url": "s_networkflow_exercises.html#ex_networkflow_do-update",
  "type": "Exercise",
  "number": "13.7.7",
  "title": "",
  "body": "  For each of the augmenting paths , , , and in , update the flow in . (Note that your solution to this exercise should consist of four network flows. Do not attempt to use the four paths in sequence to create one updated network flow.)   "
},
{
  "id": "s_networkflow_exercises-8",
  "level": "2",
  "url": "s_networkflow_exercises.html#s_networkflow_exercises-8",
  "type": "Exercise",
  "number": "13.7.8",
  "title": "",
  "body": "  Continue running the Ford-Fulkerson labeling algorithm on the network flow in until the algorithm halts without labeling the sink. Find the value of the maximum flow as well as a cut of minimum capacity.   "
},
{
  "id": "s_networkflow_exercises-9",
  "level": "2",
  "url": "s_networkflow_exercises.html#s_networkflow_exercises-9",
  "type": "Exercise",
  "number": "13.7.9",
  "title": "",
  "body": "  Use the Ford-Fulkerson labeling algorithm to find a maximum flow and a minimum cut in the network shown in by starting from the current flow shown there.   A network with flow     "
},
{
  "id": "s_networkflow_exercises-10",
  "level": "2",
  "url": "s_networkflow_exercises.html#s_networkflow_exercises-10",
  "type": "Exercise",
  "number": "13.7.10",
  "title": "",
  "body": "  shows a network. Starting from the zero flow, , the flow with for every directed edge in the network, use the Ford-Fulkerson labeling algorithm to find a maximum flow and a minimum cut in this network.   A network     "
},
{
  "id": "s_networkflow_exercises-11",
  "level": "2",
  "url": "s_networkflow_exercises.html#s_networkflow_exercises-11",
  "type": "Exercise",
  "number": "13.7.11",
  "title": "",
  "body": "  Consider a network in which the source has precisely three neighbors: , , and . Suppose also that , , and . You know that there is a flow on the network but you do not know how much flow is on any edge. You do know, however, that when the Ford-Fulkerson labeling algorithm is run on the network with current flow , the first two vertices labeled are with label and with label . Use this information to determine the value of the flow and explain how you do so.   "
},
{
  "id": "s_flowapplications_intro",
  "level": "1",
  "url": "s_flowapplications_intro.html",
  "type": "Section",
  "number": "14.1",
  "title": "Introduction",
  "body": " Introduction  Before delving into the particular combinatorial problems we wish to consider in this chapter, we will state a key theorem. When working with network flow problems, our examples thus far have always had integer capacities and we always found a maximum flow in which every edge carried an integer amount of flow. It is not, however, immediately obvious that this can always be done. Why, for example, could it not be the case that the maximum flow in a particularly pathological network with integer capacities is ? Or how about something even worse, such as ? We can rule out the latter because network flow problems fall into a larger class of problems known as linear programming problems, and a major theorem tells us that if a linear program is posed with all integer constraints (capacities in our case), the solution must be a rational number. However, in the case of network flows, something even stronger is true.    In a network flow problem in which every edge has integer capacity, there is a maximum flow in which every edge carries an integer amount of flow.    Notice that the above theorem does not guarantee that every maximum flow has integer flow on every edge, just that we are able to find one. With this theorem in hand, we now see that if we consider network flow problems in which the capacities are all we can find a maximum flow in which every edge carries a flow of either or . This can give us a combinatorial interpretation of the flow, in a sense using the full edges as edges that we take in some useful sense.  "
},
{
  "id": "s_flowapplications_intro-3",
  "level": "2",
  "url": "s_flowapplications_intro.html#s_flowapplications_intro-3",
  "type": "Theorem",
  "number": "14.1",
  "title": "",
  "body": "  In a network flow problem in which every edge has integer capacity, there is a maximum flow in which every edge carries an integer amount of flow.   "
},
{
  "id": "s_flowapplications_bip-match",
  "level": "1",
  "url": "s_flowapplications_bip-match.html",
  "type": "Section",
  "number": "14.2",
  "title": "Matchings in Bipartite Graphs",
  "body": " Matchings in Bipartite Graphs  Recall that a bipartite graph graph bipartite matching in  is one in which the vertices can be properly colored using only two colors. It is clear that such a coloring then partitions into two independent sets and , and so all the edges are between and . Bipartite graphs have many useful applications, particularly when we have two distinct types of objects and a relationship that makes sense only between objects of distinct types. For example, suppose that you have a set of workers and a set of jobs for the workers to do. We can consider the workers as the set and the jobs as and add an edge from worker to job if and only if is qualified to do .  For example, the graph in is a bipartite graph in which we've drawn on the bottom and on the top.   A bipartite graph    If is a graph, a set is a matching matching in if no two edges of share an endpoint. If is a vertex that is the endpoint of an edge in , we say that saturates or is saturated by . When is bipartite with , a matching is then a way to pair vertices in with vertices in so that no vertex is paired with more than one other vertex. We're usually interested in finding a maximum matching matching maximum , which is a matching that contains the largest number of edges possible, and in bipartite graphs we usually fix the sets and and seek a maximum matching from to . In our workers and jobs example, the matching problem thus becomes trying to find an assignment of workers to jobs such that each worker is assigned to a job for which he is qualified (meaning there's an edge),  each worker is assigned to at most one job, and  each job is assigned at most one worker.    As an example, in , the thick edges form a matching from to . Suppose that you're the manager of these workers (on the bottom) and must assign them to the jobs (on the top). Are you really making the best use of your resources by only putting four of six workers to work? There are no trivial ways to improve the number of busy workers, as the two without responsibilities right now cannot do any of the jobs that are unassigned. Perhaps there's a more efficient assignment that can be made by redoing some of the assignments, however. If there is, how should you go about finding it? If there is not, how would you justify to your boss that there's no better assignment of workers to jobs?   A matching in a bipartite graph    At the end of the section, we'll briefly look at a theorem on matchings in bipartite graphs that tells us precisely when an assignment of workers to jobs exists that ensures each worker has a job. First, however, we want to see how network flows can be used to find maximum matchings in bipartite graphs. The algorithm we give, while decent, is not the most efficient algorithm known for this problem. Therefore, it is not likely to be the one used in practice. However, it is a nice example of how network flows can be used to solve a combinatorial problem. The network that we use is formed from a bipartite graph by placing an edge from the source to each vertex of and an edge from each vertex of to the sink . The edges between and are oriented from to , and every edge is given capacity . contains the network corresponding to our graph from . Edges in this network are all oriented from bottom to top and all edges have capacity . The vertices in are in order from left to right, while the vertices in are from left to right.   The network corresponding to a bipartite graph      Now that we have translated a bipartite graph into a network, we need to address the correspondence between matchings and network flows. To turn a matching into a network flow, we start by placing one unit of flow on the edges of the matching. To have a valid flow, we must also place one unit of flow on the edges from to the vertices of saturated by . Since each of these vertices is incident with a single edge of , the flow out of each of them is , matching the flow in. Similarly, routing one unit of flow to from each of the vertices of saturated by takes care of the conservation laws for the remaining vertices. To go the other direction, simply note that the full edges from to in an integer-valued flow is a matching. Thus, we can find a maximum matching from to by simply running the labeling algorithm on the associated network in order to find a maximum flow.  In , we show thick edges to show the edges with flow in the flow corresponding to our guess at a matching from .   The flow corresponding to a matching      With priority sequence replacing our usual pseudo-alphabetic order, the labeling algorithm produces the labels shown below. This leads us to the augmenting path , which gives us the flow shown in .   The augmented flow      Is this a maximum flow? Another run of the labeling algorithm produces and then halts. Thus, the flow in is a maximum flow.  Now that we know we have a maximum flow, we'd like to be able to argue that the matching we've found is also maximum. After all, the boss isn't going to be happy if he later finds out that this fancy algorithm you claimed gave an optimal assignment of jobs to workers left the fifth worker ( ) without a job when all six of them could have been put to work. Let's take a look at which vertices were labeled by the Ford-Fulkerson labeling algorithm on the last run. There were three vertices ( , , and ) from labeled, while there were only two vertices ( and ) from labeled. Notice that and are the only vertices that are neighbors of , , or in . Thus, no matter how we choose the matching edges from , one of these vertices will be left unsaturated. Therefore, one of the workers must go without a job assignment. (In our example, it's the fifth, but it's possible to choose different edges for the matching so another one of them is left without a task.)  The phenomenon we've just observed is not unique to our example. In fact, in every bipartite graph with in which we cannot find a matching that saturates all the vertices of , we will find a similar configuration. This is a famous theorem of Hall, which we state below.   Hall's Theorem   Let be a bipartite graph with . There is a matching which saturates all vertices of if and only if for every subset , the set of neighbors of the vertices in satisfies .    "
},
{
  "id": "fig_flowapplications_bip_graph",
  "level": "2",
  "url": "s_flowapplications_bip-match.html#fig_flowapplications_bip_graph",
  "type": "Figure",
  "number": "14.2",
  "title": "",
  "body": " A bipartite graph   "
},
{
  "id": "s_flowapplications_bip-match-5",
  "level": "2",
  "url": "s_flowapplications_bip-match.html#s_flowapplications_bip-match-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "matching maximum matching "
},
{
  "id": "fig_flowapplications_bip_match",
  "level": "2",
  "url": "s_flowapplications_bip-match.html#fig_flowapplications_bip_match",
  "type": "Figure",
  "number": "14.3",
  "title": "",
  "body": " A matching in a bipartite graph   "
},
{
  "id": "fig_flowapplications_bipmatch_network",
  "level": "2",
  "url": "s_flowapplications_bip-match.html#fig_flowapplications_bipmatch_network",
  "type": "Figure",
  "number": "14.4",
  "title": "",
  "body": " The network corresponding to a bipartite graph     "
},
{
  "id": "fig_flowapplications_initial_flow",
  "level": "2",
  "url": "s_flowapplications_bip-match.html#fig_flowapplications_initial_flow",
  "type": "Figure",
  "number": "14.5",
  "title": "",
  "body": " The flow corresponding to a matching     "
},
{
  "id": "fig_flowapplications_bipmatch_maxflow",
  "level": "2",
  "url": "s_flowapplications_bip-match.html#fig_flowapplications_bipmatch_maxflow",
  "type": "Figure",
  "number": "14.6",
  "title": "",
  "body": " The augmented flow     "
},
{
  "id": "thm_flowapplications_hall",
  "level": "2",
  "url": "s_flowapplications_bip-match.html#thm_flowapplications_hall",
  "type": "Theorem",
  "number": "14.7",
  "title": "Hall’s Theorem.",
  "body": " Hall's Theorem   Let be a bipartite graph with . There is a matching which saturates all vertices of if and only if for every subset , the set of neighbors of the vertices in satisfies .   "
},
{
  "id": "s_flowapplications_chain-partition",
  "level": "1",
  "url": "s_flowapplications_chain-partition.html",
  "type": "Section",
  "number": "14.3",
  "title": "Chain partitioning",
  "body": " Chain partitioning  In , we discussed , which told us that for any poset of width , there is a partition of into , but no fewer, chains. However, we were only able to devise an algorithm to find this chain partition (and a maximum antichain) in the special case where was an interval order. Now, through the magic of network flows, we will be able to devise an efficient algorithm that works in general for all posets. However, to do so, we will require a slightly more complicated network than we devised in the previous section. chain partition   Suppose that the points of our poset are . We construct a network from consisting of the source , sink , and two points and for each point of . All edges in our network will have capacity . We add edges from to for and from to for . Of course, this network wouldn't be too useful, as it has no edges from the single-prime nodes to the double-prime nodes. To resolve this, we add an edge directed from to if and only if in .  Our running example in this section will be the poset in . We'll discuss the points of the poset as where is the number printed next to the point in the diagram.   A partially ordered set and the associated network .    A small poset     The associated network        The first step is to create the network, which we show in . In this network, all capacities are , edges are directed from bottom to top, the first row of ten vertices is the arranged consecutively with at the left and at the right, and the second row of ten vertices is the in increasing order of index. To see how this network is constructed, notice that in the poset, so we have the directed edge . Similarly, is less than , , and in the poset, leading to three directed edges leaving in the network. As a third example, since is maximal in the poset, there are no directed edges leaving .  We have not yet seen how we might turn a maximum flow (or minimum cut) in the network we've just constructed into a minimum chain partition or a maximum antichain. It will be easier to see how this works once we have a confirmed maximum flow. Rather than running the labeling algorithm starting from the zero flow, we eyeball a flow, such as the one shown in . (Again, we use the convention that thick edges are full, while thin edges are empty.)   An initial flow      When we run the labeling algorithm (using priority ), we obtain the following list of labels: Thus, we find the augmenting path , and the updated flow can be seen in .   A better flow      If we run the labeling algorithm again, the algorithm assigns the labels below, leaving the sink unlabeled. In , the black vertices are those the labeled in the final run, while the gold vertices are the unlabeled vertices.  Now that we've gone over the part you already knew how to do, we need to discuss how to translate this network flow and cut into a chain partition and an antichain. If there is a unit of flow on an edge , then a good first instinct is to place and in the same chain of a chain partition. To be able to do this successfully, of course, we need to ensure that this won't result in two incomparable points being placed in a chain. A way to see that everything works as desired is to think of starting with and then looking for flow leaving . If there is, it goes to a vertex , so we may add to the chain since . Continue in this manner until reaching a vertex in the network that does not have any flow leaving it. Then see if has flow coming into it. If it does, it's from a vertex that can be added since .  Let's see how following this process for the flow in leads to a chain partition. If we start with , we see that is full, so we place and in chain . Since has no flow leaving it, there are no greater elements to add to the chain. However, has flow in from , so we add to . We now see that has flow in from , so now . Vertex has no flow into it, so the building of the first chain stops. The first vertex we haven't placed into a chain is , so we note that is full, placing and in chain . We then look from and see no flow leaving. However, there is flow into from , so is added to . There is no flow out of , so . Now the first point not in a chain is , so we use the flow from to to place and in chain . Again, no flow out of , so we look to , which is receiving flow from . Adding to gives , and since every point is now in a chain, we may stop.  Even once we see that the above process does in fact generate a chain partition, it is not immediately clear that it's a minimum chain partition. For this, we need to find an antichain of as many points as there are chains in our partition. (In the example we've been using, we need to find a three-element antichain.) This is where tracking the labeled vertices comes in handy. Suppose we have determined a chain using the network flow. Since is the minimal element of this chain, there is no flow into and hence no flow out of . Since is unlabeled, this must mean that is unlabeled. Similarly, is the maximal element of , so there is no flow out of . Thus, is labeled. Now considering the sequence of vertices there must be a place where the vertices switch from being labeled to unlabeled. This must happen with labeled and unlabeled. To see why, suppose that and are both unlabeled while and are both labeled. Because and are consecutive in , there is flow on . Therefore, when scanning from , the vertex would be labeled. For each chain of the chain partition, we then take the first element for which is labeled and is unlabeled to form an antichain . To see that is an antichain, notice that if , then is an edge in the network. Therefore, the scan from would label . Using this process, we find that a maximum antichain in our example is .  "
},
{
  "id": "s_flowapplications_chain-partition-5",
  "level": "2",
  "url": "s_flowapplications_chain-partition.html#s_flowapplications_chain-partition-5",
  "type": "Figure",
  "number": "14.8",
  "title": "",
  "body": " A partially ordered set and the associated network .    A small poset     The associated network       "
},
{
  "id": "fig_flowapplications_poset_network_flow",
  "level": "2",
  "url": "s_flowapplications_chain-partition.html#fig_flowapplications_poset_network_flow",
  "type": "Figure",
  "number": "14.9",
  "title": "",
  "body": " An initial flow     "
},
{
  "id": "fig_flowapplications_poset_network_flow2",
  "level": "2",
  "url": "s_flowapplications_chain-partition.html#fig_flowapplications_poset_network_flow2",
  "type": "Figure",
  "number": "14.10",
  "title": "",
  "body": " A better flow     "
},
{
  "id": "s_flowapplications_exercises",
  "level": "1",
  "url": "s_flowapplications_exercises.html",
  "type": "Exercises",
  "number": "14.4",
  "title": "Exercises",
  "body": "   Use the techniques of this chapter to find a maximum matching from to in the graph shown in . The vertices on the bottom are the set , while the vertices on the top are the set . If you cannot find a matching that saturates all of the vertices in , explain why.   Is there a matching saturating ?        Use the techniques of this chapter to find a maximum matching from to in the graph shown in . The vertices on the bottom are the set , while the vertices on the top are the set . If you cannot find a matching that saturates all of the vertices in , explain why.   Is there a matching saturating ?        Students are preparing to do final projects for an applied combinatorics course. The five possible topics for their final projects are graph algorithms, posets, induction, graph theory, and generating functions. There are five students in the class, and they have each given their professor the list of topics on which they are willing to do their project. Alice is interested in posets or graphs. Bob would be willing to do his project on graph algorithms, posets, or induction. Carlos will only consider posets or graphs. Dave likes generating functions and induction. Yolanda wants to do her project on either graphs or posets. To prevent unauthorized collaboration, the professor does not want to have two students work on the same topic. Is it possible to assign each student a topic from the lists above so that no two students work on the same project? If so, find such an assignment. If not, find an assignment that maximizes the number of students who have assignments from their lists and explain why you cannot satisfy all the students' requests.      Seven colleges and universities are competing to recruit six high school football players to play for their varsity teams. Each school is only allowed to sign one more player, and each player is only allowed to commit to a single school. The table below lists the seven institutions and the students they are trying to recruit, have been admitted, and are also interested in playing for that school. (There's no point in assigning a school a player who cannot meet academic requirements or doesn't want to be part of that team.) The players are identified by the integers through . Find a way of assigning the players to the schools that maximizes the number of schools who sign one of the six players.      School Player numbers  Boston College 1, 3, 4  Clemson University 1, 3, 4, 6  Georgia Institute of Technology 2, 6  University of Georgia None interested  University of Maryland 2, 3, 5  University of North Carolina 1, 2, 5  Virginia Polytechnic Institute and State University 1, 2, 5, 6        The questions in this exercise refer to the network diagram in . This network corresponds to a poset . As usual, all capacities are assumed to be , and all edges are directed upward. Answer the following questions about  without drawing the diagram of the poset .  Which element(s) are greater than in ?  Which element(s) are less than in ?  Which element(s) are comparable with in ?  List the maximal elements of .  List the minimal elements of .     The network corresponding to a poset          Draw the diagram of the poset that corresponds to the network in .      Use the methods developed in this chapter to find the width of the poset corresponding to the network in . Also find an antichain of size and a partition into chains.      In we show a poset and a network used to find a chain partition of . (All edges in the network have a capacity of and are directed from bottom to top. The bold edges currently carry a flow of .) Using the network, find the width of , a partition of into chains, and an antichain with elements.   A poset and the corresponding network diagram          Draw the network corresponding to the poset shown in . Use the network to find the width of , a partition into chains, and an antichain of size .   A poset        "
},
{
  "id": "s_flowapplications_exercises-1",
  "level": "2",
  "url": "s_flowapplications_exercises.html#s_flowapplications_exercises-1",
  "type": "Exercise",
  "number": "14.4.1",
  "title": "",
  "body": "  Use the techniques of this chapter to find a maximum matching from to in the graph shown in . The vertices on the bottom are the set , while the vertices on the top are the set . If you cannot find a matching that saturates all of the vertices in , explain why.   Is there a matching saturating ?     "
},
{
  "id": "s_flowapplications_exercises-2",
  "level": "2",
  "url": "s_flowapplications_exercises.html#s_flowapplications_exercises-2",
  "type": "Exercise",
  "number": "14.4.2",
  "title": "",
  "body": "  Use the techniques of this chapter to find a maximum matching from to in the graph shown in . The vertices on the bottom are the set , while the vertices on the top are the set . If you cannot find a matching that saturates all of the vertices in , explain why.   Is there a matching saturating ?     "
},
{
  "id": "s_flowapplications_exercises-3",
  "level": "2",
  "url": "s_flowapplications_exercises.html#s_flowapplications_exercises-3",
  "type": "Exercise",
  "number": "14.4.3",
  "title": "",
  "body": "  Students are preparing to do final projects for an applied combinatorics course. The five possible topics for their final projects are graph algorithms, posets, induction, graph theory, and generating functions. There are five students in the class, and they have each given their professor the list of topics on which they are willing to do their project. Alice is interested in posets or graphs. Bob would be willing to do his project on graph algorithms, posets, or induction. Carlos will only consider posets or graphs. Dave likes generating functions and induction. Yolanda wants to do her project on either graphs or posets. To prevent unauthorized collaboration, the professor does not want to have two students work on the same topic. Is it possible to assign each student a topic from the lists above so that no two students work on the same project? If so, find such an assignment. If not, find an assignment that maximizes the number of students who have assignments from their lists and explain why you cannot satisfy all the students' requests.   "
},
{
  "id": "s_flowapplications_exercises-4",
  "level": "2",
  "url": "s_flowapplications_exercises.html#s_flowapplications_exercises-4",
  "type": "Exercise",
  "number": "14.4.4",
  "title": "",
  "body": "  Seven colleges and universities are competing to recruit six high school football players to play for their varsity teams. Each school is only allowed to sign one more player, and each player is only allowed to commit to a single school. The table below lists the seven institutions and the students they are trying to recruit, have been admitted, and are also interested in playing for that school. (There's no point in assigning a school a player who cannot meet academic requirements or doesn't want to be part of that team.) The players are identified by the integers through . Find a way of assigning the players to the schools that maximizes the number of schools who sign one of the six players.      School Player numbers  Boston College 1, 3, 4  Clemson University 1, 3, 4, 6  Georgia Institute of Technology 2, 6  University of Georgia None interested  University of Maryland 2, 3, 5  University of North Carolina 1, 2, 5  Virginia Polytechnic Institute and State University 1, 2, 5, 6     "
},
{
  "id": "s_flowapplications_exercises-5",
  "level": "2",
  "url": "s_flowapplications_exercises.html#s_flowapplications_exercises-5",
  "type": "Exercise",
  "number": "14.4.5",
  "title": "",
  "body": "  The questions in this exercise refer to the network diagram in . This network corresponds to a poset . As usual, all capacities are assumed to be , and all edges are directed upward. Answer the following questions about  without drawing the diagram of the poset .  Which element(s) are greater than in ?  Which element(s) are less than in ?  Which element(s) are comparable with in ?  List the maximal elements of .  List the minimal elements of .     The network corresponding to a poset       "
},
{
  "id": "s_flowapplications_exercises-6",
  "level": "2",
  "url": "s_flowapplications_exercises.html#s_flowapplications_exercises-6",
  "type": "Exercise",
  "number": "14.4.6",
  "title": "",
  "body": "  Draw the diagram of the poset that corresponds to the network in .   "
},
{
  "id": "s_flowapplications_exercises-7",
  "level": "2",
  "url": "s_flowapplications_exercises.html#s_flowapplications_exercises-7",
  "type": "Exercise",
  "number": "14.4.7",
  "title": "",
  "body": "  Use the methods developed in this chapter to find the width of the poset corresponding to the network in . Also find an antichain of size and a partition into chains.   "
},
{
  "id": "s_flowapplications_exercises-8",
  "level": "2",
  "url": "s_flowapplications_exercises.html#s_flowapplications_exercises-8",
  "type": "Exercise",
  "number": "14.4.8",
  "title": "",
  "body": "  In we show a poset and a network used to find a chain partition of . (All edges in the network have a capacity of and are directed from bottom to top. The bold edges currently carry a flow of .) Using the network, find the width of , a partition of into chains, and an antichain with elements.   A poset and the corresponding network diagram       "
},
{
  "id": "s_flowapplications_exercises-9",
  "level": "2",
  "url": "s_flowapplications_exercises.html#s_flowapplications_exercises-9",
  "type": "Exercise",
  "number": "14.4.9",
  "title": "",
  "body": "  Draw the network corresponding to the poset shown in . Use the network to find the width of , a partition into chains, and an antichain of size .   A poset       "
},
{
  "id": "s_polya_square",
  "level": "1",
  "url": "s_polya_square.html",
  "type": "Section",
  "number": "15.1",
  "title": "Coloring the Vertices of a Square",
  "body": " Coloring the Vertices of a Square  Let's begin by coloring the vertices of a square using white and gold. If we fix the position of the square in the plane, there are different colorings. These colorings are shown in .   The colorings of the vertices of a square.      However, if we think of the square as a metal frame with a white bead or a gold bead at each corner and allow the frame to be rotated and flipped over, we realize that many of these colorings are equivalent. For instance, if we flip coloring over about the vertical line dividing the square in half, we obtain coloring . If we rotate coloring clockwise by , we obtain coloring . In many cases, we want to consider such equivalent colorings as a single coloring. (Recall our motivating example of necklaces made of colored beads. It makes little sense to differentiate between two necklaces if one can be rotated and flipped to become the other.)  To systematically determine how many of the colorings shown in are not equivalent, we must think about the transformations we can apply to the square and what each does to the colorings. Before examining the transformations' effects on the colorings, let's take a moment to see how they rearrange the vertices. To do this, we consider the upper-left vertex to be , the upper-right vertex to be , the lower-right vertex to be , and the lower-left vertex to be . We denote the clockwise rotation by by and see that sends the vertex in position to position , the vertex in position to position , the vertex in position to position , and the vertex in position to position . For brevity, we will write , , We can also rotate the square clockwise by and denote that rotation by . In this case, we find that , , , and . Notice that we can achieve the transformation by doing twice in succession. Furthermore, the clockwise rotation by , , can be achieved by doing three times in succession. (Counterclockwise rotations can be avoided by noting that they have the same effect as a clockwise rotation, although by a different angle.)  When it comes to flipping the square, there are four axes about which we can flip it: vertical, horizontal, positive-slope diagonal, and negative-slope diagonal. We denote these flips by , , , and , respectively. Now notice that , , , and . For the flip about the horizontal axis, we have , , , and . For , we have , , , and . Finally, for we find , , , and . There is one more transformation that we must mention; the transformation that does nothing to the square is called the identity transformation , denoted . It has , , , and .  Now that we've identified the eight transformations of the square, let's make a table showing which colorings from are left unchanged by the application of each transformation. Not surprisingly, the identity transformation leaves all of the colorings unchanged. Because moves the vertices cyclically, we see that only and remain unchanged when it is applied. Any coloring with more than one color would have a vertex of one color moved to one of the other color. Let's consider which colorings are fixed by , the flip about the vertical axis. For this to happen, the color at position must be the same as the color at position , and the color at position must be the same as the color at position . Thus, we would expect to find colorings unchanged by . Examining , we see that these colorings are , , , and . Performing a similar analysis for the remaining five transformations leads to .   Colorings fixed by transformations of the square    Transformation Fixed colorings  All 16  ,  , , ,  ,  , , ,  , , ,  , , , , , , ,  , , , , , , ,     At this point, it's natural to ask where this is going. After all, we're trying to count the number of nonequivalent colorings, and makes no effort to group colorings based on how a transformation changes one coloring to another. It turns out that there is a useful connection between counting the nonequivalent colorings and determining the number of colorings fixed by each transformation. To develop this connection, we first need to discuss the equivalence relation created by the action of the transformations of the square on the set of all -colorings of the square. (Refer to for a refresher on the definition of equivalence relation.) To do this, notice that applying a transformation to a square with colored vertices results in another square with colored vertices. For instance, applying the transformation to a square colored as in results in a square colored as in . We say that the transformations of the square act on the set of colorings. We denote this action by adding a star to the transformation name. For instance, and .  If is a transformation of the square with , then we say colorings and are equivalent and write . Since for all , is reflexive. If and , then , so is transitive. To complete our verification that is an equivalence relation, we must establish that it is symmetric. For this, we require the notion of the inverse inverse of a transformation , which is simply the transformation that undoes whatever did. For instance, the inverse of is the counter clockwise rotation by , which has the same effect on the location of the vertices as . If , then , so is symmetric.  Before proceeding to establish the connection between the number of nonequivalent colorings (equivalence classes under ) and the number of colorings fixed by a transformation in full generality, let's see how it looks for our example. In looking at , you should notice that partitions into six equivalence classes. Two contain one coloring each (the all white and all gold colorings). One contains two colorings ( and ). Finally, three contain four colorings each (one gold vertex, one white vertex, and the remaining four with two vertices of each color). Now look again at and add up the number of colorings fixed by each transformation. In doing this, we obtain , and when is divided by the number of transformations ( ), we get (the number of equivalence classes)! It turns out that this is far from a fluke, as we will soon see. First, however, we introduce the concept of a permutation group to generalize our set of transformations of the square.  "
},
{
  "id": "fig_polya_squares",
  "level": "2",
  "url": "s_polya_square.html#fig_polya_squares",
  "type": "Figure",
  "number": "15.1",
  "title": "",
  "body": " The colorings of the vertices of a square.     "
},
{
  "id": "s_polya_square-6",
  "level": "2",
  "url": "s_polya_square.html#s_polya_square-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "identity transformation "
},
{
  "id": "tab_polya_fixed-square",
  "level": "2",
  "url": "s_polya_square.html#tab_polya_fixed-square",
  "type": "Figure",
  "number": "15.2",
  "title": "",
  "body": " Colorings fixed by transformations of the square    Transformation Fixed colorings  All 16  ,  , , ,  ,  , , ,  , , ,  , , , , , , ,  , , , , , , ,    "
},
{
  "id": "s_polya_square-9",
  "level": "2",
  "url": "s_polya_square.html#s_polya_square-9",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "act "
},
{
  "id": "s_polya_square-10",
  "level": "2",
  "url": "s_polya_square.html#s_polya_square-10",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "equivalent inverse "
},
{
  "id": "s_polya_perm-groups",
  "level": "1",
  "url": "s_polya_perm-groups.html",
  "type": "Section",
  "number": "15.2",
  "title": "Permutation Groups",
  "body": " Permutation Groups   Entire books have been written on the theory of the mathematical structures known as groups group . However, our study of Pólya's enumeration theorem requires only a few facts about a particular class of groups that we introduce in this section. First, recall that a bijection from a set to itself is called a permutation permutation . A permutation group group permutation is a set of permutations of a set so that  the identity permutation is in ;  if , then ; and  if , then .  For our purposes, will always be finite and we will usually take for some positive integer . The symmetric group on elements group symmetric , denoted , is the set of all permutations of . Every finite permutation group (and more generally every finite group) is a subgroup of for some positive integer .  As our first example of a permutation group, consider the set of permutations we discussed in , called the dihedral group of the square . We will denote this group by . We denote by the similar group of transformations for a regular -gon, using as the subscript because there are permutations in this group. Some authors and computer algebra systems use as the notation for the dihedral group of the -gon. The first criterion to be a permutation group is clearly satisfied by . Verifying the other two is quite tedious, so we only present a couple of examples. First, notice that . This can be determined by carrying out the composition of these functions as permutations or by noting that rotating clockwise and then clockwise is the same as rotating clockwise. For , we find , , , and , so . For inverses, we have already discussed that . Also, , and more generally, the inverse of any flip is that same flip.    Representing permutations  The way a permutation rearranges the elements of is central to Pólya's enumeration theorem. A proper choice of representation for a permutation is very important here, so let's discuss how permutations can be represented. One way to represent a permutation of is as a matrix in which the first row represents the domain and the second row represents by putting in position . For example, is the permutation of with , , , , and . This notation is rather awkward and provides only the most basic information about the permutation. A more compact (and more useful for our purposes) notation is known as cycle notation permutation cycle notation for . One way to visualize how the cycle notation is constructed is by constructing a digraph from a permutation of . The digraph has as its vertex set and a directed edge from to if and only if . (Here we allow a directed edge from a vertex to itself if .) The digraph corresponding to the permutation from above is shown in .   The digraph corresponding to permutation      Since is a permutation, every component of such a digraph is a directed cycle. We can then use these cycles to write down the permutation in a compact manner. For each cycle, we start at the vertex with smallest label and go around the cycle in the direction of the edges, writing down the vertices' labels in order. We place this sequence of integers in parentheses. For the -cycle in , we thus obtain . (If , we place spaces or commas between the integers.) The component with a single vertex is denoted simply as , and thus we may write . By convention, the disjoint cycles of a permutation are listed so that their first entries are in increasing order.   The permutation has , , , and . The permutation has , , and . We say that consists of two cycles of length and one cycle of length . For , we have one cycle of length , two cycles of length , and one cycle of length . A cycle of length will also called a -cycle in this chapter.     Multiplying permutations  Because the operation in an arbitrary group is frequently called multiplication, it is common to refer to the composition of permutations as multiplication and write instead of . The important thing to remember here, however, is that the operation is simply function composition. Let's see a couple of examples.   Let and . (Notice that these are the permutations and , respectively, from .) Let . To determine , we start by finding . We next find that . Similarly, and . Thus, , which we called earlier.  Now let . Then , , , and . Therefore, , which we called earlier. It's important to note that , which hopefully does not surprise you, since function composition is not in general commutative. To further illustrate the lack of commutativity in permutation groups, pick up a book (Not this one! You need to keep reading directions here.) so that cover is up and the spine is to the left. First, flip the book over from left to right. Then rotate it clockwise. Where is the spine? Now return the book to the cover-up, spine-left position. Rotate the book clockwise and then flip it over from left to right. Where is the spine this time?   It quickly gets tedious to write down where the product of two (or more) permutations sends each element. A more efficient approach would be to draw the digraph and then write down the cycle structure. With some practice, however, you can build the cycle notation as you go along, as we demonstrate in the following example.   Let and . Let . To start constructing the cycle notation for , we must determine where sends . We find that it sends it to , since sends to and sends to . Thus, the first cycle begins . Now where is sent? It's sent to , which goes to , which goes to , which goes to , completing our first cycle as . The first integer not in this cycle is , which we use to start our next cycle. We find that is sent to , which is set to , which is set to . Thus, the second cycle is . Now all elements of are represented in these cycles, so we know that .   We conclude this section with one more example.   Let's find , where we've written the two permutations being multiplied inside brackets. Since we work from right to left , we find that the first permutation applied sends to , and the second sends to , so our first cycle is . Next, we find that the product sends to . It also sends to for every other . Thus, the product is , which is better known as the identity permutation. Thus, and are inverses.   In the next section, we will use standard counting techniques we've seen before in this book to prove results about groups acting ons ets. We will state the results for arbitrary groups, but you may safely replace group by permutation group without losing any understanding required for the remainder of the chapter.   "
},
{
  "id": "s_polya_perm-groups-2-1",
  "level": "2",
  "url": "s_polya_perm-groups.html#s_polya_perm-groups-2-1",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "groups permutation permutation group symmetric group on elements "
},
{
  "id": "s_polya_perm-groups-2-2",
  "level": "2",
  "url": "s_polya_perm-groups.html#s_polya_perm-groups-2-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "dihedral group of the square "
},
{
  "id": "ss_polya_perm-groups_rep-2",
  "level": "2",
  "url": "s_polya_perm-groups.html#ss_polya_perm-groups_rep-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "cycle notation "
},
{
  "id": "fig_polya_perm-digraph",
  "level": "2",
  "url": "s_polya_perm-groups.html#fig_polya_perm-digraph",
  "type": "Figure",
  "number": "15.3",
  "title": "",
  "body": " The digraph corresponding to permutation     "
},
{
  "id": "ss_polya_perm-groups_rep-5",
  "level": "2",
  "url": "s_polya_perm-groups.html#ss_polya_perm-groups_rep-5",
  "type": "Example",
  "number": "15.4",
  "title": "",
  "body": " The permutation has , , , and . The permutation has , , and . We say that consists of two cycles of length and one cycle of length . For , we have one cycle of length , two cycles of length , and one cycle of length . A cycle of length will also called a -cycle in this chapter.  "
},
{
  "id": "ss_polya_perm-groups_mult-3",
  "level": "2",
  "url": "s_polya_perm-groups.html#ss_polya_perm-groups_mult-3",
  "type": "Example",
  "number": "15.5",
  "title": "",
  "body": " Let and . (Notice that these are the permutations and , respectively, from .) Let . To determine , we start by finding . We next find that . Similarly, and . Thus, , which we called earlier.  Now let . Then , , , and . Therefore, , which we called earlier. It's important to note that , which hopefully does not surprise you, since function composition is not in general commutative. To further illustrate the lack of commutativity in permutation groups, pick up a book (Not this one! You need to keep reading directions here.) so that cover is up and the spine is to the left. First, flip the book over from left to right. Then rotate it clockwise. Where is the spine? Now return the book to the cover-up, spine-left position. Rotate the book clockwise and then flip it over from left to right. Where is the spine this time?  "
},
{
  "id": "ss_polya_perm-groups_mult-5",
  "level": "2",
  "url": "s_polya_perm-groups.html#ss_polya_perm-groups_mult-5",
  "type": "Example",
  "number": "15.6",
  "title": "",
  "body": " Let and . Let . To start constructing the cycle notation for , we must determine where sends . We find that it sends it to , since sends to and sends to . Thus, the first cycle begins . Now where is sent? It's sent to , which goes to , which goes to , which goes to , completing our first cycle as . The first integer not in this cycle is , which we use to start our next cycle. We find that is sent to , which is set to , which is set to . Thus, the second cycle is . Now all elements of are represented in these cycles, so we know that .  "
},
{
  "id": "ss_polya_perm-groups_mult-7",
  "level": "2",
  "url": "s_polya_perm-groups.html#ss_polya_perm-groups_mult-7",
  "type": "Example",
  "number": "15.7",
  "title": "",
  "body": " Let's find , where we've written the two permutations being multiplied inside brackets. Since we work from right to left , we find that the first permutation applied sends to , and the second sends to , so our first cycle is . Next, we find that the product sends to . It also sends to for every other . Thus, the product is , which is better known as the identity permutation. Thus, and are inverses.  "
},
{
  "id": "s_polya_burnside",
  "level": "1",
  "url": "s_polya_burnside.html",
  "type": "Section",
  "number": "15.3",
  "title": "Burnside’s Lemma",
  "body": " Burnside's Lemma  Burnside's lemma Again, not originally proved by Burnside. It was known to Frobenius and for the most part by Cauchy. However, it was most easily found in Burnside's book, and thus his name came to be attached. relates the number of equivalence classes of the action of a group on a finite set to the number of elements of the set fixed by the elements of the group. Before stating and proving it, we need some notation and a proposition. If a group acts on a finite set , let be the equivalence relation induced by this action. (As before, the action of on will be denoted .) Denote the equivalence class containing by equivalence class of . For , let , the set of colorings fixed by . For , let be the stabilizer stabilizer stabilizer of under action of of in , the permutations in that fix .  To illustrate these concepts before applying them, refer back to . Using that information, we can determine that . Determining the stabilizer of a coloring requires finding the rows of the table in which it appears. Thus, and .    Let a group act on a finite set . Then for all ,     Let and . (Note that .) Take . Then for . Furthermore, if , then . Thus and . If , then . Thus, for some , and hence . Therefore . Additionally, we observe that . Now for all , Therefore, Now notice that each element of appears in for precisely one , and the proposition follows.    With established, we are now prepared for Burnside's lemma.   Burnside's Lemma   Let a group act on a finite set . If is the number of equivalence classes of induced by this action, then     Before we proceed to the proof, note that the calculation in Burnside's lemma for the example of -coloring the vertices of a square is exactly the calculation we performed at the end of .   Let . Notice that , since each term in the sum counts how many ordered pairs of have in their first coordinate. Similarly, , with each term of this sum counting how many ordered pairs of have as their second coordinate. Thus, . Now note that the latter sum may be rewritten as By , the inner sum is . Therefore, the total sum is , so solving for gives the desired equation.   Burnside's lemma helpfully validates the computations we did in the previous section. However, what if instead of a square we were working with a hexagon and instead of two colors we allowed four? Then there would be different colorings and the dihedral group of the hexagon has elements. Assembling the analogue of in this situation would be a nightmare! This is where the genius of Pólya's approach comes into play, as we see in the next section.  "
},
{
  "id": "s_polya_burnside-2",
  "level": "2",
  "url": "s_polya_burnside.html#s_polya_burnside-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "stabilizer "
},
{
  "id": "prop_polya_sum-stabs",
  "level": "2",
  "url": "s_polya_burnside.html#prop_polya_sum-stabs",
  "type": "Proposition",
  "number": "15.8",
  "title": "",
  "body": "  Let a group act on a finite set . Then for all ,     Let and . (Note that .) Take . Then for . Furthermore, if , then . Thus and . If , then . Thus, for some , and hence . Therefore . Additionally, we observe that . Now for all , Therefore, Now notice that each element of appears in for precisely one , and the proposition follows.   "
},
{
  "id": "lem_polya_burnside",
  "level": "2",
  "url": "s_polya_burnside.html#lem_polya_burnside",
  "type": "Lemma",
  "number": "15.9",
  "title": "Burnside’s Lemma.",
  "body": " Burnside's Lemma   Let a group act on a finite set . If is the number of equivalence classes of induced by this action, then    "
},
{
  "id": "s_polya_burnside-8",
  "level": "2",
  "url": "s_polya_burnside.html#s_polya_burnside-8",
  "type": "Proof",
  "number": "15.3.1",
  "title": "",
  "body": " Let . Notice that , since each term in the sum counts how many ordered pairs of have in their first coordinate. Similarly, , with each term of this sum counting how many ordered pairs of have as their second coordinate. Thus, . Now note that the latter sum may be rewritten as By , the inner sum is . Therefore, the total sum is , so solving for gives the desired equation.  "
},
{
  "id": "s_polya_polya",
  "level": "1",
  "url": "s_polya_polya.html",
  "type": "Section",
  "number": "15.4",
  "title": "Pólya’s Theorem",
  "body": " Pólya's Theorem   Before getting to the full version of Pólya's formula, we must develop a generating function as promised at the beginning of the chapter. To do this, we will return to our example of .    The cycle index  Unlike the generating functions we encountered in , the generating functions we will develop in this chapter will have more than one variable. We begin by associating a monomial with each element of the permutation group involved. In this case, it is , the dihedral group of the square. To determine the monomial associated to a permutation, we need to write the permutation in cycle notation and then determine the monomial based on the number of cycles of each length. Specifically, if is a permutation of with cycles of length for , then the monomial associated to is . Note that . For example, the permutation is associated with the monomial since it consists of a single cycle of length . The permutation has two cycles of length , and thus its monomial is . For , we have two -cycles and one -cycle, yielding the monomial . In , we show all eight permutations in along with their associated monomials.   Monomials arising from the dihedral group of the square      Transformation Monomial Fixed colorings            Now let's see how the number of -colorings of the square fixed by a permutation can be determined from its cycle structure and associated monomial. If , then we know that for to fix a coloring , vertices and must be colored the same in . Thus, the second vertex in a cycle must have the same color as the first. But then the third vertex must have the same color as the second, which is the same color as the first. In fact, all vertices appearing in a cycle of must have the same color in if fixes ! Since we are coloring with the two colors white and gold, we can choose to color the points of each cycle uniformly white or gold. For example, for the permutation to fix a coloring of the square, vertices and must be colored the same color ( choices) and vertices and must be colored the same color ( choices). Thus, there are colorings fixed by . Since there are two choices for how to uniformly color the elements of a cycle, letting for all in the monomial associated with gives the number of colorings fixed by . In , the Fixed colorings column gives the number of -colorings of the square fixed by each permutation. Before, we obtained this manually by considering the action of on the set of all colorings. Now we only need the cycle notation and the monomials that result from it to derive this!  Recall that states that the number of colorings fixed by the action of a group can be obtained by adding up the number fixed by each permutation and dividing by the number of permutations in the group. If we do that instead for the monomials arising from the permutations in a permutation group in which every cycle of every permutation has at most entries, we obtain a polynomial known as the cycle index cycle index  . For our running example, we find To find the number of distinct -colorings of the square, we thus let for all and obtain as before. Notice, however, that we have something more powerful than Burnside's lemma here. We may substitute any positive integer for each to find out how many nonequivalent -colorings of the square exist. We no longer have to analyze how many colorings each permutation fixes. For instance, , meaning that of the colorings of the vertices of the square using three colors are distinct.    The full enumeration formula  Hopefully the power of the cycle index to count colorings that are distinct when symmetries are considered is becoming apparent. In the next section, we will provide additional examples of how it can be used. However, we still haven't seen the full power of Pólya's technique. From the cycle index alone, we can determine how many colorings of the vertices of the square are distinct. However, what if we want to know how many of them have two white vertices and two gold vertices? This is where Pólya's enumeration formula truly plays the role of a generating function.  Let's again consider the cycle index for the dihedral group : Instead of substituting integers for the , let's consider what happens if we substitute something that allows us to track the colors used. Since represents a cycle of length in a permutation, the choice of white or gold for the vertex in such a cycle amounts to a single vertex receiving that color. What happens if we substitute for ? The first term in corresponds to the identity permutation , which fixes all colorings of the square. Letting in this term gives which tells us that fixes one coloring with four gold vertices, four colorings with three gold vertices and one white vertex, six colorings with two gold vertices and two white vertices, four colorings with one gold vertex and three white vertices, and one coloring with four white vertices.  Let's continue establishing a pattern here by considering the variable . It represents the cycles of length in a permutation. Such a cycle must be colored uniformly white or gold to be fixed by the permutation. Thus, choosing white or gold for the vertices in that cycle results in two white vertices or two gold vertices in the coloring. Since this happens for every cycle of length , we want to substitute for in the cycle index. The terms in are associated with the flips and . Letting and , we find from which we are able to deduce that and each fix one coloring with four gold vertices, two colorings with three gold vertices and one white vertex, and so on. Comparing this with shows that the generating function is right on.  By now the pattern is becoming apparent. If we substitute for in the cycle index for each , we then keep track of how many vertices are colored white and how many are colored gold. The simplification of the cycle index in this case is then a generating function in which the coefficient on is the number of distinct colorings of the vertices of the square with vertices colored gold and vertices colored white. Doing this and simplifying gives From this we find one coloring with all vertices gold, one coloring with all vertices white, one coloring with three gold vertices and one white vertex, one coloring with one gold vertex and three white vertices, and two colorings with two vertices of each color.  As with the other results we've discovered in this chapter, this property of the cycle index holds up beyond the case of coloring the vertices of the square with two colors. The full version is Pólya's enumeration theorem:   Pólya's Enumeration Theorem   Let be a set with and the set of colorings of using the colors . If a permutation group acts on to induce an equivalence relation on , then is the generating function for the number of nonequivalent colorings of in .    If we return to coloring the vertices of the square but now allow the color blue as well, we find From this generating function, we can readily determine the number of nonequivalent colorings with two blue vertices, one gold vertex, and one white vertex to be . Because the generating function of records the number of nonequivalent patterns, it is sometimes called the pattern inventory . pattern inventory   What if we were interested in making necklaces with (very small) beads colored white, gold, and blue? This would be equivalent to coloring the vertices of a regular -gon, and the dihedral group would give the appropriate transformations. With a computer algebra system With some more experience in group theory, it is possible to give a general formula for the cycle index of the dihedral group , so the computer algebra system is a nice tool, but not required. such as Mathematica , it is possible to quickly produce the pattern inventory for such a problem. In doing so, we find that there are possible necklaces. Of them, have white beads, gold beads, and blue beads.  The remainder of this chapter will focus on applications of and the pattern inventory in a variety of settings.   "
},
{
  "id": "tab_polya_square-cycles",
  "level": "2",
  "url": "s_polya_polya.html#tab_polya_square-cycles",
  "type": "Figure",
  "number": "15.10",
  "title": "",
  "body": " Monomials arising from the dihedral group of the square      Transformation Monomial Fixed colorings           "
},
{
  "id": "ss_polya_polya_cycle-index-5",
  "level": "2",
  "url": "s_polya_polya.html#ss_polya_polya_cycle-index-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "cycle index "
},
{
  "id": "thm_polya_polya",
  "level": "2",
  "url": "s_polya_polya.html#thm_polya_polya",
  "type": "Theorem",
  "number": "15.11",
  "title": "Pólya’s Enumeration Theorem.",
  "body": " Pólya's Enumeration Theorem   Let be a set with and the set of colorings of using the colors . If a permutation group acts on to induce an equivalence relation on , then is the generating function for the number of nonequivalent colorings of in .   "
},
{
  "id": "ss_polya_polya_full-8",
  "level": "2",
  "url": "s_polya_polya.html#ss_polya_polya_full-8",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "pattern inventory "
},
{
  "id": "s_polya_apps",
  "level": "1",
  "url": "s_polya_apps.html",
  "type": "Section",
  "number": "15.5",
  "title": "Applications of Pólya’s Enumeration Formula",
  "body": " Applications of Pólya's Enumeration Formula   This section explores a number of situations in which Pólya's enumeration formula can be used. The applications are from a variety of domains and are arranged in increasing order of complexity, beginning with an example from music theory and concluding with counting nonisomorphic graphs.    Counting musical scales  Western music is generally based on a system of equally-spaced notes notes musical . Although these notes are usually named by letters of the alphabet (with modifiers), for our purposes it will suffice to number them as . These notes are arranged into octaves octave so that the next pitch after is again named and the pitch before is named . For this reason, we may consider the system of notes to correspond to the integers modulo . With these definitions, a scale scale is a subset of arranged in increasing order. A transposition of a scale transposition of a scale is a uniform transformation that replaces each note of the scale by for some constant . Musicians consider two scales to be equivalent if one is a transposition of the other. Since a scale is a subset, no regard is paid to which note starts the scale, either. The question we investigate in this section is How many nonequivalent scales are there consisting of precisely notes?   Because of the cyclic nature of the note names, we may consider arranging them in order clockwise around a circle. Selecting the notes for a scale then becomes a coloring problem if we say that selected notes are colored black and unselected notes are colored white. In , we show three -note scales using this convention. Notice that since can be obtained from by rotating it forward seven positions, and are equivalent by the transposition of adding . However, is not equivalent to or , as it cannot be obtained from them by rotation. (Note that could be obtained from if we allowed flips in addition to rotations. Since the only operation allowed is the transposition, which corresponds to rotation, they are inequivalent.)   Three scales depicted by coloring      We have now mathematically modeled musical scales as discrete structures in a way that we can use . What is the group acting on our black\/white colorings of the vertices of a regular -gon? One permutation in the group is , which corresponds to the transposition by one note. In fact, every element of the group can be realized as some power of since only rotations are allowed and is the smallest possible rotation. Thus, the group acting on the colorings is the cyclic group of order , denoted . asks you to write all the elements of this group in cycle notation. The best way to do this is by multiplying by ( , compute ) to find . Once you've done this, you will be able to easily verify that the cycle index is Since we've chosen colorings using black and white, it would make sense to substitute for all in now to find the number of -note scales. However, there is a convenient shortcut we may take to make the resulting generating function look more like those to which we grew accustomed in . The information about how many notes are not included in our scale (the number colored white) can be deduced from the number that are included. Thus, we may eliminate the use of the variable , replacing it by . We now find From this, we are able to deduce that the number of scales with notes is the coefficient on . Therefore, the answer to our question at the beginning of the chapter about the number of -note scales is .    Enumerating isomers  Benzene is a chemical compound with formula , meaning it consists of six carbon atoms and six hydrogen atoms. These atoms are bonded in such a way that the six carbon atoms form a hexagonal ring with alternating single and double bonds. A hydrogen atom is bonded to each carbon atom (on the outside of the ring). From benzene it is possible to form other chemical compounds that are part of a family known as aromatic hydrocarbons . These compounds are formed by replacing one or more of the hydrogen atoms by atoms of other elements or functional groups such as (methyl group) or (hydroxyl group). Because there are six choices for which hydrogen atoms to replace, molecules with the same chemical formula but different structures can be formed in this manner. Such molecules are called isomers . In this subsection, we will see how can be used to determine the number of isomers of the aromatic hydrocarbon xylenol (also known as dimethylphenol).  Before we get into the molecular structure of xylenol, we need to discuss the permutation group that will act on a benzene ring. Much like with our example of coloring the vertices of the square, we find that there are rotations and flips at play here. In fact, the group we require is the dihedral group of the hexagon, . If we number the six carbon atoms in clockwise order as , then we find that the clockwise rotation by corresponds to the permutation . The other rotations are the higher powers of , as shown in . The flip across the vertical axis is the permutation . The remaining elements of (other than the identity ) can all be realized as some rotation followed by this flip. The full list of permutations is shown in , where each permutation is accompanied by the monomial it contributes to the cycle index.   Cycle representation of permutations in      Permutation Monomial Permutation Monomial          With the monomials associated to the permutations in identified, we are able to write down the cycle index With the cycle index determined, we now turn our attention to using it to find the number of isomers of xylenol. This aromatic hydrocarbon has three hydrogen molecules, two methyl groups, and a hydroxyl group attached to the carbon atoms. Recalling that hydrogen atoms are the default from benzene, we can more or less ignore them when choosing the appropriate substitution for the in the cycle index. If we let denote methyl groups and hydroxyl groups, we can then substitute in . This substitution gives the generating function Since xylenol has one hydroxyl group and two methyl groups, we are looking for the coefficient on in this generating function. The coefficient is , so there are six isomers of xylenol.  In his original paper, Pólya used his techniques to enumerate the number of isomers of the alkanes . When modeled as graphs, these chemical compounds are special types of trees. Since that time, has been used to enumerate isomers for many different chemical compounds.    Counting nonisomorphic graphs  Counting the graphs with vertex set is not difficult. There are possible edges, each of which can be included or excluded. Thus, there are  labeled graphs graph labeled on vertices. It's only a bit of extra thought to determine that if you only want to count the labeled graphs on vertices with edges, you simply must choose a -element subset of the set of all possible edges. Thus, there are graphs with vertex set and exactly edges.  A more difficult problem arises when we want to start counting nonisomorphic graphs on vertices. (One can think of these as unlabeled graphs graph unlabeled as well.) For example, in , we show four different labeled graphs on four vertices. The first three graphs shown there, however, are isomorphic to each other. Thus, only two nonisomorphic graphs on four vertices are illustrated in the figure. To account for isomorphisms, we need to bring into play.   Four labeled graphs on four vertices      We begin by considering all graphs with vertex set and choosing an appropriate permutation group to act in the situation. Since any vertex can be mapped to any other vertex, the symmetric group acts on the vertices. However, we have to be careful about how we find the cycle index here. When we were working with colorings of the vertices of the square, we realized that all the vertices appearing in the same cycle of a permutation had to be colored the same color. Since we're concerned with edges here and not vertex colorings, what we really need for a permutation to fix a graph is that every edge be sent to an edge and every non-edge be sent to a non-edge. To be specific, if is an edge of some and fixes , then must also be an edge of . Similarly, if vertices and are not adjacent in , then and must also be nonadjacent in .  To account for edges, we move from the symmetric group to its pair group  . The objects that permutes are the -element subsets of . For ease of notation, we will denote the -element subset by . To find the permutations in , we consider the vertex permutations in and see how they permute the . The identity permutation of corresponds to the identity permutation of . Now let's consider the permutation . It fixes since it sends to and to . It also fixes by fixing and . However, it interchanges with ( is fixed and is swapped with ) and with ( is sent to and is fixed). Thus, the corresponding permutation of pairs is . For another example, consider the permutation . It corresponds to the permutation in .  Since we're only after the cycle index of , we don't need to find all permutations in the pair group. However, we do need to know the types of those permutations in terms of cycle lengths so we can associate the appropriate monomials. For the three examples we've considered, the cycle structure of the permutation in the pair group doesn't depend on the original permutation in other than for its cycle structure. Any permutation in consisting of a -cycle and two -cycles will correspond to a permutation with two -cycles and two -cycles in . A permutation in with one -cycle and one -cycle will correspond to a permutation with two -cycles in the pair group. By considering an example of a permutation in consisting of a single -cycle, we find that the corresponding permutation in the pair group has a -cycle and a -cycle. Finally, a permutation of consisting of two -cycles corresponds to a permutation in having two -cycles and two -cycles. ( asks you to verify these claims using specific permutations.)  Now that we know the cycle structure of the permutations in , the only task remaining before we can find its cycle index of is to determine how many permutations have each of the possible cycle structures. For this, we again refer back to permutations of the symmetric group . A permutation consisting of a single -cycle begins with and then has , , and in any of the possible orders, so there are such permutations. For permutations consisting of a -cycle and a -cycle, there are ways to choose the element for the -cycle and then ways to arrange the other three as a -cycle. (Remember the smallest of them must be placed first, so there are then ways to arrange the remaining two.) Thus, there are such permutations. For a permutation consisting of two -cycles and a -cycle, there are ways to choose the two elements for the -cycle. Thus, there are such permutations. For a permutation to consist of two -cycles, there are ways to choose two elements for the first -cycle. The other two are then put in the second -cycle. However, this counts each permutation twice, once for when the first -cycle is the chosen pair and once for when it is the other two. Thus, there are permutations consisting of two -cycles. Finally, only consists of four -cycles.  Now we're prepared to write down the cycle index of the pair group To use this to enumerate graphs, we can now make the substitution for . This allows us to account for the two options of an edge not being present or being present. In doing so, we find is the generating function for the number of -vertex graphs with edges, . To find the total number of nonisomorphic graphs on four vertices, we substitute into this polynomial. This allows us to conclude there are nonisomorphic graphs on four vertices, a marked reduction from the labeled graphs.  The techniques of this subsection can be used, given enough computing power, to find the number of nonisomorphic graphs on any number of vertices. For vertices, there are nonisomorphic graphs, as compared to labeled graphs on vertices. The number of nonisomorphic graphs with precisely edges is The last part of the question about graph enumeration at the beginning of the chapter was about enumerating the graphs on some number of vertices in which every vertex has degree . While this might seem like it could be approached using the techniques of this chapter, it turns out that it cannot because of the increased dependency between where vertices are mapped.   "
},
{
  "id": "ss_polya_scales-2",
  "level": "2",
  "url": "s_polya_apps.html#ss_polya_scales-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "notes octaves scale transposition of a scale "
},
{
  "id": "fig_polya_scales",
  "level": "2",
  "url": "s_polya_apps.html#fig_polya_scales",
  "type": "Figure",
  "number": "15.12",
  "title": "",
  "body": " Three scales depicted by coloring     "
},
{
  "id": "ss_polya_scales-5",
  "level": "2",
  "url": "s_polya_apps.html#ss_polya_scales-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "cyclic group of order "
},
{
  "id": "ss_polya_isomers-2",
  "level": "2",
  "url": "s_polya_apps.html#ss_polya_isomers-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "aromatic hydrocarbons isomers "
},
{
  "id": "tab_polya_benzene",
  "level": "2",
  "url": "s_polya_apps.html#tab_polya_benzene",
  "type": "Figure",
  "number": "15.13",
  "title": "",
  "body": " Cycle representation of permutations in      Permutation Monomial Permutation Monomial         "
},
{
  "id": "ss_polya_graphs-2",
  "level": "2",
  "url": "s_polya_apps.html#ss_polya_graphs-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "labeled graphs "
},
{
  "id": "ss_polya_graphs-3",
  "level": "2",
  "url": "s_polya_apps.html#ss_polya_graphs-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "unlabeled graphs "
},
{
  "id": "fig_polya_graphs",
  "level": "2",
  "url": "s_polya_apps.html#fig_polya_graphs",
  "type": "Figure",
  "number": "15.14",
  "title": "",
  "body": " Four labeled graphs on four vertices     "
},
{
  "id": "ss_polya_graphs-6",
  "level": "2",
  "url": "s_polya_apps.html#ss_polya_graphs-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "pair group "
},
{
  "id": "s_polya_exercises",
  "level": "1",
  "url": "s_polya_exercises.html",
  "type": "Exercises",
  "number": "15.6",
  "title": "Exercises",
  "body": "   Write the permutations shown below in cycle notation.       Compute , , , and for the permutations in .      Find and for the colorings of the vertices of the square shown in by referring to .      In , we show a regular pentagon with its vertices labeled. Use this labeling to complete this exercise.   A pentagon with labeled vertices        The dihedral group of the pentagon, , contains permutations. Let be the clockwise rotation by and be the flip about the line passing through and perpendicular to the opposite side. Let , , and be the other rotations in . Denote the flip about the line passing through vertex and perpendicular to the other side by , . Write all elements of in cycle notation.  Suppose we are coloring the vertices of the pentagon using black and white. Draw the colorings fixed by . Draw the colorings fixed by .  Find where is the coloring of the vertices of the pentagon in which vertices , , and are colored black and vertices and are colored white.  Find the cycle index of .  Use the cycle index to determine the number of nonequivalent colorings of vertices of the pentagon using black and white.  Making an appropriate substitution for the in the cycle index, find the number of nonequivalent colorings of the vertices of the pentagon in which two vertices are colored black and three vertices are colored white. Draw these colorings.        Write all permutations in , the cyclic group of order , in cycle notation.      The -note western scale is not the only system on which music is based. In classical Thai music, a scale with seven equally-spaced notes per octave is used. As in western music, a scale is a subset of these seven notes, and two scales are equivalent if they are transpositions of each other. Find the number of -note scales in classical Thai music for .      Xylene is an aromatic hydrocarbon having two methyl groups (and four hydrogen atoms) attached to the hexagonal carbon ring. How many isomers are there of xylene?      Find the permutations in corresponding to the permutations and in . Confirm that the first consists of a -cycle and a -cycle and the second consists of two -cycles and two -cycles.      Draw the three nonisomorphic graphs on four vertices with edges and the two nonisomorphic graphs on four vertices with edges.        Use the method of to find the cycle index of the pair group of the symmetric group on five elements.  Use the cycle index from to determine the number of nonisomorphic graphs on five vertices. How many of them have edges?        Tic-tac-toe is a two-player game played on a grid. The players mark the squares of the grid with the symbols X and O. This exercise uses Pólya's enumeration theorem to investigate the number of different tic-tac-toe boards. (The analysis of games is more complex, since it requires attention to the order the squares are marked and stopping when one player has won the game.)   Numbered squares of a tic-tac-toe board        Two tic-tac-toe boards are equivalent if one may be obtained from the other by rotating the board or flipping it over. (Imagine that it is drawn on a clear piece of plastic.) Since the grid is a square, the group that acts on it in this manner is the dihedral group that we have studied in this chapter. However, as with counting nonisomorphic graphs, we have to be careful to choose the way this group is represented in terms of cycles. Here we are interested in how permutations rearrange the nine squares of the tic-tac-toe board as numbered in . For example, the effect of the transformation , which rotates the board clockwise, can be represented as a permutation of the nine squares as .  Write each of the eight elements of as permutations of the nine squares of a tic-tac-toe board.  Find the cycle index of in terms of these permutations.  Make an appropriate substitution for in the cycle index to find a generating function in which the coefficient on is the number of nonequivalent tic-tac-toe boards having squares filled by symbol X and squares filled by symbol O. (Notice that some squares might be blank!)  How many nonequivalent tic-tac-toe boards are there?  How many nonequivalent tic-tac-toe boards have three X's and three O's?  When playing tic-tac-toe, the players alternate turns, each drawing their symbol in a single unoccupied square during a turn. Assuming the first player marks her squares with X and the second marks his with O, then at each stage of the game there are either the same number of X's and O's or one more X than there are O's. Use this fact and to determine the number of nonequivalent tic-tac-toe boards that can actually be obtained in playing a game, assuming the players continue until the board is full, regardless of whether one of them has won the game.        Suppose you are painting the faces of a cube and you have white, gold, and blue paint available. Two painted cubes are equivalent if you can rotate one of them so that all corresponding faces are painted the same color. Determine the number of nonequivalent ways you can paint the faces of the cube as well as the number having two faces of each color.    It may be helpful to label the faces as ( up ), ( down ), ( front ), ( back ), ( left ), and ( right ) instead of using integers. Working with a three-dimensional model of a cube will also aid in identifying the permutations you require.    "
},
{
  "id": "ex_polya_perm-rep",
  "level": "2",
  "url": "s_polya_exercises.html#ex_polya_perm-rep",
  "type": "Exercise",
  "number": "15.6.1",
  "title": "",
  "body": "  Write the permutations shown below in cycle notation.    "
},
{
  "id": "s_polya_exercises-2",
  "level": "2",
  "url": "s_polya_exercises.html#s_polya_exercises-2",
  "type": "Exercise",
  "number": "15.6.2",
  "title": "",
  "body": "  Compute , , , and for the permutations in .   "
},
{
  "id": "s_polya_exercises-3",
  "level": "2",
  "url": "s_polya_exercises.html#s_polya_exercises-3",
  "type": "Exercise",
  "number": "15.6.3",
  "title": "",
  "body": "  Find and for the colorings of the vertices of the square shown in by referring to .   "
},
{
  "id": "s_polya_exercises-4",
  "level": "2",
  "url": "s_polya_exercises.html#s_polya_exercises-4",
  "type": "Exercise",
  "number": "15.6.4",
  "title": "",
  "body": "  In , we show a regular pentagon with its vertices labeled. Use this labeling to complete this exercise.   A pentagon with labeled vertices        The dihedral group of the pentagon, , contains permutations. Let be the clockwise rotation by and be the flip about the line passing through and perpendicular to the opposite side. Let , , and be the other rotations in . Denote the flip about the line passing through vertex and perpendicular to the other side by , . Write all elements of in cycle notation.  Suppose we are coloring the vertices of the pentagon using black and white. Draw the colorings fixed by . Draw the colorings fixed by .  Find where is the coloring of the vertices of the pentagon in which vertices , , and are colored black and vertices and are colored white.  Find the cycle index of .  Use the cycle index to determine the number of nonequivalent colorings of vertices of the pentagon using black and white.  Making an appropriate substitution for the in the cycle index, find the number of nonequivalent colorings of the vertices of the pentagon in which two vertices are colored black and three vertices are colored white. Draw these colorings.     "
},
{
  "id": "ex_polya_cyclic12",
  "level": "2",
  "url": "s_polya_exercises.html#ex_polya_cyclic12",
  "type": "Exercise",
  "number": "15.6.5",
  "title": "",
  "body": "  Write all permutations in , the cyclic group of order , in cycle notation.   "
},
{
  "id": "s_polya_exercises-6",
  "level": "2",
  "url": "s_polya_exercises.html#s_polya_exercises-6",
  "type": "Exercise",
  "number": "15.6.6",
  "title": "",
  "body": "  The -note western scale is not the only system on which music is based. In classical Thai music, a scale with seven equally-spaced notes per octave is used. As in western music, a scale is a subset of these seven notes, and two scales are equivalent if they are transpositions of each other. Find the number of -note scales in classical Thai music for .   "
},
{
  "id": "s_polya_exercises-7",
  "level": "2",
  "url": "s_polya_exercises.html#s_polya_exercises-7",
  "type": "Exercise",
  "number": "15.6.7",
  "title": "",
  "body": "  Xylene is an aromatic hydrocarbon having two methyl groups (and four hydrogen atoms) attached to the hexagonal carbon ring. How many isomers are there of xylene?   "
},
{
  "id": "ex_polya_perm-pairs",
  "level": "2",
  "url": "s_polya_exercises.html#ex_polya_perm-pairs",
  "type": "Exercise",
  "number": "15.6.8",
  "title": "",
  "body": "  Find the permutations in corresponding to the permutations and in . Confirm that the first consists of a -cycle and a -cycle and the second consists of two -cycles and two -cycles.   "
},
{
  "id": "s_polya_exercises-9",
  "level": "2",
  "url": "s_polya_exercises.html#s_polya_exercises-9",
  "type": "Exercise",
  "number": "15.6.9",
  "title": "",
  "body": "  Draw the three nonisomorphic graphs on four vertices with edges and the two nonisomorphic graphs on four vertices with edges.   "
},
{
  "id": "s_polya_exercises-10",
  "level": "2",
  "url": "s_polya_exercises.html#s_polya_exercises-10",
  "type": "Exercise",
  "number": "15.6.10",
  "title": "",
  "body": "    Use the method of to find the cycle index of the pair group of the symmetric group on five elements.  Use the cycle index from to determine the number of nonisomorphic graphs on five vertices. How many of them have edges?     "
},
{
  "id": "s_polya_exercises-11",
  "level": "2",
  "url": "s_polya_exercises.html#s_polya_exercises-11",
  "type": "Exercise",
  "number": "15.6.11",
  "title": "",
  "body": "  Tic-tac-toe is a two-player game played on a grid. The players mark the squares of the grid with the symbols X and O. This exercise uses Pólya's enumeration theorem to investigate the number of different tic-tac-toe boards. (The analysis of games is more complex, since it requires attention to the order the squares are marked and stopping when one player has won the game.)   Numbered squares of a tic-tac-toe board        Two tic-tac-toe boards are equivalent if one may be obtained from the other by rotating the board or flipping it over. (Imagine that it is drawn on a clear piece of plastic.) Since the grid is a square, the group that acts on it in this manner is the dihedral group that we have studied in this chapter. However, as with counting nonisomorphic graphs, we have to be careful to choose the way this group is represented in terms of cycles. Here we are interested in how permutations rearrange the nine squares of the tic-tac-toe board as numbered in . For example, the effect of the transformation , which rotates the board clockwise, can be represented as a permutation of the nine squares as .  Write each of the eight elements of as permutations of the nine squares of a tic-tac-toe board.  Find the cycle index of in terms of these permutations.  Make an appropriate substitution for in the cycle index to find a generating function in which the coefficient on is the number of nonequivalent tic-tac-toe boards having squares filled by symbol X and squares filled by symbol O. (Notice that some squares might be blank!)  How many nonequivalent tic-tac-toe boards are there?  How many nonequivalent tic-tac-toe boards have three X's and three O's?  When playing tic-tac-toe, the players alternate turns, each drawing their symbol in a single unoccupied square during a turn. Assuming the first player marks her squares with X and the second marks his with O, then at each stage of the game there are either the same number of X's and O's or one more X than there are O's. Use this fact and to determine the number of nonequivalent tic-tac-toe boards that can actually be obtained in playing a game, assuming the players continue until the board is full, regardless of whether one of them has won the game.     "
},
{
  "id": "s_polya_exercises-12",
  "level": "2",
  "url": "s_polya_exercises.html#s_polya_exercises-12",
  "type": "Exercise",
  "number": "15.6.12",
  "title": "",
  "body": "  Suppose you are painting the faces of a cube and you have white, gold, and blue paint available. Two painted cubes are equivalent if you can rotate one of them so that all corresponding faces are painted the same color. Determine the number of nonequivalent ways you can paint the faces of the cube as well as the number having two faces of each color.    It may be helpful to label the faces as ( up ), ( down ), ( front ), ( back ), ( left ), and ( right ) instead of using integers. Working with a three-dimensional model of a cube will also aid in identifying the permutations you require.   "
},
{
  "id": "s_kitchensink_online",
  "level": "1",
  "url": "s_kitchensink_online.html",
  "type": "Section",
  "number": "16.1",
  "title": "On-line algorithms",
  "body": " On-line algorithms  algorithm on-line   Many applications of combinatorics occur in a dynamic, on-line manner. It is rare that one has all the information about the challenges a problem presents before circumstances compel that decisions be made. As examples, a decision to proceed with a major construction project must be made several years before ground is broken; investment decisions are made on the basis of today's information and may look particularly unwise when tomorrow's news is available; and deciding to exit a plane with a parachute is rarely reversible.  In this section, we present two examples intended to illustrate on-line problems in a combinatorial setting. Our first example involves graph coloring. As is customary in discussions of on-line algorithms, we consider a two-person game with the players called Assigner and Builder . The two players agree in advance on a class of graphs, and the game is played in a series of rounds. At round Builder presents a single vertex, and Assigner assigns it a color. At each subsequent rounds, Builder presents a new vertex, and provides complete information as to which of the preceding vertices are adjacent to it. In turn, Assigner must give the new vertex a color distinct from colors she has assigned previously to its neighbors.   Even if Builder is constrained to build a path on vertices, then Assigner can be forced to use three colors. At Round 1, Builder presents a vertex and Assigner colors it. At Round 2, Builder presents a vertex and declares that and are not adjacent.  Now Assigner has a choice. She may either give and the same color, or she may elect to assign a new color to . If Assigner gives and different colors, then in Round 3, Builder presents a vertex and declares that is adjacent to both and . Now Assigner will be forced to use a third color on . In Round , Builder will add a vertex adjacent to but to neither nor , but the damage has already been done.  On the other hand, if Assigner and the same color, then in Round 3, Builder presents a vertex , with adjacent to but not to . Assigner must use a second color on , distinct from the one she gave to and . In Round 4, Builder presents a vertex adjacent to and but not to . Assigner must use a third color on .   Note that a path is a tree and trees are forests. The next result shows that while forests are trivial to color off-line, there is a genuine challenge ahead when you have to work on-line. To assist us in keeping track of the colors used by Assigner, we will use the notation from and write for the color given by Assigner to vertex .   forest   Let be a positive integer. Then there is a strategy for Builder that will enable Builder to construct a forest having at most vertices while forcing Assigner to use colors.    When , all Builder does is present a single vertex. When , two adjacent vertices are enough. When , Builder constructs a path on vertices as detailed in . Now assume that for some , Builder has a strategy for forcing Assigner to use colors on a forest of at most vertices, for each . Here's how Builder proceeds to force colors.  First, for each , Builder follows strategy to build a forest having at most vertices on which assigner is forced to use colors. Furthermore, when , there are no edges between vertices in and vertices in .  Next, Builder chooses a vertex from . Since Assigner uses two colors on , there is a vertex from so that . Since Assigner uses three colors on , there is a vertex in so that are all distinct. It follows that Builder may identify vertices with so that the colors satisfy if . Builder now presents a new vertex and declares adjacent to all vertices in and to no other vertices. Clearly, the resulting graph is a forest and Assigner is forced to use a color for distinct from the colors she assigned previously to the vertices in . Also, the total number of vertices is at most .     Bob reads the proof and asks whether it was really necessary to treat the cases and separately. Wasn't it enough just to note that the case holds trivially. Carlos says yes.     Doing Relatively Well in an On-Line Setting  should be viewed as a negative result. It is hard to imagine a family of graphs easier to color than forests, yet in an on-line setting, graphs in this family are difficult to color. On the other hand, in certain settings, one can do reasonably well in an on-line setting, perhaps not as well as the true optimal off-line result but good enough to be useful. Here we present a particularly elegant example involving partially ordered sets.  Recall that a poset of height can be partitioned into antichains by recursively removing the set of minimal elements. But how many antichains are required in an on-line setting? Now Builder constructs a poset one point at a time, while Assigner constructs a partition of into antichains. At each round, Builder will present a new point , and list those points presented earlier that are, respectively, less than , greater than and incomparable with . Subsequently, Assigner will assign to an antichain. This will be done either by adding to an antichain already containing one or more of the points presented previously, or by assigning to a new antichain.   partition antichain   For each , there is a on-line strategy for Assigner that will enable her to partition a poset into at most antichains, provided the height of is at most .    It is important to note that Assigner does not need to know the value in advance. For example, Builder may have in mind that ultimately the value of will be , but this information does not impact Assigner's strategy.  When the new point enters , Assigner computes the values and , where is the largest integer for which there exists a chain of points in having as its least element. Also, is the largest integer for which there exists a chain of points in having as its largest element. Assigner then places in a set , claiming that any two points in this set are incomparable. To see that this claim is valid, consider the first moment where Builder has presented a new point , Assigner places in and there is already a point in for which and are comparable.  When was presented, there was at that moment in time a chain of points having as its least element. Also, there was a chain of points having as its greatest element.  Now suppose that in . Then we can add to to form a chain of points having as its least element. This would imply that is not assigned in . Similarly, if in , then we may add to to form a chain of points having as its greatest element. Again, this would imply that is not assigned to .  So Assigner has indeed devised a good strategy for partitioning into antichains, but how many antichains has she used? This is just asking how many ordered pairs of positive integers are there subject to the restriction that . And we learned how to solve this kind of question in . The answer of course is .    The strategy for Assigner is so simple and natural, it might be the case that a more complex strategy would yield a more efficient partitioning. Not so.   Szemerédi  partition antichain   For every , there is a strategy for builder that will enable him to build a poset of height so that assigner is forced to (1) use at least antichains in partitioning , and (2) use at least different antichains on the set of maximal elements.    Strategy is just to present a single point. Now suppose that the theorem holds for some integer . We show how strategy proceeds.  First Builder follows strategy to form a poset . Then he follows it a second time for form a poset , with all points of incomparable to all points in . Now we consider two cases. Suppose first that Assigner has used or more antichains on the set of maximal elements of . In this case, he follows strategy a third time to build a poset with all points of less than all maximal elements of and incomparable with all other points.  Clearly, the height of the resulting poset is at most . Also, Assigner must use antichains in partitioning the poset and she has used on the set of maximal elements.  So it remains only to consider the case where Assigner has used a set of antichains on the maximal elements of , and she has used exactly the same antichains for the maximal elements of . Then Builder presents a new point and declares it to be greater than all points of and incomparable with all points of . Assigner must put in some antichain which is not in .  Builder then follows strategy a third time, but now all points of are less than and the maximal elements of . Again, Assigner has been forced to use different antichains on the maximal elements and antichains altogether.     "
},
{
  "id": "s_kitchensink_online-3-2",
  "level": "2",
  "url": "s_kitchensink_online.html#s_kitchensink_online-3-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Assigner Builder "
},
{
  "id": "exa_P4",
  "level": "2",
  "url": "s_kitchensink_online.html#exa_P4",
  "type": "Example",
  "number": "16.1",
  "title": "",
  "body": " Even if Builder is constrained to build a path on vertices, then Assigner can be forced to use three colors. At Round 1, Builder presents a vertex and Assigner colors it. At Round 2, Builder presents a vertex and declares that and are not adjacent.  Now Assigner has a choice. She may either give and the same color, or she may elect to assign a new color to . If Assigner gives and different colors, then in Round 3, Builder presents a vertex and declares that is adjacent to both and . Now Assigner will be forced to use a third color on . In Round , Builder will add a vertex adjacent to but to neither nor , but the damage has already been done.  On the other hand, if Assigner and the same color, then in Round 3, Builder presents a vertex , with adjacent to but not to . Assigner must use a second color on , distinct from the one she gave to and . In Round 4, Builder presents a vertex adjacent to and but not to . Assigner must use a third color on .  "
},
{
  "id": "thm_olforest",
  "level": "2",
  "url": "s_kitchensink_online.html#thm_olforest",
  "type": "Theorem",
  "number": "16.2",
  "title": "",
  "body": " forest   Let be a positive integer. Then there is a strategy for Builder that will enable Builder to construct a forest having at most vertices while forcing Assigner to use colors.    When , all Builder does is present a single vertex. When , two adjacent vertices are enough. When , Builder constructs a path on vertices as detailed in . Now assume that for some , Builder has a strategy for forcing Assigner to use colors on a forest of at most vertices, for each . Here's how Builder proceeds to force colors.  First, for each , Builder follows strategy to build a forest having at most vertices on which assigner is forced to use colors. Furthermore, when , there are no edges between vertices in and vertices in .  Next, Builder chooses a vertex from . Since Assigner uses two colors on , there is a vertex from so that . Since Assigner uses three colors on , there is a vertex in so that are all distinct. It follows that Builder may identify vertices with so that the colors satisfy if . Builder now presents a new vertex and declares adjacent to all vertices in and to no other vertices. Clearly, the resulting graph is a forest and Assigner is forced to use a color for distinct from the colors she assigned previously to the vertices in . Also, the total number of vertices is at most .   "
},
{
  "id": "s_kitchensink_online-3-6",
  "level": "2",
  "url": "s_kitchensink_online.html#s_kitchensink_online-3-6",
  "type": "Discussion",
  "number": "16.3",
  "title": "",
  "body": " Bob reads the proof and asks whether it was really necessary to treat the cases and separately. Wasn't it enough just to note that the case holds trivially. Carlos says yes.  "
},
{
  "id": "s_kitchensink_online-4-4",
  "level": "2",
  "url": "s_kitchensink_online.html#s_kitchensink_online-4-4",
  "type": "Theorem",
  "number": "16.4",
  "title": "",
  "body": " partition antichain   For each , there is a on-line strategy for Assigner that will enable her to partition a poset into at most antichains, provided the height of is at most .    It is important to note that Assigner does not need to know the value in advance. For example, Builder may have in mind that ultimately the value of will be , but this information does not impact Assigner's strategy.  When the new point enters , Assigner computes the values and , where is the largest integer for which there exists a chain of points in having as its least element. Also, is the largest integer for which there exists a chain of points in having as its largest element. Assigner then places in a set , claiming that any two points in this set are incomparable. To see that this claim is valid, consider the first moment where Builder has presented a new point , Assigner places in and there is already a point in for which and are comparable.  When was presented, there was at that moment in time a chain of points having as its least element. Also, there was a chain of points having as its greatest element.  Now suppose that in . Then we can add to to form a chain of points having as its least element. This would imply that is not assigned in . Similarly, if in , then we may add to to form a chain of points having as its greatest element. Again, this would imply that is not assigned to .  So Assigner has indeed devised a good strategy for partitioning into antichains, but how many antichains has she used? This is just asking how many ordered pairs of positive integers are there subject to the restriction that . And we learned how to solve this kind of question in . The answer of course is .   "
},
{
  "id": "s_kitchensink_online-4-6",
  "level": "2",
  "url": "s_kitchensink_online.html#s_kitchensink_online-4-6",
  "type": "Theorem",
  "number": "16.5",
  "title": "Szemerédi.",
  "body": " Szemerédi  partition antichain   For every , there is a strategy for builder that will enable him to build a poset of height so that assigner is forced to (1) use at least antichains in partitioning , and (2) use at least different antichains on the set of maximal elements.    Strategy is just to present a single point. Now suppose that the theorem holds for some integer . We show how strategy proceeds.  First Builder follows strategy to form a poset . Then he follows it a second time for form a poset , with all points of incomparable to all points in . Now we consider two cases. Suppose first that Assigner has used or more antichains on the set of maximal elements of . In this case, he follows strategy a third time to build a poset with all points of less than all maximal elements of and incomparable with all other points.  Clearly, the height of the resulting poset is at most . Also, Assigner must use antichains in partitioning the poset and she has used on the set of maximal elements.  So it remains only to consider the case where Assigner has used a set of antichains on the maximal elements of , and she has used exactly the same antichains for the maximal elements of . Then Builder presents a new point and declares it to be greater than all points of and incomparable with all points of . Assigner must put in some antichain which is not in .  Builder then follows strategy a third time, but now all points of are less than and the maximal elements of . Again, Assigner has been forced to use different antichains on the maximal elements and antichains altogether.   "
},
{
  "id": "s_kitchensink_extremal-set-theory",
  "level": "1",
  "url": "s_kitchensink_extremal-set-theory.html",
  "type": "Section",
  "number": "16.2",
  "title": "Extremal Set Theory",
  "body": " Extremal Set Theory  Let be a positive integer and let . In this section, we consider problems having the following general form: What is the maximum size of a family of subsets of when the family is required to satisfy certain properties.  Here is an elementary example.   The maximum size of a family of subsets of , with for all , is .  For the lower bound, consider the family of all subsets of that contain . Clearly this family has elements and any two sets in the family have non-empty intersection.  For the upper bound, let be a family of subsets with each pair of sets in having non-empty intersection. Then whenever a subset is a member of , the complement of cannot belong to . Since the entire family of all subsets of can be considered as complementary pairs, and at most one set from each pair can belong to , we conclude that .   As a second example, we can revisit from and restate the result as follows.   The maximum size of a family of subsets of subject to the constraint that when and are distinct sets in , then neither is a subset of the other, is .   It is worth noting that in , there is a very small number (one or two) of extremal families, , when is a family of subsets of , , and no set in is a proper subset of another, then either or . And of course, when is even, these are exactly the same family.  On the other hand, for , there are many extremal families, since for every complementary pair of sets, either member can be selected.  We close this brief tasting of extremal set theory with a real classic.   Erdős, Ko, Rado  Erdős-Ko-Rado Theorem   Let and be positive integers with . Then the maximum size of a family of subsets of subject to the restrictions that (1) for all , and (2) for all , is .    For the lower bound, consider the family of all element subset of that contain .  For the upper bound, let be a family of subsets of satisfying the two constraints. We show that . To accomplish this, we consider a circle in the Euclidean plane with points , equally spaced points around its circumference. Then there are different ways (one for each permutation of ) to place the integers in at the points in in one to one manner.  For each permutation of , let denote the subfamily of consisting of all sets from whose elements occur in a consecutive block around the circle. Then let .  Our first claim is that . To prove this, let be a permutation and suppose that . Then the union of the sets from is a set of points that form a consecutive block of points on the circle. Note that since , this block does not encompass the entire circle. Accordingly there is a set whose elements are the first in a clockwise sense within this block. Since each other set in represents a clockwise shift of one of more positions, it follows immediately that . Since there are permutations, the claim follows.  We now claim that for each set , there are exactly permutations for which . Note that there are positions around the circle and each can be used as the first point in a block of consecutive positions in which the elements of can be placed. Then there are ways to order the elements of and ways to order the remaining elements. This proves our claim.  To complete the proof of the theorem, we note that we have and this implies that .    "
},
{
  "id": "exa_intersecting",
  "level": "2",
  "url": "s_kitchensink_extremal-set-theory.html#exa_intersecting",
  "type": "Example",
  "number": "16.6",
  "title": "",
  "body": " The maximum size of a family of subsets of , with for all , is .  For the lower bound, consider the family of all subsets of that contain . Clearly this family has elements and any two sets in the family have non-empty intersection.  For the upper bound, let be a family of subsets with each pair of sets in having non-empty intersection. Then whenever a subset is a member of , the complement of cannot belong to . Since the entire family of all subsets of can be considered as complementary pairs, and at most one set from each pair can belong to , we conclude that .  "
},
{
  "id": "exa_Sperner",
  "level": "2",
  "url": "s_kitchensink_extremal-set-theory.html#exa_Sperner",
  "type": "Example",
  "number": "16.7",
  "title": "",
  "body": " The maximum size of a family of subsets of subject to the constraint that when and are distinct sets in , then neither is a subset of the other, is .  "
},
{
  "id": "s_kitchensink_extremal-set-theory-10",
  "level": "2",
  "url": "s_kitchensink_extremal-set-theory.html#s_kitchensink_extremal-set-theory-10",
  "type": "Theorem",
  "number": "16.8",
  "title": "Erdős, Ko, Rado.",
  "body": " Erdős, Ko, Rado  Erdős-Ko-Rado Theorem   Let and be positive integers with . Then the maximum size of a family of subsets of subject to the restrictions that (1) for all , and (2) for all , is .    For the lower bound, consider the family of all element subset of that contain .  For the upper bound, let be a family of subsets of satisfying the two constraints. We show that . To accomplish this, we consider a circle in the Euclidean plane with points , equally spaced points around its circumference. Then there are different ways (one for each permutation of ) to place the integers in at the points in in one to one manner.  For each permutation of , let denote the subfamily of consisting of all sets from whose elements occur in a consecutive block around the circle. Then let .  Our first claim is that . To prove this, let be a permutation and suppose that . Then the union of the sets from is a set of points that form a consecutive block of points on the circle. Note that since , this block does not encompass the entire circle. Accordingly there is a set whose elements are the first in a clockwise sense within this block. Since each other set in represents a clockwise shift of one of more positions, it follows immediately that . Since there are permutations, the claim follows.  We now claim that for each set , there are exactly permutations for which . Note that there are positions around the circle and each can be used as the first point in a block of consecutive positions in which the elements of can be placed. Then there are ways to order the elements of and ways to order the remaining elements. This proves our claim.  To complete the proof of the theorem, we note that we have and this implies that .   "
},
{
  "id": "s_kitchensink_markov-chains",
  "level": "1",
  "url": "s_kitchensink_markov-chains.html",
  "type": "Section",
  "number": "16.3",
  "title": "Markov Chains",
  "body": " Markov Chains   We begin this section with a motivational example. Consider the connected graph on six vertices shown in . The first move is to choose a vertex at random and move there. Afterwards, we follow the following recursive procedures. If after moves, you are at a vertex and has neighbors, choose one of the neighbors at random, with each having probability and move there. We then attempt to answer questions of the following flavor:   For each vertex , let denote the probability that you are at vertex after moves. Does exist and if so, how fast does the sequence converge to this limit?  How many moves must I make in order that the probability that I have walked on every edge in the graph is at least ?    This example illustrates the characteristics of an important class of computational and combinatorial problems, which are collectively referred to as Markov Chains Markov chain :  There is a finite set of states , , and at time , you are in one of these states.  If you are in state at time , then for each , there is a fixed probability (which does not depend on ) that you will be in state at time .    The matrix whose entry is the probability of moving from state to state is called the transition matrix matrix transition of the Markov chain. Note that is a stochastic matrix matrix stochastic , , all entries are non-negative and all row sums are . Conversely, each square stochastic matrix can be considered as the transition matrix of a Markov chain.  For example, here is the transition matrix for the graph in .   A transition matrix is regular regular transition matrix if there is some integer for which the matrix has only positive entries. Here is a fundamental result from this subject, one that is easy to understand but a bit too complex to prove given our space constraints.    Let be a regular transition matrix. Then there is a row vector ) of positive real numbers summing to so that as tends to infinity, each row of tends to . Furthermore, , and for each , the value is the limiting probability of being in state .    Given the statement of , the computation of the row vector can be carried out by eigenvalue techniques that are part of a standard undergraduate linear algebra course. For example, the transition matrix displayed in is regular since all entries of are positive. Furthermore, for this matrix, the row vector . However, the question involving how fast the convergence of is to this limiting vector is more subtle, as is the question as to how long it takes for us to be relatively certain we have made every possible transition.    Absorbing Markov Chains  A state in a Markov chain with transition matrix is absorbing absorbing state of a Markov chain if and for all , , like the infamous Hotel California, once you are in state , you can never leave.    We modify the transition matrix from by making states and absorbing. The revised transition matrix is now:    Now we might consider the following game. Start at one of the four vertices in and proceed as before, making moves by choosing a neighbor at random. Vertex might be considered as an escape point, a safe harbor that once reached is never left. On the other hand, vertex might be somewhere one meets a hungry tiger and be absorbed in a way not to be detailed here.  We say the Markov chain is absorbing absorbing Markov chain if there is at least one absorbing state and for each state that is not absorbing, it is possible to reach an absorbing state although it may take many steps to do so. Now the kinds of questions we would like to answer are:  If we start in non-absorbing state , what is the probability of reaching absorbing state (and then being absorbed in that state, a question which takes on genuine unpleasantness relative to tigers)?  If we are absorbed in state , what is the probability that we started in non-absorbing state ?  If we start in non-absorbing state , what is the expected length of time before we will be absorbed?     "
},
{
  "id": "s_kitchensink_markov-chains-2-2",
  "level": "2",
  "url": "s_kitchensink_markov-chains.html#s_kitchensink_markov-chains-2-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Markov Chains "
},
{
  "id": "s_kitchensink_markov-chains-2-3",
  "level": "2",
  "url": "s_kitchensink_markov-chains.html#s_kitchensink_markov-chains-2-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "transition matrix stochastic matrix "
},
{
  "id": "s_kitchensink_markov-chains-2-5",
  "level": "2",
  "url": "s_kitchensink_markov-chains.html#s_kitchensink_markov-chains-2-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "regular "
},
{
  "id": "thm_regular",
  "level": "2",
  "url": "s_kitchensink_markov-chains.html#thm_regular",
  "type": "Theorem",
  "number": "16.9",
  "title": "",
  "body": "  Let be a regular transition matrix. Then there is a row vector ) of positive real numbers summing to so that as tends to infinity, each row of tends to . Furthermore, , and for each , the value is the limiting probability of being in state .   "
},
{
  "id": "s_kitchensink_markov-chains-3-2",
  "level": "2",
  "url": "s_kitchensink_markov-chains.html#s_kitchensink_markov-chains-3-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "absorbing "
},
{
  "id": "s_kitchensink_markov-chains-3-3",
  "level": "2",
  "url": "s_kitchensink_markov-chains.html#s_kitchensink_markov-chains-3-3",
  "type": "Example",
  "number": "16.10",
  "title": "",
  "body": " We modify the transition matrix from by making states and absorbing. The revised transition matrix is now:   "
},
{
  "id": "s_kitchensink_markov-chains-3-5",
  "level": "2",
  "url": "s_kitchensink_markov-chains.html#s_kitchensink_markov-chains-3-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "absorbing "
},
{
  "id": "s_kitchensink_stable-match",
  "level": "1",
  "url": "s_kitchensink_stable-match.html",
  "type": "Section",
  "number": "16.4",
  "title": "The Stable Matching Theorem",
  "body": " The Stable Matching Theorem  Now we present a light hearted optimization problem with a quite clever solution, called the Stable Matching Theorem . There are eligible homebuyers , and eligible homesellers , . We will arrange home sales, each involving one buyer and one seller. In the process, we will try to make everyone happy or at least we will try to keep things stable.  Each seller linearly orders the buyers in the order of their preference, i.e., for each , there is a permutation of so that if prefers to , then . Different sellers may have quite different preference orders. Also, each buyer linearly orders the sellers (really, the homes they are selling!) in order of their preference, i.e., for each , there is a permutation of so that if prefers to , then .  A matching of the buyers to the sellers is stable matching stable if there do not exist two buyers and and two sellers and so that  is matched to ;  is matched to ;  prefers to ; and  prefers to .  The idea is that given these preferences, and may be mutually inclined to arrange for to sell their home to , abandoning the other arrangements that had been in place. (Since and are acting in their own best interests, the preferences of and are irrelevant here.)  The question is whether, regardless of their respective preferences, we can always generate a stable matching. The answer is yes and there is a clever argument. In fact, it is one that yields an efficient algorithm. To start, each buyer knocks on the front door of the seller who is tops on their list. It may happen that some sellers have more than one prospective buyer on their doorstep while others have none. However, if a seller has one or more buyers at their door, then the seller invites the buyer on their doorstep which they prefer most to come in and tells the others, if there are any, to go away. Any buyer rejected at this step proceeds to the front door of the home that is second on their list. Again, a seller with one or more buyers at their door (including the one previously invited to come in, if applicable) chooses the best among them and sends the others away. This process continues until eventually, each seller is has exactly one buyer in their home.  It is interesting to note that each seller's prospects improve over time, i.e., once they have a buyer, things only get better. Conversely, each buyer's prospects deteriorate over time. Regardless, we assert that the resulting matching is stable. To see this, suppose that it is unstable and choose buyers and and sellers and so that is matched to , is matched to , but prefers to and prefers to . The algorithm requires that buyer start at the top of their list and work their way down. Since they eventually landed at the door of seller , and they prefer to , at one stage of the algorithm, buyer was actually at the door of , and seller sent buyer away. This means that at that exact moment, had a buyer in hand that they prefer to . Since each seller's holdings only improve with time, it means that when the matching is finalized, seller has a buyer that they prefer to . Therefore, the matching is not, in fact, unstable.  "
},
{
  "id": "s_kitchensink_stable-match-4",
  "level": "2",
  "url": "s_kitchensink_stable-match.html#s_kitchensink_stable-match-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "stable "
},
{
  "id": "s_kitchensink_zero-one-matrices",
  "level": "1",
  "url": "s_kitchensink_zero-one-matrices.html",
  "type": "Section",
  "number": "16.5",
  "title": "Zero–One Matrices",
  "body": " Zero One Matrices   Matrices with all entries and matrix zero one arise in many combinatorial settings, and here we present a classic result, called the Gale-Ryser theorem. It deals with zero one matrices with specified row and column sum strings. When is an zero one matrix, the string , where , is called the row sum string string row sum of . The column sum string string column sum  is defined analogously. Conversely, let and be positive integers, and let and be strings of non-negative integers. The question is whether there exists an zero one matrix with row sum string and column sum string .  To attack this problem, we pause briefly to develop some additional background material. Note that we may assume without loss of generality that there is a positive integer so that , else there is certainly no zero one matrix with row sum string and column sum string . Furthermore, we may assume that both and are non-increasing strings, , and .  To see this note that whenever we exchange two rows in a zero one matrix, the column sum string is unchanged. Accordingly after a suitable permutation of the rows, we may assume that is non-increasing. Then the process is repeated for the columns.  Finally, it is easy to see that we may assume that all entries in and are positive integers, since zeroes in these strings correspond to rows of zeroes or columns of zeroes in the matrix. Accordingly, the row sum string and the column sum string can be viewed as partitions of the integer , a topic we first introduced in .  For the balance of this section, we let be a positive integer and we let denote the family of all partitions of the integer . There is a natural partial order on defined by setting if and only if and for each , , the sequence of partial sums for is always at least as large, term by term, as the sequence of partial sums of . For example, we show in the partial order .  FIGURE HERE  In the proof of the Gale-Ryser theorem, it will be essential to fully understand when one partition covers another. We state the following proposition for emphasis; the proof consists of just considering the details of the definition of the partial order on partitions.    Let and be partitions of an integer . If covers in the poset , then and there exist integers and with so that the following statements hold.  , when .  , when .  .  Either (a) and , or (b) and .  If , then when .      To illustrate this concept, note that covers in . Also, we see covers in .  With a partition from , we associate a dual partition partition dual  defined as follows: (1) and for each , is the number of entries in that are at least . For example, the dual partition of is . Of course, they are both partitions of , which is the secret of the universe! In what follows, we denote the dual of the partition by . Note that if , then , , the dual of the dual is the original.    The Obvious Necessary Condition  Now let be a zero one matrix with row sum string and column sum string . As noted before, we will assume that all entries in and are positive. Next, we modify to form a new matrix as follows: For each , we push the ones in row as far to the left as possible, , if and only if . Note that and both have for their row sum strings. However, if denotes the column sum string for , then is a non-decreasing string, and the substring of consisting of the positive entries is , the dual partition of . Furthermore, for each , we have the inequality , since the operation of shift ones to the left can only increase the partial sums. It follows that in the poset .  So here is the Gale-Ryser theorem.   Gale-Ryser  Gale-Ryser theorem  partition of an integer  matrix zero one   Let and be partitions of a positive integer . Then there exists a zero one matrix with row sum string and column sum string if and only if in the poset .    The necessity of the condition has been established. We prove sufficiency. The proof is constructive. In the poset , let be a chain so that (1) , (2) and (3) if , then covers . We start with a zero one matrix having row sum string and column sum string , as suggested in for the partition . If , we are done, so we assume that for some with , we have a zero one matrix with row sum string and column sum string . Then let and be the integers from , which detail how covers . Choose a row so that the entry of is while the entry of is . Exchange these two entries to form the matrix . Note that the exchange may in fact require adding a new column to the matrix.     "
},
{
  "id": "s_kitchensink_zero-one-matrices-2-1",
  "level": "2",
  "url": "s_kitchensink_zero-one-matrices.html#s_kitchensink_zero-one-matrices-2-1",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "row sum string column sum string "
},
{
  "id": "prop_partitioncover",
  "level": "2",
  "url": "s_kitchensink_zero-one-matrices.html#prop_partitioncover",
  "type": "Proposition",
  "number": "16.11",
  "title": "",
  "body": "  Let and be partitions of an integer . If covers in the poset , then and there exist integers and with so that the following statements hold.  , when .  , when .  .  Either (a) and , or (b) and .  If , then when .     "
},
{
  "id": "s_kitchensink_zero-one-matrices-2-10",
  "level": "2",
  "url": "s_kitchensink_zero-one-matrices.html#s_kitchensink_zero-one-matrices-2-10",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "dual partition "
},
{
  "id": "s_kitchensink_zero-one-matrices-3-4",
  "level": "2",
  "url": "s_kitchensink_zero-one-matrices.html#s_kitchensink_zero-one-matrices-3-4",
  "type": "Theorem",
  "number": "16.12",
  "title": "Gale-Ryser.",
  "body": " Gale-Ryser  Gale-Ryser theorem  partition of an integer  matrix zero one   Let and be partitions of a positive integer . Then there exists a zero one matrix with row sum string and column sum string if and only if in the poset .    The necessity of the condition has been established. We prove sufficiency. The proof is constructive. In the poset , let be a chain so that (1) , (2) and (3) if , then covers . We start with a zero one matrix having row sum string and column sum string , as suggested in for the partition . If , we are done, so we assume that for some with , we have a zero one matrix with row sum string and column sum string . Then let and be the integers from , which detail how covers . Choose a row so that the entry of is while the entry of is . Exchange these two entries to form the matrix . Note that the exchange may in fact require adding a new column to the matrix.   "
},
{
  "id": "s_kitchensink_arithmetic-combinatorics",
  "level": "1",
  "url": "s_kitchensink_arithmetic-combinatorics.html",
  "type": "Section",
  "number": "16.6",
  "title": "Arithmetic Combinatorics",
  "body": " Arithmetic Combinatorics  In recent years, a great deal of attention has been focused on topics in arithmetic combinatorics, with a number of deep and exciting discoveries in the offing. In some sense, this area is closely aligned with Ramsey theory and number theory, but recent work shows connections with real and complex analysis, as well. Furthermore, the roots of arithmetic combinatorics go back many years. In this section, we present a brief overview of this rich and rapidly changing area.  Recall that an increasing sequence of integers is called an arithmetic progression arithmetic progression when there exists a positive integer for which , for all . The integer is called the length length of arithmetic progression of the arithmetic progression.    For pair of positive integers, there exists an integer , so that if and is any function, then there exists a -term arithmetic progression and an element so that , for each .    Material will be added here.  "
},
{
  "id": "s_kitchensink_arithmetic-combinatorics-3",
  "level": "2",
  "url": "s_kitchensink_arithmetic-combinatorics.html#s_kitchensink_arithmetic-combinatorics-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "arithmetic progression length "
},
{
  "id": "s_kitchensink_arithmetic-combinatorics-4",
  "level": "2",
  "url": "s_kitchensink_arithmetic-combinatorics.html#s_kitchensink_arithmetic-combinatorics-4",
  "type": "Theorem",
  "number": "16.13",
  "title": "",
  "body": "  For pair of positive integers, there exists an integer , so that if and is any function, then there exists a -term arithmetic progression and an element so that , for each .   "
},
{
  "id": "s_kitchensink_lovasz-local",
  "level": "1",
  "url": "s_kitchensink_lovasz-local.html",
  "type": "Section",
  "number": "16.7",
  "title": "The Lovász Local Lemma",
  "body": " The Lovász Local Lemma  Even though humans seem to have great difficulty in providing explicit constructions for exponentially large graphs which do not have complete subgraphs or independent sets of size , such graphs exist with great abundance. Just take one at random and you are almost certain to get one. And as a general rule, probabilistic techniques often provide a method for finding something that readily exists, but is hard to find.  Similarly, in the probabilistic proof that there exist graphs with large girth and large chromatic number ( ), we actually showed that almost all graphs have modest sized independence number and relatively few small cycles, provided that the edge probability is chosen appropriately. The small cycles can be destroyed without significantly changing the size of the graph.  By way of contrast, probabilistic techniques can, in certain circumstances, be used to find something which is exceedingly rare. We next present an elegant but elementary result, known as the Lovász Local Lemma, which has proved to be very, very powerful. The treatment is simplified by the following natural notation. When is an event in a probability space, we let denote the complement of complement of event . Also, when we let denote the event , , concatenation is short hand for intersection. These notations can be mixed, so represents . Now let be a finite family of events, let and let be a subfamily of . In the statement of the lemma below, we will say that is independent of any event not in when provided .  We first state and prove the lemma in asymmetric form. Later, we will give a simpler version which is called the symmetric version.   Lovász Local Lemma (Asymmetric)  Lovász Local Lemma asymmetric   Let be a finite family of events in a probability space and for each event , let denote a subfamily of events from so that is independent of any event not in . Suppose that for each event , there is a real number with such that Then for every non-empty subfamily , In particular, the probability that all events in fail is positive.    We proceed by induction on . If and , we are simply asserting that , which is true since . Now suppose that and that the lemma holds whenever . Let . Then Now each term in the product on the right has the following form: where .  So, we done if we can show that This is equivalent to showing that Suppose first that . Then So we may assume that . Let , with if and only if . Then Consider first the numerator in this last expression. Note that Next, consider the denominator. By the inductive hypothesis, we have Combining these last two inequalities, we have and the proof is complete.    Now here is the symmetric version.   Lovász Local Lemma (Symmetric)  Lovász Local Lemma symmetric   Let and be numbers with and . Also, let be a finite family of events in a probability space and for each event , let denote the subfamily of events from so that is independent of any event not in . Suppose that , for every event and that , where is the base for natural logarithms. Then  , the probability that all events in is positive.    Set for every event . Then     A number of applications of the symmetric form of the Lovász Local Lemma are stated in terms of the condition that . The proof of this alternate form is just a trivial modification of the argument we have presented here.  "
},
{
  "id": "lem_LLL",
  "level": "2",
  "url": "s_kitchensink_lovasz-local.html#lem_LLL",
  "type": "Lemma",
  "number": "16.14",
  "title": "Lovász Local Lemma (Asymmetric).",
  "body": " Lovász Local Lemma (Asymmetric)  Lovász Local Lemma asymmetric   Let be a finite family of events in a probability space and for each event , let denote a subfamily of events from so that is independent of any event not in . Suppose that for each event , there is a real number with such that Then for every non-empty subfamily , In particular, the probability that all events in fail is positive.    We proceed by induction on . If and , we are simply asserting that , which is true since . Now suppose that and that the lemma holds whenever . Let . Then Now each term in the product on the right has the following form: where .  So, we done if we can show that This is equivalent to showing that Suppose first that . Then So we may assume that . Let , with if and only if . Then Consider first the numerator in this last expression. Note that Next, consider the denominator. By the inductive hypothesis, we have Combining these last two inequalities, we have and the proof is complete.   "
},
{
  "id": "lem_LLL-sym",
  "level": "2",
  "url": "s_kitchensink_lovasz-local.html#lem_LLL-sym",
  "type": "Lemma",
  "number": "16.15",
  "title": "Lovász Local Lemma (Symmetric).",
  "body": " Lovász Local Lemma (Symmetric)  Lovász Local Lemma symmetric   Let and be numbers with and . Also, let be a finite family of events in a probability space and for each event , let denote the subfamily of events from so that is independent of any event not in . Suppose that , for every event and that , where is the base for natural logarithms. Then  , the probability that all events in is positive.    Set for every event . Then    "
},
{
  "id": "s_kitchensink_applying-local-lemma",
  "level": "1",
  "url": "s_kitchensink_applying-local-lemma.html",
  "type": "Section",
  "number": "16.8",
  "title": "Applying the Local Lemma",
  "body": " Applying the Local Lemma  The list of applications of the Local Lemma has been growing steadily, as has the interest in how the lemma can be applied algorithmically, , in a constructive setting. But here we present one of the early applications to Ramsey theory estimating the Ramsey number . Ramsey number Recall that we have the basic inequality from , and it is natural to turn to the probabilistic method to look for good lower bounds. But a few minutes thought shows that there are challenges to this approach.  First, let's try a direct computation. Suppose we try a random graph on vertices with edge probability . So we would want no triangles, and that would say we need , , . Then we would want no independent sets of size , which would require , , , so we can't even make larger than . That's not helpful.  We can do a bit better by allowing some triangles and then removing one point from each, as was done in the proof for . Along these lines, we would set , , . And the calculation now yields the lower bound , so even the exponent of is different from the upper bound.  So which one is right, or is the answer somewhere in between? In a classic 1961 paper, Erdős used a very clever application of the probabilistic method to show the existence of a graph from which a good lower bound could be extracted. His technique yielded the lower bound , so the two on the exponent of is correct.  Here we will use the Lovász Local Lemma Lovász Local Lemma to obtain this same lower bound in a much more direct manner. We consider a random graph on vertices with edge probability . For each -element subset , we have the event which is true when forms a triangle. For each -element set , we have the event which is true when is an independent set. In the discussion to follow, we abuse notation slightly and refer to events and as just and , respectively. Note that the probability of is for each -element set , while the probability of is for each -element set .  When we apply the Local Lemma, we will set to be , for each -element set . And we will set . It will be clear in a moment where we got those values.  Furthermore, the neighborhood of an event consists of all sets in the family which have two or more elements in common. So the neighborhood of a -element set consists of other -element sets and sets of size . Similarly, the neighborhood of an -element set consists of sets of size and other sets of size . So the basic inequalities we need to satisfy are: Next, we assume that and then make the usual approximations, ignoring smaller order terms and multiplicative constants, to see that these inequalities can be considered in the following simplified form: A moments reflection makes it clear that we want to keep the terms involving relatively large, , at least . This will certainly be true if we keep . This is equivalent to , or .  Similarly, we want to keep the term relatively large, so we keep , , . On the other hand, we want only to keep the term at least as large as . This is equivalent to keeping , and since , this can be rewritten as .  Now we have our marching orders. We just set and . After substituting, we get and since (at least within the kind of approximations we are using), we get the desired result .  "
},
{
  "id": "ch_epilogue",
  "level": "1",
  "url": "ch_epilogue.html",
  "type": "Appendix",
  "number": "A",
  "title": "Epilogue",
  "body": " Epilogue  Here is a progress report on our cast of characters, some five years after graduation Georgia Tech students do not speak of graduating. Instead, using the same phrase applied to incarceration, they talk about getting out . .  Alice and Bob got married, moved to Austin, Texas, and started a high tech firm using venture capital provided by a successful Georgia Tech grad. Alice is CEO and the pattern of making quick decisions, most of which are right, continues to this day. Bob is CFO and the financial health of the firm is guaranteed. The first year though was pretty tough, but after that, their reputation got established and contracts began to walk through the door. There's even talk about an IPO in the near future. Alice and Bob don't have much time to decide whether they are happy with the way their lives are going but we're pretty sure they are.  Carlos switched from Physics to math for graduate school and won an NSF graduate fellowship which he took at MIT. After receiving his Ph.D., he took a postdoctoral position at the American Institute for the Mathematical Sciences (AIMS). He also won an NSF Career grant. Carlos is a rapidly emerging star in the academic world. He has universities lining up to offer him tenure-track positions and he had already been invited to lecture in England, France, Germany, Hungary and Poland. He'll make a good living, not a huge salary, but the quality of life will rank with the best. He is very happy.  Dave surprised a lot of people. Somewhere along the way, he got just a bit more organized without losing that off-the-wall uniqueness that made him special. He took a job on Wall Street with a firm that just wanted really very smart people. He's making more money than any other member of the group, by far. But it comes at some cost. Long hours and lots of stress. On the occasional free Sunday (there aren't many), he wonders how much longer he can keep this up.  Xing took a job with Macrofirm in Bluemon. His group is developing new operating systems and attendant software that run on computing devices of all sizes, from smart phones through super computers. Lots of interesting challenges, for example, just in deciding how input should be done when there's no keyboard and the device screen is very small. Xing is enjoying life and feels his Georgia Tech experiences were great preparation.  Yolanda used her chemistry background to go to medical school at Emory University, where she received both an M.D. and a Ph.D. Afterwards, she accepted a position at the Center for Disease Control (CDC), which is also located here in Atlanta and has a bunch of scientists with the same kind of background training. Yolanda quickly became the go to person for analyzing strange viruses which no one else was able to identify. She is part of a very important safety net which is essential to the nation's security and well-being. She is very happy with her life.  Zori didn't go down the pathway through life she once envisioned. Her first job was with a family owned company making candy bars. In that position, she helped them to make wise decisions on massive sugar purchases made on a world-wide basis. She got bored with this job, and left to accept a position with a support group for an airline company. Her group did optimization work, figuring out how best to position aircraft and crews to handle scheduling irregularities. Two years later, she moved to a position with a major chip maker where she helped optimize the movement of cutting heads in the manufacturing process, where incremental improvements could mean for hundreds of millions of dollars in savings. Zori has made lots of money, but she remains vaguely dissatisfied with life and is still looking for the right environment.  "
},
{
  "id": "s_background_intro",
  "level": "1",
  "url": "s_background_intro.html",
  "type": "Section",
  "number": "B.1",
  "title": "Introduction",
  "body": " Introduction  Set theory is concerned with elements , certain collections of elements called sets and a concept of membership . For each element and each set , exactly one of the following two statements holds: element set  membership   is a member of .  is not a member of .    It is important to note that membership cannot be ambiguous.  When is an element and is a set, we write is a member of the set when is a member of . Also, the statement belongs to means exactly the same thing as is a member of . Similarly, when is not a member of , we write and say does not belong to . is not a member of the set   Certain sets will be defined explicitly by listing the elements. For example, let . Then and . The order of elements in such a listing is irrelevant, so we could also write . In other situations, sets will be defined by giving a rule for membership. As examples, let denote the set of positive integers. Then let . Note that while .  Given an element and a set , it may at times be tedious and perhaps very difficult to determine which of the statements and holds. But if we are discussing sets, it must be the case that exactly one is true.   Let be the set consisting of the following positive integers: Note that one number is listed twice. Which one is it? Also, does belong to ? Note that the apparent difficulty of answering these questions stems from (1) the size of the set and (2) the size of the integers that belong to . Can you think of circumstances in which it is difficult to answer whether is a member of even when it is known that contains exactly one element?    Let denote the set of primes. Then since . Also, . Now consider the number Does belong to ? Alice says yes while Bob says no. How could Alice justify her affirmative answer? How could Bob justify his negative stance? In this specific case, I know that Alice is right. Can you explain why?   "
},
{
  "id": "s_background_intro-2",
  "level": "2",
  "url": "s_background_intro.html#s_background_intro-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "elements sets membership "
},
{
  "id": "s_background_intro-7",
  "level": "2",
  "url": "s_background_intro.html#s_background_intro-7",
  "type": "Example",
  "number": "B.1",
  "title": "",
  "body": " Let be the set consisting of the following positive integers: Note that one number is listed twice. Which one is it? Also, does belong to ? Note that the apparent difficulty of answering these questions stems from (1) the size of the set and (2) the size of the integers that belong to . Can you think of circumstances in which it is difficult to answer whether is a member of even when it is known that contains exactly one element?  "
},
{
  "id": "s_background_intro-8",
  "level": "2",
  "url": "s_background_intro.html#s_background_intro-8",
  "type": "Example",
  "number": "B.2",
  "title": "",
  "body": " Let denote the set of primes. Then since . Also, . Now consider the number Does belong to ? Alice says yes while Bob says no. How could Alice justify her affirmative answer? How could Bob justify his negative stance? In this specific case, I know that Alice is right. Can you explain why?  "
},
{
  "id": "s_background_int-union",
  "level": "1",
  "url": "s_background_int-union.html",
  "type": "Section",
  "number": "B.2",
  "title": "Intersections and Unions",
  "body": " Intersections and Unions   When and are sets, the intersection intersection of and , denoted intersection of and , is defined by Note that this notation uses the convention followed by many programming languages. Namely, the comma in the definition means that both requirements for membership be satisfied. For example, if and , then .    The Meaning of -Letter Words  In the not too distant past, there was considerable discussion in the popular press on the meaning of the -letter word is . For mathematicians and computer scientists, it would have been far more significant to have a discussion of the -letter word or . The problem is that the English language uses or in two fundamentally different ways. Consider the following sentences:  A nearby restaurant has a dinner special featuring two choices for dessert: flan de casa or tirami-su.  A state university accepts all students who have graduated from in-state high schools and have SAT scores above  or have grade point averages above .  A local newspaper offers customers the option of paying their for their newspaper bills on a monthly or semi-annual basis.    In the first and third statement, it is clear that there are two options but that only one of them is allowed. However, in the second statement, the interpretation is that admission will be granted to students who satisfy at least one of the two requirements. These interpretations are called respectively the exclusive and inclusive versions of or . or exclusive  or inclusive In this class, we will assume that whenever the word or is used, the inclusive interpretation is intended unless otherwise stated.  For example, when and are sets, the union union of and , denoted , union of and is defined by For example, if and , then   Note that and are commutative and associative binary operations, as is the case with addition and multiplication for the set of positive integers, , if , and are sets, then Also, Also, note that each of and distributes over the other, , On the other hand, in , multiplication distributes over addition but not vice-versa.    The Empty Set: Much To Do About Nothing  The empty set set empty , denoted empty set is the set for which for every element . Note that and , for every set .  The empty set is unique in the sense that if for every element , then .    The First So Many Positive Integers  In this text, we will use the symbols , , and to denote respectively the set of positive integers, the set of all integers (positive, negative and zero), the set of rational numbers (fractions) and the set of real numbers (rationals and irrationals). On occasion, we will discuss the set of non-negative integers . When is a positive integer, we will use the abbreviation for the set of the first positive integers. For example, . For reasons that may not be clear at the moment but hopefully will be transparent at the right moment, we use the notation to denote the -element set . Of course, is just the set of the first non-negative integers. For example, . set of positive integers  set of integers  set of rational numbers  set of real numbers  set of non-negative integers      Subsets, Proper Subsets and Equal Sets  When and are sets, we say is a subset subset of and write  is a subset of when for every . When is a subset of and there exists at least one element with , we say is a proper subset subset proper of and write is a proper subset of . For example, the of primes is a proper subset of the set of positive integers.  Surprisingly often, we will encounter a situation where sets and have different rules for membership yet both are in fact the same set. For example, let and . Then . For this reason, it is useful to have a test when sets are equal. If and are sets, then    "
},
{
  "id": "s_background_int-union-2-1",
  "level": "2",
  "url": "s_background_int-union.html#s_background_int-union-2-1",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "intersection "
},
{
  "id": "s_background_int-union-3-3",
  "level": "2",
  "url": "s_background_int-union.html#s_background_int-union-3-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "exclusive inclusive or "
},
{
  "id": "s_background_int-union-3-4",
  "level": "2",
  "url": "s_background_int-union.html#s_background_int-union-3-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "union "
},
{
  "id": "s_background_int-union-3-5",
  "level": "2",
  "url": "s_background_int-union.html#s_background_int-union-3-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "commutative associative "
},
{
  "id": "s_background_int-union-4-2",
  "level": "2",
  "url": "s_background_int-union.html#s_background_int-union-4-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "empty set "
},
{
  "id": "s_background_int-union-5-2",
  "level": "2",
  "url": "s_background_int-union.html#s_background_int-union-5-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "non-negative integers "
},
{
  "id": "s_background_int-union-6-2",
  "level": "2",
  "url": "s_background_int-union.html#s_background_int-union-6-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "subset proper subset "
},
{
  "id": "s_background_products",
  "level": "1",
  "url": "s_background_products.html",
  "type": "Section",
  "number": "B.3",
  "title": "Cartesian Products",
  "body": " Cartesian Products  When and are sets, the cartesian product cartesian product of and , denoted cartesian product of and , is defined by For example, if and , then Elements of are called ordered pairs ordered pairs . When is an ordered pair, the element is referred to as the first coordinate of while is the second coordinate of . Note that if either or is the empty set, then .   Let and . Is a member of ?   Cartesian products can be defined for more than two factors. When is a positive integer and are non-empty sets, their cartesian product is defined by   "
},
{
  "id": "s_background_products-2",
  "level": "2",
  "url": "s_background_products.html#s_background_products-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "cartesian product ordered pairs first coordinate second coordinate "
},
{
  "id": "s_background_products-3",
  "level": "2",
  "url": "s_background_products.html#s_background_products-3",
  "type": "Example",
  "number": "B.3",
  "title": "",
  "body": " Let and . Is a member of ?  "
},
{
  "id": "s_background_products-4",
  "level": "2",
  "url": "s_background_products.html#s_background_products-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "cartesian product "
},
{
  "id": "s_background_relations",
  "level": "1",
  "url": "s_background_relations.html",
  "type": "Section",
  "number": "B.4",
  "title": "Binary Relations and Functions",
  "body": " Binary Relations and Functions  A subset is called a binary relation relation binary on , and a binary relation on is called a function from to function when for every , there is exactly one element for which .  Many authors prefer to write the condition for being a function in two parts:   For every , there is some element for which .    For every , there is at most one element for which .     The second condition is often stated in the following alternative form: If , and , then .   For example, let and . Then let Of these relations, only is a function from to .   In many settings (like calculus), it is customary to use letters like , and to denote functions. So let be a function from a set to a set . In view of the defining properties of functions, for each , there is a unique element with . And in this case, the convention is to write . For example, if is the function in , then and .  The shorthand notation is used to indicate that is a function from the set to the set . is a function from to   In calculus, we study functions defined by algebraic rules. For example, consider the function whose rule is . This short hand notation means that and that In combinatorics, we sometimes study functions defined algebraically, just like in calculus, but we will frequently describe functions by other kinds of rules. For example, let be defined by if is even and when is odd.  A function is called an injection  injection from to when for every , there is at most one element with .  When the meaning of and is clear, we just say is an injection . An injection is also called a function (read this as one to one ) and this is sometimes denoted as . is an injection from to  function one-to-one   A function is called a surjection surjection from to when for every , there is at least one with .  Again, when the meaning of and is clear, we just say is a surjection . A surjection is also called an onto function function onto and this is sometimes denoted as . is a surjection from to   A function from to which is both an injection and a surjection is called a bijection bijection . Alternatively, a bijection is referred to as a , onto function, and this is sometimes denoted as is a bijection from to . A bijection is also called a -correspondence .   Let . Then let , and be the functions defined by  .  .  .  Then is a bijection; is a surjection but not an injection ( Why ?); and is neither an injection nor a surjection ( Why ?).     Let and be sets. Then there is a bijection from to if and only if there is a bijection from to .    "
},
{
  "id": "s_background_relations-2",
  "level": "2",
  "url": "s_background_relations.html#s_background_relations-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "binary relation function from to "
},
{
  "id": "exa_function",
  "level": "2",
  "url": "s_background_relations.html#exa_function",
  "type": "Example",
  "number": "B.4",
  "title": "",
  "body": " For example, let and . Then let Of these relations, only is a function from to .  "
},
{
  "id": "s_background_relations-9",
  "level": "2",
  "url": "s_background_relations.html#s_background_relations-9",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "injection "
},
{
  "id": "s_background_relations-10",
  "level": "2",
  "url": "s_background_relations.html#s_background_relations-10",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "injection "
},
{
  "id": "s_background_relations-11",
  "level": "2",
  "url": "s_background_relations.html#s_background_relations-11",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "surjection "
},
{
  "id": "s_background_relations-12",
  "level": "2",
  "url": "s_background_relations.html#s_background_relations-12",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "surjection onto function "
},
{
  "id": "s_background_relations-13",
  "level": "2",
  "url": "s_background_relations.html#s_background_relations-13",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "bijection -correspondence "
},
{
  "id": "s_background_relations-14",
  "level": "2",
  "url": "s_background_relations.html#s_background_relations-14",
  "type": "Example",
  "number": "B.5",
  "title": "",
  "body": " Let . Then let , and be the functions defined by  .  .  .  Then is a bijection; is a surjection but not an injection ( Why ?); and is neither an injection nor a surjection ( Why ?).  "
},
{
  "id": "s_background_relations-15",
  "level": "2",
  "url": "s_background_relations.html#s_background_relations-15",
  "type": "Proposition",
  "number": "B.6",
  "title": "",
  "body": "  Let and be sets. Then there is a bijection from to if and only if there is a bijection from to .   "
},
{
  "id": "s_background_finite-sets",
  "level": "1",
  "url": "s_background_finite-sets.html",
  "type": "Section",
  "number": "B.5",
  "title": "Finite Sets",
  "body": " Finite Sets  A set is said to be finite set finite when either (1) ; or (2) there exists positive integer and a bijection . When is not finite, it is called infinite set infinite . For example, is a finite set as is . On the other hand, is infinite. Of course, and are finite sets for every .    If be a non-empty finite set, then there is a unique positive integer for which there is a bijection .    In some cases, it may take some effort to determine whether a set is finite or infinite. Here is a truly classic result.    The set of primes is infinite.    Suppose that the set of primes is finite. It is non-empty since . Let be the unique positive integer for which there exists a bijection . Then let Then is not divisible by any of the primes in but is larger than any element of . Thus, either is prime or there is a prime that does not belong to . The contradiction completes the proof.    Here's a famous example of a set where no one knows if the set is finite or not.    It is conjectured that the following set is infinite:     This conjecture is known as the Twin Primes Conjecture . Guaranteed for any student who can settle it!    Let and be finite sets. If there exists an injection and an injection , then there exists a bijection .    When is a finite non-empty set, the cardinality cardinality of , denoted  cardinality of set is the unique positive integer for which there is a bijection . Intuitively, is the number of elements in . For example, By convention, the cardinality of the empty set is taken to be zero, and we write .    If and are finite non-empty sets, then .    We note that the statement in is an example of operator overloading , a technique featured in several programming languages. Specifically, the times sign is used twice but has different meanings. As part of , it denotes the cartesian product, while as part of , it means ordinary multiplication of positive integers. Programming languages can keep track of the data types of variables and apply the correct interpretation of an operator like depending on the variables to which it is applied.  We also have the following general form of :       There is a bijection between any two of the following infinite sets , and .  There is an injection from to .  There is no surjection from to .      "
},
{
  "id": "s_background_finite-sets-2",
  "level": "2",
  "url": "s_background_finite-sets.html#s_background_finite-sets-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "finite infinite "
},
{
  "id": "s_background_finite-sets-3",
  "level": "2",
  "url": "s_background_finite-sets.html#s_background_finite-sets-3",
  "type": "Proposition",
  "number": "B.7",
  "title": "",
  "body": "  If be a non-empty finite set, then there is a unique positive integer for which there is a bijection .   "
},
{
  "id": "s_background_finite-sets-5",
  "level": "2",
  "url": "s_background_finite-sets.html#s_background_finite-sets-5",
  "type": "Proposition",
  "number": "B.8",
  "title": "",
  "body": "  The set of primes is infinite.    Suppose that the set of primes is finite. It is non-empty since . Let be the unique positive integer for which there exists a bijection . Then let Then is not divisible by any of the primes in but is larger than any element of . Thus, either is prime or there is a prime that does not belong to . The contradiction completes the proof.   "
},
{
  "id": "s_background_finite-sets-7",
  "level": "2",
  "url": "s_background_finite-sets.html#s_background_finite-sets-7",
  "type": "Conjecture",
  "number": "B.9",
  "title": "",
  "body": "  It is conjectured that the following set is infinite:    "
},
{
  "id": "exe_sb",
  "level": "2",
  "url": "s_background_finite-sets.html#exe_sb",
  "type": "Proposition",
  "number": "B.10",
  "title": "",
  "body": "  Let and be finite sets. If there exists an injection and an injection , then there exists a bijection .   "
},
{
  "id": "s_background_finite-sets-10",
  "level": "2",
  "url": "s_background_finite-sets.html#s_background_finite-sets-10",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "cardinality "
},
{
  "id": "prop_xy",
  "level": "2",
  "url": "s_background_finite-sets.html#prop_xy",
  "type": "Proposition",
  "number": "B.11",
  "title": "",
  "body": "  If and are finite non-empty sets, then .   "
},
{
  "id": "s_background_finite-sets-14",
  "level": "2",
  "url": "s_background_finite-sets.html#s_background_finite-sets-14",
  "type": "Theorem",
  "number": "B.12",
  "title": "",
  "body": "    There is a bijection between any two of the following infinite sets , and .  There is an injection from to .  There is no surjection from to .     "
},
{
  "id": "s_background_notation",
  "level": "1",
  "url": "s_background_notation.html",
  "type": "Section",
  "number": "B.6",
  "title": "Notation from Set Theory and Logic",
  "body": " Notation from Set Theory and Logic  In set theory, it is common to deal with statements involving one or more elements from the universe as variables. Here are some examples:  For , .  For , .  For , is even.  For , .  For , is even.  For , is even.  For and , is irrational.    These statements may be true for some values of the variables and false for others. The fourth and fifth statements are true for all values of the variables, while the sixth is false for all values.  Implications are frequently abbreviated using with a double arrow ; the quantifier means for all (or for every ); and the quantifier means there exists (or there is ). Some writers use and for logical and and or , respectively. For example, The double arrow is used to denote logical equivalence of statements (also if and only if ). For example We will use these notational shortcuts except for the use of and , as we will use these two symbols in another context: binary operators in lattices.  "
},
{
  "id": "s_background_formal-num-sys",
  "level": "1",
  "url": "s_background_formal-num-sys.html",
  "type": "Section",
  "number": "B.7",
  "title": "Formal Development of Number Systems",
  "body": " Formal Development of Number Systems   Up to this point, we have been discussing number systems in an entirely informal manner, assuming everyone knew all that needed to be known. Now let's pause and put things on a more firm foundation. So for the time being, do a memory dump and forget everything you have ever learned about numbers and arithmetic. The set of natural numbers has just been delivered on our door step in a big box with a warning label saying Assembly Required. We open the box and find a single piece of paper on which the following instructions are printed. These defining properties of the natural numbers are known as the Peano Postulates Peano postulates .  There is a non-empty set of elements called natural numbers natural numbers . There is natural number called zero which is denoted . The set of all natural numbers is denoted  There is a one-to-one function called the successor function . For each , is called the successor successor of .  There is no natural number for which .  Let . Then if and only if  ; and  .       Property in the list of Peano Postulates is called the Principle of Mathematical Induction , or just the Principle of Induction induction principle of mathematical . As a first application of the Principle of Induction, we prove the following basic property of the natural numbers.    Let be a natural number with . Then there is a natural number so that .    Let . Then set . We show that . First, note that . Next, we will show that for all , if , then . However, this is trivial since for all , we have . We conclude that .      Addition as a Binary Operation  A binary operation operation binary  on set is just a function . So the image of the ordered pair would normally be denoted . However, this is usually abbreviated as or even more compactly as . With this convention, we now define a binary operation on the set of natural numbers. This operation is defined as follows for every natural number :  .  For all , .    We pause to make it clear why the preceding two statements define . Let be an arbitrary natural number. Then let denote the set of all natural numbers for which is defined. Note that by part (i). Also note that for all , whenever by part (ii). This shows that . Since was arbitrary, this allows us to conclude that is defined for all .  We read as  plus  . The operation is also called addition . addition formal definition of   Among the natural numbers, the successor of zero plays a very important role, so important that it deserves its own special symbol. Here we follow tradition and call the natural number  one and denote it by . Note that for every natural number , we have . In particular, .  With this notation, the Principle of Induction can be restated in the following form.   Principle of Induction   Let . Then if and only if  ; and  .       Associative Property of Addition    , for all .    Let . Then let denote the set of all natural numbers for which . We show that .  Note that which shows that .  Now assume that , , . Then Notice here that the first, second, and fourth equalities follow from the second part of the definition of addition while the third uses our inductive assumption that . This shows that . Therefore, . Since and were arbitrary elements of , the theorem follows.    In proofs to follow, we will trim out some of the wording and leave only the essential mathematical steps intact. In particular, we will (i) omit reference to the set , and (ii) drop the phrase For all For example, to define addition, we will just write (i) , and (ii) .     , for all .    Fix . Then Now assume that . Then     We next prove the commutative property, a task that takes two steps. First, we prove the following special case.     , for all .    The statement is trivially true when . Now suppose that for some . Then      Commutative Law of Addition    for all .    Let . Then from the preceding lemma. Assume . Then       If and , then .    Suppose that either of and is not zero. Since addition is commutative, we may assume without loss of generality that . Then there exists a natural number so that . This implies that , which is impossible since is not the successor of any natural number.     Cancellation Law of Addition   If and , then .    Let . Suppose that . Then . Now suppose that whenever . If , then Since is an injection, this implies . Thus .     "
},
{
  "id": "s_background_formal-num-sys-2-1",
  "level": "2",
  "url": "s_background_formal-num-sys.html#s_background_formal-num-sys-2-1",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Peano Postulates natural numbers zero successor function successor "
},
{
  "id": "s_background_formal-num-sys-2-2",
  "level": "2",
  "url": "s_background_formal-num-sys.html#s_background_formal-num-sys-2-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "Principle of Mathematical Induction Principle of Induction "
},
{
  "id": "s_background_formal-num-sys-2-3",
  "level": "2",
  "url": "s_background_formal-num-sys.html#s_background_formal-num-sys-2-3",
  "type": "Proposition",
  "number": "B.13",
  "title": "",
  "body": "  Let be a natural number with . Then there is a natural number so that .    Let . Then set . We show that . First, note that . Next, we will show that for all , if , then . However, this is trivial since for all , we have . We conclude that .   "
},
{
  "id": "s_background_add-2",
  "level": "2",
  "url": "s_background_formal-num-sys.html#s_background_add-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "binary operation "
},
{
  "id": "s_background_add-4",
  "level": "2",
  "url": "s_background_formal-num-sys.html#s_background_add-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "plus addition "
},
{
  "id": "s_background_add-5",
  "level": "2",
  "url": "s_background_formal-num-sys.html#s_background_add-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "one "
},
{
  "id": "s_background_add-7",
  "level": "2",
  "url": "s_background_formal-num-sys.html#s_background_add-7",
  "type": "Principle",
  "number": "B.14",
  "title": "Principle of Induction.",
  "body": " Principle of Induction   Let . Then if and only if  ; and  .     "
},
{
  "id": "s_background_add-8",
  "level": "2",
  "url": "s_background_formal-num-sys.html#s_background_add-8",
  "type": "Theorem",
  "number": "B.15",
  "title": "Associative Property of Addition.",
  "body": " Associative Property of Addition    , for all .    Let . Then let denote the set of all natural numbers for which . We show that .  Note that which shows that .  Now assume that , , . Then Notice here that the first, second, and fourth equalities follow from the second part of the definition of addition while the third uses our inductive assumption that . This shows that . Therefore, . Since and were arbitrary elements of , the theorem follows.   "
},
{
  "id": "s_background_add-10",
  "level": "2",
  "url": "s_background_formal-num-sys.html#s_background_add-10",
  "type": "Lemma",
  "number": "B.16",
  "title": "",
  "body": "   , for all .    Fix . Then Now assume that . Then    "
},
{
  "id": "s_background_add-12",
  "level": "2",
  "url": "s_background_formal-num-sys.html#s_background_add-12",
  "type": "Lemma",
  "number": "B.17",
  "title": "",
  "body": "   , for all .    The statement is trivially true when . Now suppose that for some . Then    "
},
{
  "id": "s_background_add-13",
  "level": "2",
  "url": "s_background_formal-num-sys.html#s_background_add-13",
  "type": "Theorem",
  "number": "B.18",
  "title": "Commutative Law of Addition.",
  "body": " Commutative Law of Addition    for all .    Let . Then from the preceding lemma. Assume . Then    "
},
{
  "id": "lem_sum0",
  "level": "2",
  "url": "s_background_formal-num-sys.html#lem_sum0",
  "type": "Lemma",
  "number": "B.19",
  "title": "",
  "body": "  If and , then .    Suppose that either of and is not zero. Since addition is commutative, we may assume without loss of generality that . Then there exists a natural number so that . This implies that , which is impossible since is not the successor of any natural number.   "
},
{
  "id": "s_background_add-15",
  "level": "2",
  "url": "s_background_formal-num-sys.html#s_background_add-15",
  "type": "Theorem",
  "number": "B.20",
  "title": "Cancellation Law of Addition.",
  "body": " Cancellation Law of Addition   If and , then .    Let . Suppose that . Then . Now suppose that whenever . If , then Since is an injection, this implies . Thus .   "
},
{
  "id": "s_background_mult",
  "level": "1",
  "url": "s_background_mult.html",
  "type": "Section",
  "number": "B.8",
  "title": "Multiplication as a Binary Operation",
  "body": " Multiplication as a Binary Operation  We define a binary operation , called multiplication , on the set of natural numbers. When and are natural numbers, is also called the product of and , and it sometimes denoted and even more compactly as . We will use this last convention in the material to follow. Let . We define  , and  .    Note that and . Also, note that . More generally, from (ii) and , we conclude that if , then .   Left Distributive Law    , for all .    Let . Then Now assume . Then      Right Distributive Law    , for all .    Let . Then Now assume . Then      Associative Law of Multiplication    , for all .    Let . Then Now assume that . Then     The commutative law requires some preliminary work.     , for all .    The lemma holds trivially when . Assume . Then        , for every .     . Assume . Then      Commutative Law of Multiplication    , for all .    Let . Then . Assume . Then     "
},
{
  "id": "s_background_mult-2",
  "level": "2",
  "url": "s_background_mult.html#s_background_mult-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "multiplication product "
},
{
  "id": "s_background_mult-4",
  "level": "2",
  "url": "s_background_mult.html#s_background_mult-4",
  "type": "Theorem",
  "number": "B.21",
  "title": "Left Distributive Law.",
  "body": " Left Distributive Law    , for all .    Let . Then Now assume . Then    "
},
{
  "id": "s_background_mult-5",
  "level": "2",
  "url": "s_background_mult.html#s_background_mult-5",
  "type": "Theorem",
  "number": "B.22",
  "title": "Right Distributive Law.",
  "body": " Right Distributive Law    , for all .    Let . Then Now assume . Then    "
},
{
  "id": "s_background_mult-6",
  "level": "2",
  "url": "s_background_mult.html#s_background_mult-6",
  "type": "Theorem",
  "number": "B.23",
  "title": "Associative Law of Multiplication.",
  "body": " Associative Law of Multiplication    , for all .    Let . Then Now assume that . Then    "
},
{
  "id": "s_background_mult-8",
  "level": "2",
  "url": "s_background_mult.html#s_background_mult-8",
  "type": "Lemma",
  "number": "B.24",
  "title": "",
  "body": "   , for all .    The lemma holds trivially when . Assume . Then    "
},
{
  "id": "s_background_mult-9",
  "level": "2",
  "url": "s_background_mult.html#s_background_mult-9",
  "type": "Lemma",
  "number": "B.25",
  "title": "",
  "body": "   , for every .     . Assume . Then    "
},
{
  "id": "s_background_mult-10",
  "level": "2",
  "url": "s_background_mult.html#s_background_mult-10",
  "type": "Theorem",
  "number": "B.26",
  "title": "Commutative Law of Multiplication.",
  "body": " Commutative Law of Multiplication    , for all .    Let . Then . Assume . Then    "
},
{
  "id": "s_background_exp",
  "level": "1",
  "url": "s_background_exp.html",
  "type": "Section",
  "number": "B.9",
  "title": "Exponentiation",
  "body": " Exponentiation  We now define a binary operation called exponentiation which is defined only on those ordered pairs of natural numbers where not both are zero. The notation for exponentiation is non-standard. In books, it is written while the notations , and are used in-line. We will use the notation for the most part.  When , we set for all with . Now let . We define by (i) and (ii) .    For all with , .    Let with . Then . Now suppose that . Then       For all with , .    Let with . Then . Now suppose that . Then     "
},
{
  "id": "s_background_exp-2",
  "level": "2",
  "url": "s_background_exp.html#s_background_exp-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "exponentiation "
},
{
  "id": "s_background_exp-4",
  "level": "2",
  "url": "s_background_exp.html#s_background_exp-4",
  "type": "Theorem",
  "number": "B.27",
  "title": "",
  "body": "  For all with , .    Let with . Then . Now suppose that . Then    "
},
{
  "id": "s_background_exp-5",
  "level": "2",
  "url": "s_background_exp.html#s_background_exp-5",
  "type": "Theorem",
  "number": "B.28",
  "title": "",
  "body": "  For all with , .    Let with . Then . Now suppose that . Then    "
},
{
  "id": "s_background_order",
  "level": "1",
  "url": "s_background_order.html",
  "type": "Section",
  "number": "B.10",
  "title": "Partial Orders and Total Orders",
  "body": " Partial Orders and Total Orders  A binary relation on a set is just a subset of the cartesian product . In discussions of binary relations, the notation is sometimes written as .  A binary relation relation binary  is:  reflexive if for all . reflexive  antisymmetric if whenever and , for all . antisymmetric  transitive if and imply , for all . transitive    A binary relation on a set is called a partial order order partial on when it is reflexive, antisymmetric, and transitive. Traditionally, symbols like and are used to denote partial orders. As an example, recall that if is a family of sets, we write when is a subset of .  When using the ordered pair notation for binary relations, to indicate that a pair is not in the relation, we simply write . When using the alternate notation, this is usually denoted by using the negation symbol from logic and writing . Most of the special symbols used to denote partial orders come with negative versions, , , .  A partial order is called a total order order total on when for all , or . For example, if then is a total order on .  When is a partial order on a set , we write when and .  "
},
{
  "id": "s_background_order-3",
  "level": "2",
  "url": "s_background_order.html#s_background_order-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "reflexive antisymmetric transitive "
},
{
  "id": "s_background_order-4",
  "level": "2",
  "url": "s_background_order.html#s_background_order-4",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "partial order "
},
{
  "id": "s_background_order-6",
  "level": "2",
  "url": "s_background_order.html#s_background_order-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "total order "
},
{
  "id": "s_background_total-order-N",
  "level": "1",
  "url": "s_background_total-order-N.html",
  "type": "Section",
  "number": "B.11",
  "title": "A Total Order on Natural Numbers",
  "body": " A Total Order on Natural Numbers  order total on natural numbers  Let . Define a binary relation on by setting if and only if there exists a natural number so that .     is a total order on .    is reflexive since and therefore , for all . Next, we show that is antisymmetric. Let and suppose that and . Then there exist natural numbers and so that and . It follows that Therefore , which implies that . Thus .  Next, we show that is transitive. Suppose that , and . Then there exist natural numbers and so that and . Then Thus , and we have now shown that is a partial order on .  Finally, we show that is a total order. To accomplish this, we choose an arbitrary element and show that for every , either or . We do this by induction on . Suppose first that . Since , we conclude that . Now suppose that for some , we have . Then there is a natural number so that . Then , so .  On the other hand, suppose that for some , we have . If , then and as above. Now suppose that and . Since , there exists a natural number so that . Since , we know . Therefore, there is a natural number so that . Then which shows that .    Note that if , then if and only if there exists a natural number so that .   Monotonic Law for Addition   Let . If , then . Furthermore, if , then .    It suffices to prove that if with , then for every . Let be the natural number so that . Now let . Then , so .      If , and , then .    Assume to the contrary, that , , and . Let . Then which requires . This is a contradiction.     Monotonic Law for Multiplication   Let . If , then . Furthermore, if and , then .    Only the last statement requires proof. Let with . Then for some . Then . Since , we conclude .     Cancellation Law of Multiplication   If , , and , then .    If , then , and if , then . We conclude that .    "
},
{
  "id": "s_background_total-order-N-4",
  "level": "2",
  "url": "s_background_total-order-N.html#s_background_total-order-N-4",
  "type": "Proposition",
  "number": "B.29",
  "title": "",
  "body": "   is a total order on .    is reflexive since and therefore , for all . Next, we show that is antisymmetric. Let and suppose that and . Then there exist natural numbers and so that and . It follows that Therefore , which implies that . Thus .  Next, we show that is transitive. Suppose that , and . Then there exist natural numbers and so that and . Then Thus , and we have now shown that is a partial order on .  Finally, we show that is a total order. To accomplish this, we choose an arbitrary element and show that for every , either or . We do this by induction on . Suppose first that . Since , we conclude that . Now suppose that for some , we have . Then there is a natural number so that . Then , so .  On the other hand, suppose that for some , we have . If , then and as above. Now suppose that and . Since , there exists a natural number so that . Since , we know . Therefore, there is a natural number so that . Then which shows that .   "
},
{
  "id": "s_background_total-order-N-6",
  "level": "2",
  "url": "s_background_total-order-N.html#s_background_total-order-N-6",
  "type": "Theorem",
  "number": "B.30",
  "title": "Monotonic Law for Addition.",
  "body": " Monotonic Law for Addition   Let . If , then . Furthermore, if , then .    It suffices to prove that if with , then for every . Let be the natural number so that . Now let . Then , so .   "
},
{
  "id": "s_background_total-order-N-7",
  "level": "2",
  "url": "s_background_total-order-N.html#s_background_total-order-N-7",
  "type": "Lemma",
  "number": "B.31",
  "title": "",
  "body": "  If , and , then .    Assume to the contrary, that , , and . Let . Then which requires . This is a contradiction.   "
},
{
  "id": "s_background_total-order-N-8",
  "level": "2",
  "url": "s_background_total-order-N.html#s_background_total-order-N-8",
  "type": "Theorem",
  "number": "B.32",
  "title": "Monotonic Law for Multiplication.",
  "body": " Monotonic Law for Multiplication   Let . If , then . Furthermore, if and , then .    Only the last statement requires proof. Let with . Then for some . Then . Since , we conclude .   "
},
{
  "id": "s_background_total-order-N-9",
  "level": "2",
  "url": "s_background_total-order-N.html#s_background_total-order-N-9",
  "type": "Corollary",
  "number": "B.33",
  "title": "Cancellation Law of Multiplication.",
  "body": " Cancellation Law of Multiplication   If , , and , then .    If , then , and if , then . We conclude that .   "
},
{
  "id": "s_background_decimal",
  "level": "1",
  "url": "s_background_decimal.html",
  "type": "Section",
  "number": "B.12",
  "title": "Notation for Natural Numbers",
  "body": " Notation for Natural Numbers   In some sense, we already have a workable notation for natural numbers. In fact, we really didn't need a special symbol for . The natural number and the sucessor function are enough. For example, the positive integer associated with the number of fingers (including the thumb) on one hand is , our net worth is , and the age of Professor Trotter's son in years when this section was first written was Admittedly, this is not very practical, especially if some day we win the lottery or want to discuss the federal deficit. So it is natural (ugh!) to consider alternative notations.  Here is one such scheme. First, let's decide on a natural as base . We will then develop a notation which is called the base notation . We already have a special symbol for zero, namely , but we need additional symbols for each natural number with . These symbols are called digits . For example, the positive integer is called eight , and it makes a popular choice as a base. Here are the symbols (digits) customarily chosen for this base: , ; ; ; ; ; and . Technically speaking, it is not necessary to have a separate symbol for , but it might be handy regardless. In this case, most people prefer the symbol . We like this symbol, unless and until it gets lazy and lays down sideways.  So the first natural numbers are then , , , , , , and . To continue with our representation, we want to use the following basic theorem.    Let with . Then there exist unique natural numbers and so that and .    Let with . We first show that for each , there exists so that and . If , we can take and . Now suppose that and for some .  Note that implies . If , then . On the other hand, if , then .  Now that existence has been settled, we note that the uniqueness of and follow immediately from the cancellation properties.    Now suppose that for some , with , we have defined a base eight notation for the representation of , for all with , and that in each case, this representation consists of a string of digits, written left to right, and selected from . Write where . Note that , so that we already have a representation for . To obtain a representation of , we simply append at the (right) end.  For example, consider the age of Professor Trotter's son. It is then written as 22. And to emphasize the base eight notation, most people would say , base and write .  Among the more popular bases are base 2, where only the digits 0 and 1 are used, and base sixteen, where sixteen is the popular word for . Here the digit symbols are Another popular choice, in fact the one in most widespread use in banks, shopping centers and movie theatres, is base ten . Ten is the natural number A, base sixteen. Also, ten is . Most folks use the digits for base ten notation. And when no other designation is made, then it is assumed that the natural number is written base ten. So of course, Professor Trotter's son is 18 and is a freshman at Georgia Tech. Which explains why his hair is as white as it is.  For any base , caution must be exercised when discussing multiplication, since writing the product in the abbreviated form causes us some grief. For example, if , then writing the product as is ambiguous. For this reason, when using base notation, the product symbol (or some variation of ) is always used.    Alternate Versions of Induction  Many authors prefer to start the development of number systems with the set of positive integers integers positive and defer the introduction of the concept of zero. In this setting, you have a non-empty set , a one-to-one successor function and a positive integer called one and denoted that is not the successor of any positive integer. The Principle of Induction then becomes: If , then if and only if  ; and  .    More generally, to show that a set contains all integers greater than or equal to an integer , it is sufficient to show that (i) , and (ii) For all .  Here is another version of induction, one that is particularly useful in combinatorial arguments.    Let . If , then there is a unique least positive integer that does not belong to .     "
},
{
  "id": "s_background_decimal-2-2",
  "level": "2",
  "url": "s_background_decimal.html#s_background_decimal-2-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "base base notation digits eight "
},
{
  "id": "s_background_decimal-2-4",
  "level": "2",
  "url": "s_background_decimal.html#s_background_decimal-2-4",
  "type": "Theorem",
  "number": "B.34",
  "title": "",
  "body": "  Let with . Then there exist unique natural numbers and so that and .    Let with . We first show that for each , there exists so that and . If , we can take and . Now suppose that and for some .  Note that implies . If , then . On the other hand, if , then .  Now that existence has been settled, we note that the uniqueness of and follow immediately from the cancellation properties.   "
},
{
  "id": "s_background_decimal-2-7",
  "level": "2",
  "url": "s_background_decimal.html#s_background_decimal-2-7",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "ten "
},
{
  "id": "s_background_decimal-3-2",
  "level": "2",
  "url": "s_background_decimal.html#s_background_decimal-3-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "positive integers successor one "
},
{
  "id": "s_background_decimal-3-5",
  "level": "2",
  "url": "s_background_decimal.html#s_background_decimal-3-5",
  "type": "Theorem",
  "number": "B.35",
  "title": "",
  "body": "  Let . If , then there is a unique least positive integer that does not belong to .   "
},
{
  "id": "s_background_equivalence",
  "level": "1",
  "url": "s_background_equivalence.html",
  "type": "Section",
  "number": "B.13",
  "title": "Equivalence Relations",
  "body": " Equivalence Relations  A binary relation is symmetric symmetric if implies for all .  A binary relation on a set is called an equivalence relation relation equivalence when it is reflexive, symmetric, and transitive. Typically, symbols like, , , and are used to denote equivalence relations. An equivalence relation, say , defines a partition on the set by setting Note that if and , then . The sets in this partition are called equivalence classes equivalence classes .  When using the ordered pair notation for binary relations, to indicate that a pair is not in the relation, we simply write . When using the alternate notation, this is usually denoted by using the negation symbol from logic and writing . Many of the special symbols used to denote equivalence relations come with negative versions: , , ,   "
},
{
  "id": "s_background_equivalence-2",
  "level": "2",
  "url": "s_background_equivalence.html#s_background_equivalence-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "symmetric "
},
{
  "id": "s_background_equivalence-3",
  "level": "2",
  "url": "s_background_equivalence.html#s_background_equivalence-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "equivalence relation equivalence classes "
},
{
  "id": "s_background_integers",
  "level": "1",
  "url": "s_background_integers.html",
  "type": "Section",
  "number": "B.14",
  "title": "The Integers as Equivalence Classes of Ordered Pairs",
  "body": " The Integers as Equivalence Classes of Ordered Pairs  Define a binary relation on the set by      is reflexive.    Let . Then , so .       is symmetric.    Let and suppose that . Then , so that . Thus .       is transitive.    Let . Suppose that Then and . Therefore, It follows that Thus so that .    Now that we know that is an equivalence relation on , we know that partitions into equivalence classes. For an element , we denote the equivalence class of by .  Let denote the set of all equivalence classes of determined by the equivalence relation . The elements of are called integers . integers formal definition of   "
},
{
  "id": "s_background_integers-3",
  "level": "2",
  "url": "s_background_integers.html#s_background_integers-3",
  "type": "Lemma",
  "number": "B.36",
  "title": "",
  "body": "   is reflexive.    Let . Then , so .   "
},
{
  "id": "s_background_integers-4",
  "level": "2",
  "url": "s_background_integers.html#s_background_integers-4",
  "type": "Lemma",
  "number": "B.37",
  "title": "",
  "body": "   is symmetric.    Let and suppose that . Then , so that . Thus .   "
},
{
  "id": "s_background_integers-5",
  "level": "2",
  "url": "s_background_integers.html#s_background_integers-5",
  "type": "Lemma",
  "number": "B.38",
  "title": "",
  "body": "   is transitive.    Let . Suppose that Then and . Therefore, It follows that Thus so that .   "
},
{
  "id": "s_background_integers-7",
  "level": "2",
  "url": "s_background_integers.html#s_background_integers-7",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "integers "
},
{
  "id": "s_background_prop-integers",
  "level": "1",
  "url": "s_background_prop-integers.html",
  "type": "Section",
  "number": "B.15",
  "title": "Properties of the Integers",
  "body": " Properties of the Integers  For the remainder of this chapter, most statements will be given without proof. Students are encouraged to fill in the details.  We define a binary operation on by the following rule: Note that the definition of addition is made in terms of representatives of the class, so we must pause to make sure that is well defined , , independent of the particular representatives.    If and , then .    Since , we know . Since , we know . It follows that . Thus , which implies that .    In what follows, we use a single symbol, like , or to denote an integer, but remember that each integer is in fact an entire equivalence class whose elements are ordered pairs of natural numbers.    For all ,  ;  ; and  implies .      Next, we define a second binary operation called multiplication , and denoted , or just . When and , we define:     Multiplication is well defined. Furthermore,  , for every .  , for every .  , for every .      The integer has a number of special properties. Note that for all , and . So most folks call  zero and denote it by . This is a terrible abuse of notation, since we have already used the word zero and the symbol to denote a particular natural number.  But mathematicians, computer scientists and even real people do this all the time. We use the same word and even the same phrase in many different settings expecting that the listener will make the correct interpretation. For example, how many different meanings do you know for You're so bad ?  If is an integer and , then . The integer is then called the additive inverse of and is denoted . The additive inverse of is also called minus . The basic property is that , for every .  We can now define a new binary operation, called subtraction and denoted , on by setting . In general, subtraction is neither commutative nor associative. However, we do have the following basic properties.    For all ,  ;  ; and  .      Next, we define a total order on by setting in when , and in .   Monotonic Law for Addition   Let . If , then . Furthermore, if , then .    For multiplication, the situation is more complicated.   Monotonic Law for Multiplication   Let . If , then  , if ,  , if , and  , if .      Now consider the function defined by . It is easy to show that is an injection. Furthermore, it respects addition and multiplication, , and . Also, note that if , then if and only if for some . So, it is customary to abuse notation slightly and say that is a subset of . Similarly, we can either consider the set of positive integers as the set of natural numbers that are successors, or as the set of integers that are greater than .  When is a positive integer and is the zero in , we define . When , and , we define inductively by (i) and .    If , , and , then and .    "
},
{
  "id": "s_background_prop-integers-3",
  "level": "2",
  "url": "s_background_prop-integers.html#s_background_prop-integers-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "well defined "
},
{
  "id": "s_background_prop-integers-4",
  "level": "2",
  "url": "s_background_prop-integers.html#s_background_prop-integers-4",
  "type": "Lemma",
  "number": "B.39",
  "title": "",
  "body": "  If and , then .    Since , we know . Since , we know . It follows that . Thus , which implies that .   "
},
{
  "id": "s_background_prop-integers-6",
  "level": "2",
  "url": "s_background_prop-integers.html#s_background_prop-integers-6",
  "type": "Theorem",
  "number": "B.40",
  "title": "",
  "body": "  For all ,  ;  ; and  implies .     "
},
{
  "id": "s_background_prop-integers-7",
  "level": "2",
  "url": "s_background_prop-integers.html#s_background_prop-integers-7",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "multiplication "
},
{
  "id": "s_background_prop-integers-8",
  "level": "2",
  "url": "s_background_prop-integers.html#s_background_prop-integers-8",
  "type": "Theorem",
  "number": "B.41",
  "title": "",
  "body": "  Multiplication is well defined. Furthermore,  , for every .  , for every .  , for every .     "
},
{
  "id": "s_background_prop-integers-9",
  "level": "2",
  "url": "s_background_prop-integers.html#s_background_prop-integers-9",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "zero "
},
{
  "id": "s_background_prop-integers-11",
  "level": "2",
  "url": "s_background_prop-integers.html#s_background_prop-integers-11",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "additive inverse minus "
},
{
  "id": "s_background_prop-integers-12",
  "level": "2",
  "url": "s_background_prop-integers.html#s_background_prop-integers-12",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "subtraction "
},
{
  "id": "s_background_prop-integers-13",
  "level": "2",
  "url": "s_background_prop-integers.html#s_background_prop-integers-13",
  "type": "Theorem",
  "number": "B.42",
  "title": "",
  "body": "  For all ,  ;  ; and  .     "
},
{
  "id": "s_background_prop-integers-15",
  "level": "2",
  "url": "s_background_prop-integers.html#s_background_prop-integers-15",
  "type": "Theorem",
  "number": "B.43",
  "title": "Monotonic Law for Addition.",
  "body": " Monotonic Law for Addition   Let . If , then . Furthermore, if , then .   "
},
{
  "id": "s_background_prop-integers-17",
  "level": "2",
  "url": "s_background_prop-integers.html#s_background_prop-integers-17",
  "type": "Theorem",
  "number": "B.44",
  "title": "Monotonic Law for Multiplication.",
  "body": " Monotonic Law for Multiplication   Let . If , then  , if ,  , if , and  , if .     "
},
{
  "id": "s_background_prop-integers-20",
  "level": "2",
  "url": "s_background_prop-integers.html#s_background_prop-integers-20",
  "type": "Theorem",
  "number": "B.45",
  "title": "",
  "body": "  If , , and , then and .   "
},
{
  "id": "s_background_rationals",
  "level": "1",
  "url": "s_background_rationals.html",
  "type": "Section",
  "number": "B.16",
  "title": "Obtaining the Rationals from the Integers",
  "body": " Obtaining the Rationals from the Integers   We consider the set of all ordered pairs in of the form with . Elements of are called rational numbers rational numbers , or fractions . Define an equivalence relation, denoted , on by setting if and only if . Here we should point out that the symbol can be used (and often is) to denote an equivalence relation. It is not constrained to mean identically the same.   When is a fraction, is called the numerator numerator and is called the denominator denominator of . Remember that the denominator of a fraction is never zero.  Addition of fractions is defined by while multiplication is defined by As was the case with integers, it is important to pause and prove that both operations are well defined.    Let . If and , then and .    Addition and multiplication are both associative and commutative. Also, we have the distributive property.    Let . Then  and .  and .  .      The additive inverse of a fraction is just . Using this, we define subtraction for fractions: .  When is a fraction, and , the fraction is the reciprocal reciprocal of . The reciprocal is also called the multiplicative inverse multiplicative inverse , and the reciprocal of is denoted . When , we can then define division by setting , , . Of course, division by zero is not defined, a fact that you probably already knew!  As was the case for both and , when is a positive integer, and is the zero in , we define . When is a fraction with and is a non-negative integer, we define inductively by (i) and (ii) .    If , , and , then and .    Many folks prefer an alternate notation for fractions in which the numerator is written directly over the denominator with a horizontal line between them, so can also be written as .  Via the map , we again say that the integers are a subset of the rationals. As before, note that , and .  In the third grade, you were probably told that , but by now you are realizing that this is not exactly true. Similarly, if you had told your teacher that and weren't really the same and were only equal in the broader sense of an equivalence relation defined on a subset of the cartesian product of the integers, you probably would have been sent to the Principal's office.  Try to imagine the trouble you would have gotten into had you insisted that the real meaning of was We can also define a total order on . To do this, we assume that have . (If , for example, we would replace it by , which is in the same equivalence class as and has .) Then we set in if in .    Integer Exponents  When is a positive integer and is the zero in , we define . When , and , we define inductively by (i) and . When and , we set .    If , , and , then and .     "
},
{
  "id": "s_background_rationals-2-1",
  "level": "2",
  "url": "s_background_rationals.html#s_background_rationals-2-1",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "rational numbers fractions "
},
{
  "id": "s_background_rationals-2-2",
  "level": "2",
  "url": "s_background_rationals.html#s_background_rationals-2-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "numerator denominator "
},
{
  "id": "s_background_rationals-2-4",
  "level": "2",
  "url": "s_background_rationals.html#s_background_rationals-2-4",
  "type": "Theorem",
  "number": "B.46",
  "title": "",
  "body": "  Let . If and , then and .   "
},
{
  "id": "s_background_rationals-2-6",
  "level": "2",
  "url": "s_background_rationals.html#s_background_rationals-2-6",
  "type": "Theorem",
  "number": "B.47",
  "title": "",
  "body": "  Let . Then  and .  and .  .     "
},
{
  "id": "s_background_rationals-2-8",
  "level": "2",
  "url": "s_background_rationals.html#s_background_rationals-2-8",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "reciprocal multiplicative inverse division "
},
{
  "id": "s_background_rationals-2-10",
  "level": "2",
  "url": "s_background_rationals.html#s_background_rationals-2-10",
  "type": "Theorem",
  "number": "B.48",
  "title": "",
  "body": "  If , , and , then and .   "
},
{
  "id": "s_background_rationals-3-3",
  "level": "2",
  "url": "s_background_rationals.html#s_background_rationals-3-3",
  "type": "Theorem",
  "number": "B.49",
  "title": "",
  "body": "  If , , and , then and .   "
},
{
  "id": "s_background_reals",
  "level": "1",
  "url": "s_background_reals.html",
  "type": "Section",
  "number": "B.17",
  "title": "Obtaining the Reals from the Rationals",
  "body": " Obtaining the Reals from the Rationals  A full discussion of this would take us far away from a discrete math class, but let's at least provide the basic definitions. A subset of the rationals is called a cut cut Dedekind (also, a Dedekind cut ), if it satisfies the following properties:  , i.e, is a proper non-empty subset of .  and in implies , for all .  For every , there exists with , , has no greatest element.    Cuts are also called real numbers real number formal definition of , so a real number is a particular kind of set of rational numbers. For every rational number , the set is a cut. Such cuts are called rational cuts . Inside the reals, the rational cuts behave just like the rational numbers and via the map , we abuse notation again (we are getting used to this) and say that the rational numbers are a subset of the real numbers.  But there are cuts which are not rational. Here is one: . The fact that this cut is not rational depends on the familiar proof that there is no rational for which .  The operation of addition on cuts is defined in the natural way. If and are cuts, set . Order on cuts is defined in terms of inclusion, , if and only if . A cut is positive if it is greater than . When and are positive cuts, the product is defined by One can easily show that there is a real number so that . You may be surprised, but perhaps not, to learn that this real number is denoted .  There are many other wonders to this story, but enough for one day.  "
},
{
  "id": "s_background_reals-2",
  "level": "2",
  "url": "s_background_reals.html#s_background_reals-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "cut Dedekind cut "
},
{
  "id": "s_background_reals-3",
  "level": "2",
  "url": "s_background_reals.html#s_background_reals-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "real numbers rational cuts "
},
{
  "id": "s_background_reals-5",
  "level": "2",
  "url": "s_background_reals.html#s_background_reals-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "positive "
},
{
  "id": "s_background_complex",
  "level": "1",
  "url": "s_background_complex.html",
  "type": "Section",
  "number": "B.18",
  "title": "Obtaining the Complex Numbers from the Reals",
  "body": " Obtaining the Complex Numbers from the Reals   By now, the following discussion should be transparent. The complex number system complex number formal definition of  is just the cartesian product with  in if and only if and in .  .  .    Now the complex numbers of the form behave just like real numbers, so is natural to say that the complex number system contains the real number system. Also, note that , , the complex number has the property that its square is the complex number behaving like the real number . So it is convenient to use a special symbol like for this very special complex number and note that .  With this beginning, it is straightforward to develop all the familiar properties of the complex number system.    Decimal Representation of Real Numbers  Every real number has a decimal expansion although the number of digits after the decimal point may be infinite. A rational number from has an expansion in which a certain block of digits repeats indefinitely. For example, In this case, the block of size is repeated forever.  Certain rational numbers have terminating decimal expansions . For example, we know that . If we chose to do so, we could write this instead as an infinite decimal by appending trailing 's, as a repeating block of size : On the other hand, we can also write the decimal expansion of as Here, we intend that the digit , a block of size , be repeated forever. Apart from this anomaly, the decimal expansion of real numbers is unique.  On the other hand, irrational numbers have non-repeating decimal expansions in which there is no block of repeating digits that repeats forever.  You know that is irrational. Here is the first part of its decimal expansion: An irrational number is said to be algebraic if it is the root of polynomial with integer coefficients; else it is said to be transcendental . For example, is algebraic since it is the root of the polynomial .  Two other famous examples of irrational numbers are and . Here are their decimal expansions: Both and are transcendental.   Amanda and Bilal, both students at a nearby university, have been studying rational numbers that have large blocks of repeating digits in their decimal expansions. Amanda reports that she has found two positive integers and with for which the decimal expansion of the rational number has a block of 1961 digits which repeats indefinitely. Not to be outdone, Bilal brags that he has found such a pair and of positive integers with for which the decimal expansion of has a block of digits which repeats indefinitely. Bilal should be (politely) told to do his arithmetic more carefully, as there is no such pair of positive integers ( Why ?). On the other hand, Amanda may in fact be correct although, if she has done her work with more attention to detail, she would have reported that the decimal expansion of has a smaller block of repeating digits ( Why ?).     There is no surjection from to the set .    Let be a function from to . For each , consider the decimal expansion(s) of the real number . Then choose a positive integer so that (1) , and (2) is not the digit after the decimal point in any decimal expansion of . Then the real number whose decimal expansion is is an element of which is distinct from , for every . This shows that is not a surjection.     "
},
{
  "id": "s_background_complex-2-1",
  "level": "2",
  "url": "s_background_complex.html#s_background_complex-2-1",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "complex number system "
},
{
  "id": "s_background_complex-2-2",
  "level": "2",
  "url": "s_background_complex.html#s_background_complex-2-2",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "contains "
},
{
  "id": "s_background_complex-3-3",
  "level": "2",
  "url": "s_background_complex.html#s_background_complex-3-3",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "terminating decimal expansions "
},
{
  "id": "s_background_complex-3-5",
  "level": "2",
  "url": "s_background_complex.html#s_background_complex-3-5",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "algebraic transcendental "
},
{
  "id": "s_background_complex-3-7",
  "level": "2",
  "url": "s_background_complex.html#s_background_complex-3-7",
  "type": "Example",
  "number": "B.50",
  "title": "",
  "body": " Amanda and Bilal, both students at a nearby university, have been studying rational numbers that have large blocks of repeating digits in their decimal expansions. Amanda reports that she has found two positive integers and with for which the decimal expansion of the rational number has a block of 1961 digits which repeats indefinitely. Not to be outdone, Bilal brags that he has found such a pair and of positive integers with for which the decimal expansion of has a block of digits which repeats indefinitely. Bilal should be (politely) told to do his arithmetic more carefully, as there is no such pair of positive integers ( Why ?). On the other hand, Amanda may in fact be correct although, if she has done her work with more attention to detail, she would have reported that the decimal expansion of has a smaller block of repeating digits ( Why ?).  "
},
{
  "id": "s_background_complex-3-8",
  "level": "2",
  "url": "s_background_complex.html#s_background_complex-3-8",
  "type": "Proposition",
  "number": "B.51",
  "title": "",
  "body": "  There is no surjection from to the set .    Let be a function from to . For each , consider the decimal expansion(s) of the real number . Then choose a positive integer so that (1) , and (2) is not the digit after the decimal point in any decimal expansion of . Then the real number whose decimal expansion is is an element of which is distinct from , for every . This shows that is not a surjection.   "
},
{
  "id": "s_background_ZFC",
  "level": "1",
  "url": "s_background_ZFC.html",
  "type": "Section",
  "number": "B.19",
  "title": "The Zermelo-Fraenkel Axioms of Set Theory",
  "body": " The Zermelo-Fraenkel Axioms of Set Theory  set Zermelo-Fraenkel axioms  In the first part of this appendix, we put number systems on a firm foundation, but in the process, we used an intuitive understanding of sets. Not surprisingly, this approach is fraught with danger. As was first discovered more than 100 years ago, there are major conceptual hurdles in formulating consistent systems of axioms for set theory. And it is very easy to make statements that sound obvious but are not.  Here is one very famous example. Let and be sets and consider the following two statements:  There exists an injection .  There exists a surjection .    If and are finite sets, these statements are equivalent, and it is perhaps natural to surmise that the same is true when and are infinite. But that is not the case.  Here is the system of axioms popularly known as ZFC, which is an abbreviation for Zermelo-Fraenkel plus the Axiom of Choice. In this system, the notion of set and the membership operator are undefined. However, if and are sets, then exactly one of the following statements is true: (i) is true ; (ii) is false . When is false, we write . Also, there is an equivalence relation defined on sets.   Zermelo-Fraenkel Axioms with Axiom of Choice     Axiom of extensionality  Two sets are equal if and only if they have the same elements.    Axiom of empty set  There is a set with no elements.    Axiom of pairing  If and are sets, then there exists a set containing and as its only elements, which we denote by . Note: If , then we write only .    Axiom of union  For any set , there is a set such that the elements of are precisely the elements of the elements of .    Axiom of infinity  There exists a set such that and whenever , so is .    Axiom of power set  Every set has a power set. That is, for any set , there exists a set , such that the elements of are precisely the subsets of .    Axiom of regularity  Every non-empty set contains some element such that and are disjoint sets.    Axiom of separation (or subset axiom)  Given any set and any proposition , there is a subset of the original set containing precisely those elements for which holds.    Axiom of replacement  Given any set and any mapping, formally defined as a proposition where and implies , there is a set containing precisely the images of the original set's elements.    Axiom of choice  Given any set of mutually exclusive non-empty sets, there exists at least one set that contains exactly one element in common with each of the non-empty sets.       A good source of additional (free) information on set theory is the collection of Wikipedia articles. Do a web search and look up the following topics and people:  Zermelo-Fraenkel set theory.  Axiom of Choice.  Peano postulates.  Georg Cantor, Augustus De Morgan, George Boole, Bertrand Russell and Kurt Gödel.    "
},
{
  "id": "s_background_ZFC-6",
  "level": "2",
  "url": "s_background_ZFC.html#s_background_ZFC-6",
  "type": "Paragraph (with a defined term)",
  "number": "",
  "title": "",
  "body": "set "
},
{
  "id": "axiom_ZFC",
  "level": "2",
  "url": "s_background_ZFC.html#axiom_ZFC",
  "type": "Axiom",
  "number": "B.52",
  "title": "Zermelo-Fraenkel Axioms with Axiom of Choice.",
  "body": " Zermelo-Fraenkel Axioms with Axiom of Choice     Axiom of extensionality  Two sets are equal if and only if they have the same elements.    Axiom of empty set  There is a set with no elements.    Axiom of pairing  If and are sets, then there exists a set containing and as its only elements, which we denote by . Note: If , then we write only .    Axiom of union  For any set , there is a set such that the elements of are precisely the elements of the elements of .    Axiom of infinity  There exists a set such that and whenever , so is .    Axiom of power set  Every set has a power set. That is, for any set , there exists a set , such that the elements of are precisely the subsets of .    Axiom of regularity  Every non-empty set contains some element such that and are disjoint sets.    Axiom of separation (or subset axiom)  Given any set and any proposition , there is a subset of the original set containing precisely those elements for which holds.    Axiom of replacement  Given any set and any mapping, formally defined as a proposition where and implies , there is a set containing precisely the images of the original set's elements.    Axiom of choice  Given any set of mutually exclusive non-empty sets, there exists at least one set that contains exactly one element in common with each of the non-empty sets.      "
},
{
  "id": "backmatter-4",
  "level": "1",
  "url": "backmatter-4.html",
  "type": "Appendix",
  "number": "C",
  "title": "List of Notation",
  "body": " List of Notation   "
},
{
  "id": "backmatter-5",
  "level": "1",
  "url": "backmatter-5.html",
  "type": "Index",
  "number": "",
  "title": "Index",
  "body": " Index   "
},
{
  "id": "backmatter-6",
  "level": "1",
  "url": "backmatter-6.html",
  "type": "Colophon",
  "number": "",
  "title": "Colophon",
  "body": " This book was authored in PreTeXt . For the latex version, tex Gyre Pagella was used as the body font with newpxmath used to select the font for mathematical symbols. The latex document class is scrbook from the KOMA-Script package. The HTML version uses the mathbook-4.css color scheme.  "
}
]

var ptx_lunr_idx = lunr(function () {
  this.ref('id')
  this.field('title')
  this.field('body')
  this.metadataWhitelist = ['position']

  ptx_lunr_docs.forEach(function (doc) {
    this.add(doc)
  }, this)
})
