<section xml:id="s_strings_bin-coeff">
    <title>The Ubiquitous Nature of Binomial Coefficients</title>
    <idx><h>binomial coefficient</h></idx>
    <p>In this section, we present several combinatorial problems that can be solved by appeal to binomial coefficients, even though at first glance, they do not appear to have anything to do with sets.
    </p>
    <example>
        <p>The office assistant is distributing supplies. In how many ways can he distribute 18 identical folders among four office employees: Audrey, Bart, Cecilia and Darren, with the additional restriction that each will receive at least one folder?
        </p>

        <p>Imagine the folders placed in a row. Then there are 17 gaps between them. Of these gaps, choose three and place a divider in each.  Then this choice divides the folders into four non-empty sets. The first goes to Audrey, the second to Bart, <etc /> Thus the answer is <m>C(17,3)</m>. In <xref ref="fig_distrib"  />, we illustrate this scheme with Audrey receiving<nbsp /><m>6</m> folders, Bart getting<nbsp /><m>1</m>, Cecilia<nbsp /><m>4</m> and Darren<nbsp />7.
        </p>
        <figure xml:id="fig_distrib" >
            <caption>Distributing Identical Objects into Distinct
            Cells</caption>
            <image width="80%" source="3012-fig23" />
        </figure>
    </example>

    <example>
        <statement>
            <p>Suppose we redo the preceding problem but drop the restriction that each of the four employees gets at least one folder.  Now how many ways can the distribution be made?
            </p>
        </statement>
        <solution>
            <p>The solution involves a <q>trick</q> of sorts. First, we convert the problem to one that we already know how to solve. This is accomplished by <em>artificially</em> inflating everyone's allocation by one. In other words, if Bart will get <m>7</m> folders, we say that he will get <m>8</m>. Also, artificially inflate the number of folders by <m>4</m>, one for each of the four persons. So now imagine a row of <m>22=18+4</m> folders. Again, choose <m>3</m> gaps. This determines a non-zero allocation for each person. The actual allocation is one less<mdash />and may be zero. So the answer is <m>C(21,3)</m>.
            </p>
        </solution>
    </example>

    <example>
        <p>Again we have the same problem as before, but now we want to count the number of distributions where only Audrey and Cecilia are guaranteed to get a folder. Bart and Darren are allowed to get zero folders. Now the trick is to artificially inflate Bart and Darren's allocation, but leave the numbers for Audrey and Cecilia as is. So the answer is <m>C(19,3)</m>.
        </p>
    </example>

    <example>
        <p>Here is a reformulation of the preceding discussion expressed in terms of integer solutions of inequalities.
        </p>

        <p>We count the number of integer solutions to the inequality
            <me>
                x_1+x_2+x_3+x_4+x_5+x_6\le 538
            </me>
                subject to various sets of restrictions on the values of <m>x_1,x_2,\dots,x_6</m>. Some of these restrictions will require that the inequality actually be an equation.
            </p>

            <p>The number of integer solutions is:
            <ol>
                <li><m>C(537,5)</m>, when all <m>x_i> 0</m> and equality holds;</li>
                <li><m>C(543,5)</m>, when all <m>x_i\ge 0</m> and equality holds;</li>
                <li><m>C(291,3)</m>, when <m>x_1,x_2,x_4,x_6>0</m>, <m>x_3=52</m>, <m>x_5=194</m>, and equality holds;</li>
                <li><m>C(537,6)</m>, when all <m>x_i > 0</m> and the inequality is strict (Imagine a new variable <m>x_7</m> which is the balance.  Note that <m>x_7</m> must be positive.);</li>
                <li><m>C(543,6)</m>, when all <m>x_i \ge 0</m> and the inequality is
                strict (Add a new variable <m>x_7</m> as above.   Now it
                is the only one which is required to be positive.); and</li>
                <li><m>C(544,6)</m>, when all <m>x_i \ge 0</m>.</li>
            </ol>
            </p>
    </example>
    <p>A classical enumeration problem (with connections to several problems) involves counting lattice paths. A <term>lattice path</term><idx><h>lattice path</h></idx> in the plane is a sequence of ordered pairs of integers:
    <me>
        (m_1,n_1), (m_2,n_2), (m_3,n_3),\dots,(m_t,n_t)
    </me>
    so that for all <m>i=1,2,\dots,t-1</m>, either
    <ol>
        <li><m>m_{i+1}=m_{i}+1</m> and <m>n_{i+1}=n_i</m>, or</li>
        <li><m>m_{i+1}=m_i</m> and <m>n_{i+1}=n_{i}+1</m>.</li>
    </ol>
    </p>
    <p>In <xref ref="fig_latticepath"  />, we show a lattice path from <m>(0,0)</m> to <m>(13,8)</m>.
    </p>
    <figure xml:id="fig_latticepath" >
        <caption>A Lattice Path</caption>
        <image width="51%" source="3012-fig22" />
    </figure>
    <example>
        <idx><h>lattice path</h><h>counting</h></idx>
        <p>The number of lattice paths from <m>(m,n)</m> to <m>(p,q)</m> is <m>C((p-m)+(q-n),p-m)</m>.
        </p>

        <p>To see why this formula is valid, note that a lattice path is just an <m>X</m>-string with <m>X=\{H,V\}</m>, where <m>H</m> stands for <em>horizontal</em> and <m>V</m> stands for <em>vertical</em>. In this case, there are exactly <m>(p-m)+(q-n)</m> moves, of which <m>p-m</m> are horizontal.
        </p>
    </example>

    <example xml:id="exa_lattice-Catalan">
        <p>Let <m>n</m> be a non-negative integer. Then the number of lattice paths from <m>(0,0)</m> to <m>(n,n)</m> which never go above the diagonal line <m>y=x</m> is the <term>Catalan number</term><idx><h>Catalan number</h></idx><idx><h>lattice path</h><h>number not crossing <m>y=x</m></h></idx>
        <me>
            C(n) =\frac{1}{n+1}\binom{2n}{n}.
        </me>
        </p>
        <p>To see that this formula holds, consider the family <m>\cgP</m> of all lattice paths from <m>(0,0)</m> to <m>(n,n)</m>. A lattice path from <m>(0,0)</m> to <m>(n,n)</m> is just a <m>\{H,V\}</m>-string of length <m>2n</m> with exactly <m>n</m> <m>H</m>'s. So <m>|\cgP|=\binom{2n}{n}</m>. We classify the paths in <m>\cgP</m> as <em>good</em> if they never go over the diagonal; otherwise, they are <em>bad</em>. A string <m>s\in\cgP</m> is good if the number of <m>V</m>'s in an initial segment of <m>s</m> never exceeds the number of <m>H</m>'s. For example, the string <q><m>HHVHVVHHHVHVVV</m></q> is a good lattice path from <m>(0,0)</m> to <m>(7,7)</m>, while the path <q><m>HVHVHHVVVHVHHV</m></q> is bad. In the second case, note that after<nbsp /><m>9</m> moves, we have<nbsp /><m>5</m> <m>V</m>'s and<nbsp /><m>4</m><nbsp /><m>H</m>'s.
        </p>

        <p>Let <m>\cgG</m> and <m>\cgB</m> denote the family of all good and bad paths, respectively. Of course, our goal is to determine <m>|\cgG|</m>.
        </p>

        <p>Consider a path <m>s\in\cgB</m>. Then there is a least integer <m>i</m> so that <m>s</m> has more <m>V</m>'s than <m>H</m>'s in the first <m>i</m> positions. By the minimality of <m>i</m>, it is easy to see that <m>i</m> must be odd (otherwise, we can back up a step), and if we set <m>i=2j+1</m>, then in the first <m>2j+1</m> positions of <m>s</m>, there are exactly <m>j</m> <m>H</m>'s and <m>j+1</m> <m>V</m>'s. The remaining <m>2n-2j-1</m> positions (the <q>tail of <m>s</m></q>) have <m>n-j</m> <m>H</m>'s and <m>n-j-1</m> <m>V</m>'s. We now transform <m>s</m> to a new string <m>s'</m> by replacing the <m>H</m>'s in the tail of <m>s</m> by <m>V</m>'s and the <m>V</m>'s in the tail of <m>s</m> by <m>H</m>'s and leaving the initial <m>2j+1</m> positions unchanged. For example, see <xref ref="flippath"  />, where the path <m>s</m> is shown solid and <m>s'</m> agrees with <m>s</m> until it crosses the line <m>y=x</m> and then is the dashed path. Then <m>s'</m> is a string of length <m>2n</m> having <m>(n-j)+(j+1) = n+1</m> <m>V</m>'s and <m>(n-j-1)+j=n-1</m> <m>H</m>'s, so <m>s'</m> is a lattice path from <m>(0,0)</m> to <m>(n-1,n+1)</m>. Note that there are <m>\binom{2n}{n-1}</m> such lattice paths.
        </p>
        <figure xml:id="flippath" >
            <caption>Transforming a Lattice Path</caption>
            <image width="50%" source="3012-fig26" />
        </figure>
        <p>We can also observe that the transformation we've described is in fact a bijection between <m>\cgB</m> and <m>\cgP'</m>, the set of lattice paths from <m>(0,0)</m> to <m>(n-1,n+1)</m>. To see that this is true, note that every path <m>s'</m> in <m>\cgP'</m> must cross the line <m>y=x</m>, so there is a first time it crosses it, say in position <m>i</m>. Again, <m>i</m> must be odd, so <m>i=2j+1</m> and there are <m>j</m> <m>H</m>'s and <m>j+1</m> <m>V</m>'s in the first <m>i</m> positions of <m>s'</m>. Therefore the tail of <m>s'</m> contains <m>n+1-(j+1)=n-j</m> <m>V</m>'s and <m>(n-1)-j</m> <m>H</m>'s, so interchanging <m>H</m>'s and <m>V</m>'s in the tail of <m>s'</m> creates a new string <m>s</m> that has <m>n</m> <m>H</m>'s and <m>n</m> <m>V</m>'s and thus represents a lattice path from <m>(0,0)</m> to <m>(n,n)</m>, but it's still a bad lattice path, as we did not adjust the first part of the path, which results in crossing the line <m>y=x</m> in position <m>i</m>. Therefore, <m>|\cgB|=|\cgP'|</m> and thus
        <me>
            C(n)=|\cgG|=|\cgP|-|\cgB|=|\cgP|-|\cgP'| = \binom{2n}{n} -
            \binom{2n}{n-1} = \frac{1}{n+1}\binom{2n}{n},
        </me>
        after a bit of algebra.
        </p>
    </example>
    <p>It is worth observing that in <xref ref="exa_lattice-Catalan"  />, we made use of two common enumerative techniques: giving a bijection between two classes of objects, one of which is <q>easier</q> to count than the other, and counting the objects we do <em>not</em> wish to enumerate and deducting their number from the total.
    </p>
</section>
