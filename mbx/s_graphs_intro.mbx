<section xml:id="s_graphs_intro">
<title>Basic Notation and Terminology for Graphs</title>
<p>
A <em>graph</em> <m>\bfG</m> is a pair <m>(V,E)</m> where <m>V</m> is a set (almost
always finite) and <m>E</m> is a set of <m>2</m>-element subsets of <m>V</m>.
Elements of <m>V</m> are called <em>vertices</em> and elements of <m>E</m> are
called <em>edges</em>. We call <m>V</m> the <em>vertex set</em> of <m>\bfG</m>
and <m>E</m> is the <em>edge set</em>. For convenience, it is customary to
abbreviate the edge <m>\{x,y\}</m> as just <m>xy</m>. Remember though that
<m>xy\in E</m> means exactly the same as <m>yx\in E</m>. If <m>x</m> and <m>y</m> are
distinct vertices from <m>V</m>, <m>x</m> and <m>y</m> are <em>adjacent</em> when
<m>xy\in E</m>; otherwise, we say they are <em>non-adjacent</em>. We say
the edge <m>xy</m> is <em>incident to</em> the vertices <m>x</m> and <m>y</m>.
</p>

<p>
For example, we could define a graph <m>\GVE</m> with vertex set
<m>V=\{a,b,c,d,e\}</m> and edge set <m>E=\{\{a,b\},\{c,d\},\{a,d\}\}</m>. Notice
that no edge is incident to <m>e</m>, which is perfectly permissible based
on our definition. It is quite common to identify a graph with a
visualization in which we draw a point for each vertex and a line
connecting two vertices if they are adjacent. The graph <m>\bfG</m> we've
just defined is shown in <xref ref="fig_small_graph" autoname="yes" />. It's important to
remember that while a drawing of a graph is a helpful too, it is not
the same as the graph. We could draw <m>\bfG</m> in any of several
different ways without changing what it is as a graph.
</p>
<figure xml:id="fig_small_graph" >
<caption>A graph on <m>5</m> vertices</caption>
<image>
<latex-image-code><![CDATA[\begin{overpic}{graphs-figs/small_graph}
    \put(58,100){<m>a</m>}
    \put(100,48){<m>b</m>}
    \put(-7,10){<m>c</m>}
    \put(15,50,){<m>d</m>}
    \put(70,11){<m>e</m>}
  \end{overpic}]]></latex-image-code>
</image>

</figure>
<p>
As is often the case in science and mathematics, different authors use
slightly different notation and terminology for graphs. As an
example, some use <em>nodes</em> and <em>arcs</em> rather than
vertices and edges. Others refer to vertices as <em>points</em> and
in this case, they often refer to <em>lines</em> rather than edges.
We will try to stick to vertices and edges but confess that we may
occasionally lapse into referring to vertices as points. Also,
following the patterns of many others, we will also say that adjacent
vertices are <em>neighbors</em>. And we will use the more or less
standard terminology that the <em>neighborhood</em> of a vertex <m>x</m> is
the set of vertices adjacent to <m>x</m>. Thus, using the graph <m>\bfG</m> we
have depicted in <xref ref="fig_small_graph" autoname="yes" />, vertices <m>d</m> and <m>a</m> are
neighbors, and the neighborhood of <m>d</m> is <m>\{a,c\}</m> while the
neighborhood of <m>e</m> is the empty set. Also, the <em>degree</em> of a
vertex <m>v</m> in a graph <m>\bfG</m>, denoted <m>\deg_\bfG(v)</m>, is then the
number of vertices in its neighborhood, or equivalently, the number of
edges incident to it. For example, we have
<m>\deg_\bfG(d)=\deg_\bfG(a)=2</m>, <m>\deg_\bfG(c)=\deg_\bfG(b)=1</m>, and
<m>\deg_\bfG(e)=0</m>. If the graph being discussed is clear from context,
it is not uncommon to omit the subscript and simply write <m>\deg(v)</m>
for the degree of <m>v</m>.
</p>

<p>
When <m>\GVE</m> and <m>\HWF</m> are graphs, we say <m>\bfH</m> is a
<em>subgraph</em> of <m>\bfG</m> when <m>W\subseteq V</m> and <m>F\subseteq E</m>.
We say <m>\bfH</m> is an <em>induced</em> subgraph when <m>W\subseteq V</m> and
<m>F=\{xy\in E: x,y\in W\}</m>. In other words, an induced subgraph is
defined completely by its vertex set and the original graph <m>\bfG</m>. We
say <m>\bfH</m> is a <em>spanning</em> subgraph when <m>W=V</m>. In
<xref ref="fig_subgraphs" autoname="yes" />, we show a graph, a subgraph and an induced
subgraph. Neither of these subgraphs is a spanning subgraph.
</p>
<figure xml:id="fig_subgraphs" >
<caption>A Graph, a Subgraph and an Induced Subgraph</caption>
<image width="75%" source="images/subgraphs.png" />
</figure>
<p>
A graph <m>\GVE</m> is called a <em>complete</em> graph when <m>xy</m> is an
edge in <m>\bfG</m> for every distinct pair <m>x,y\in V</m>. Conversely, <m>\bfG</m>
is an <em>independent</em> graph if <m>xy\not\in E</m>, for every distinct
pair <m>x,y\in V</m>. It is customary to denote a complete graph on <m>n</m>
vertices by <m>\bfK_n</m> and an independent graph on <m>n</m> vertices by
<m>\bfI_n</m>. In <xref ref="fig_complete_graphs" autoname="yes" />, we show the complete
graphs with at most <m>5</m> vertices.
</p>
<figure xml:id="fig_complete_graphs" >
<caption>Small complete graphs</caption>
<image>
<latex-image-code><![CDATA[\begin{overpic}[width=4in]{graphs-figs/complete_graphs}
    \put(2.5,2){<m>\bfK_1</m>}
    \put(16.5,2){<m>\bfK_2</m>}
    \put(36.5,2){<m>\bfK_3</m>}
    \put(60.5,2){<m>\bfK_4</m>}
    \put(86,2){<m>\bfK_5</m>}
  \end{overpic}]]></latex-image-code>
</image>

</figure>
<p>
A sequence <m>(x_1,x_2,\dots,x_n)</m> of vertices in a graph <m>\GVE</m> is
called a <em>walk</em> when <m>x_ix_{i+1}</m> is an edge for each
<m>i=1,2,\dots,n-1</m>. Note that the vertices in a walk need not be
distinct. On the other hand, if the vertices are distinct, then the
sequence is called a <em>path</em>, and often to emphasize where a
path starts and ends, we will say that a sequence
<m>(x_1,x_2,\dots,x_n)</m> of distinct vertices is a path from <m>x_1</m> to
<m>x_n</m> in <m>\bfG</m>. Similarly, when <m>n\ge3</m>, a path <m>(x_1,x_2,\dots,x_n)</m>
of <m>n</m> distinct vertices is called a cycle when <m>x_1x_n</m> is also an
edge in <m>\bfG</m>. It is customary to denote a path on <m>n</m> vertices by
<m>\bfP_n</m>, while <m>\bfC_n</m> denotes a cycle on <m>n</m> vertices. The
<em>length</em> of a path or a cycle is the number of edges it
contains. Therefore, the length of <m>\bfP_n</m> is <m>n-1</m> and the length of
<m>\bfC_n</m> is <m>n</m>. In <xref ref="fig_paths" autoname="yes" />, we show the paths of length
at most <m>4</m>, and in <xref ref="fig_cycles" autoname="yes" />, we show the cycles of length
at most <m>5</m>.
</p>
<figure xml:id="fig_paths" >
<caption>Short paths</caption>
<image>
<latex-image-code><![CDATA[\begin{overpic}[width=4in]{graphs-figs/paths}
    \put(8,-2){<m>\bfP_1</m>}
    \put(24,-2){<m>\bfP_2</m>}
    \put(39.5,-2){<m>\bfP_3</m>}
    \put(59.5,-2){<m>\bfP_4</m>}
    \put(85,-2){<m>\bfP_5</m>}
  \end{overpic}]]></latex-image-code>
</image>

</figure>
<figure xml:id="fig_cycles" >
<caption>Small cycles</caption>
<image>
<latex-image-code><![CDATA[\begin{overpic}[width=4in]{graphs-figs/cycles}
    \put(24,1){<m>\bfC_3</m>}
    \put(47.5,1){<m>\bfC_4</m>}
    \put(73,1){<m>\bfC_5</m>}
  \end{overpic}]]></latex-image-code>
</image>

</figure>
<p>
If <m>\GVE</m> and <m>\HWF</m> are graphs, we say <m>\bfG</m> is <em>isomorphic</em>
to <m>\bfH</m> and write <m>\bfG\cong\bfH</m> when there exists a bijection
<m>f:V\bijection W</m> so that <m>x</m> is adjacent to <m>y</m> in <m>\bfG</m> if and only
if <m>f(x)</m> is adjacent to <m>f(y)</m> in <m>\bfH</m>. Often writers will say
that <m>\bfG</m> <q>contains</q> <m>\bfH</m> when there is a subgraph of <m>\bfG</m>
which is isomorphic to <m>\bfH</m>. In particular, it is customary to say
that <m>\bfG</m> contains the cycle <m>\bfC_n</m> (same for <m>\bfP_n</m> and
<m>\bfK_n</m>) when <m>\bfG</m> contains a subgraph isomorphic to <m>\bfC_n</m>. The
graphs in <xref ref="fig_isomorphic" autoname="yes" /> are isomorphic. An isomorphism
between these graphs is given by
</p>
<me>
  f(a)=5,\quad f(b) = 3, \quad f(c) = 1,\quad f(d) = 6,\quad f(e)=2,\quad f(h)=4.
</me>
<figure xml:id="fig_isomorphic" >
<caption>A pair of isomorphic graphs</caption>
<image>
<latex-image-code><![CDATA[\begin{overpic}[width=4in]{graphs-figs/isomorphic_graphs}
    \put(6,13){<m>a</m>}
    \put(20.5,1){<m>b</m>}
    \put(36,14){<m>c</m>}
    \put(20,21){<m>d</m>}
    \put(38,2){<m>e</m>}
    \put(22.5,13){<m>h</m>}

    \put(83,13.5){<m>1</m>}
    \put(67,10){<m>2</m>}
    \put(85,2){<m>3</m>}
    \put(67.5,21.5){<m>4</m>}
    \put(53,13){<m>5</m>}
    \put(68,1){<m>6</m>}
  \end{overpic}]]></latex-image-code>
</image>

</figure>
<p>
On the other hand, the graphs shown in <xref ref="fig_nonisomorphic" autoname="yes" /> are
<em>not</em> isomorphic, even though they have the same number of
vertices and the same number of edges. Can you tell why?
</p>
<figure xml:id="fig_nonisomorphic" >
<caption>A pair of nonisomorphic graphs</caption>
<image>
<latex-image-code><![CDATA[\begin{overpic}[width=4in]{graphs-figs/nonisomorphic_graphs}
    \put(6,13){<m>a</m>}
    \put(20.5,1){<m>b</m>}
    \put(36,14){<m>c</m>}
    \put(20,21){<m>d</m>}
    \put(38,2){<m>e</m>}
    \put(22.5,13){<m>h</m>}

    \put(83,13.5){<m>1</m>}
    \put(73.2,10){<m>2</m>}
    \put(85,2){<m>3</m>}
    \put(67.5,21.5){<m>4</m>}
    \put(53,13){<m>5</m>}
    \put(68,1){<m>6</m>}
  \end{overpic}]]></latex-image-code>
</image>

</figure>
<p>
A graph <m>\bfG</m> is <em>connected</em> when there is
a path from <m>x</m> to <m>y</m> in <m>\bfG</m>, for every <m>x,y\in V</m>; otherwise, we
say <m>\bfG</m> is <em>disconnected</em>. The graph of
<xref ref="fig_small_graph" autoname="yes" /> is disconnected (a sufficient justification
for this is that there is no path from <m>e</m> to <m>c</m>), while those in
<xref ref="fig_isomorphic" autoname="yes" /> are connected.
</p>

<p>
A graph is <em>acyclic</em> when it does not contain any cycle on
three or more vertices. Acyclic graphs are also called
<em>forests</em>. A connected acyclic graph is called a
<em>tree</em>. When <m>\GVE</m> is a connected graph, a subgraph <m>\HWF</m> of
<m>\bfG</m> is called a <em>spanning tree</em> if <m>\bfH</m> is both a spanning
subgraph of <m>\bfG</m> and a tree. In <xref ref="fig_spantree" autoname="yes" />, we show a
graph and one of its spanning trees. We will return to the subject of
spanning trees in <xref ref="ch_graphalgorithms" autoname="yes" />.
</p>
<figure xml:id="fig_spantree" >
<caption>A Graph and a Spanning Tree</caption>
<image width="75%" source="images/spanning_tree.png" />
</figure>
<p>
The following theorem is very elementary, and some authors refer to it
as the <q>first theorem of graph theory</q>. However, this basic result
can be surprisingly useful.
</p>

<theorem>
<statement>
<p>
Let <m>\deg_\bfG(v)</m> denote the degree of vertex <m>v</m> in graph <m>\GVE</m>. Then
</p>
<me>
  \sum_{v\in V}\deg_\bfG(v) = 2|E|.\tag*{(*)}
</me>
</statement>
</theorem>

<proof>
<p>
We consider how many times an edge <m>e=vw\in E</m> contributes to each
side of (*). The <m>\deg_\bfG(x)</m> and <m>\deg_\bfG(y)</m> terms on the left
hand side each count <m>e</m> once, so <m>e</m> is counted twice on that
side. On the right hand side, <m>e</m> is clearly counted
twice. Therefore, we have the equality claimed.
</p>
</proof>

<corollary>
<statement>
<p>
For any graph, the number of vertices of odd degree is even.
</p>
</statement>
</corollary>

<p>
We will return to the topic of trees later, but before moving on, let
us prove one elementary proposition about trees. First, a
<em>leaf</em> in a tree <m>\bfT</m> is a vertex <m>v</m> with <m>\deg_\bfT(v)=1</m>.
</p>

<proposition xml:id="prop_tree-leaves">
<statement>
<p>
Every tree on <m>n\geq 2</m> vertices has at least two leaves.
</p>
</statement>
</proposition>

<proof>
<p>
Our proof is by induction on <m>n</m>. For <m>n=2</m>, there is precisely one
tree, which is isomorphic to <m>\bfK_2</m>. Both vertices in this graph
are leaves, so the proposition holds for <m>n=2</m>. Now suppose that for
some integer <m>m\geq 2</m>, every tree on at most <m>m</m> vertices has at
least two leaves and let <m>\bfT=(V,E)</m> be a tree on <m>m+1</m> vertices.
Pick an edge <m>e\in E</m> and form a new graph <m>\bfT'=(V',E')</m> by
deleting <m>e</m> from <m>\bfT</m>. That is, <m>V'=V</m> and <m>E'=E-\{e\}</m>. Now
since <m>\bfT'</m> does not contain a path from one endpoint of <m>e</m> to
its other endpoint, <m>\bfT'</m> is not connected. However, deleting an
edge cannot create a cycle, so <m>\bfT'</m> is a forest. Furthermore, it
has precisely two components, each of which is a tree with at most
<m>m</m> vertices. If each component has at least two vertices, then by
induction, each has at least two leaves. In the worst case scenario,
two of these leaves are the endpoints of <m>e</m>, so at least two of the
vertices are leaves in <m>\bfT</m>, too. If each component of <m>\bfT'</m> has
only one vertex, then <m>\bfT\cong \bfK_2</m>, which has two leaves. If
exactly one of the components has only one vertex, then it must be a
leaf in <m>\bfT</m>. Thus, applying the inductive hypothesis to the other
component ensures that there is a second leaf in <m>\bfT</m>.
</p>
</proof>
</section>
