<?xml version="1.0" encoding="UTF-8"?>
<exercises permid="iUp" xml:id="s_recurrence_exercises">

  <exercise permid="AJy">
    <statement>
      <p permid="DSz">
        Write each of the following recurrence equations as advancement
        operator equations.

        <ol permid="TwW" cols="2">
          <li permid="QCq">
            <p permid="nZH">
              <m>r_{n+2} = r_{n+1}+2r_n</m>
            </p>
          </li>

          <li permid="wJz">
            <p permid="UgQ">
              <m>r_{n+4}=3r_{n+3} - r_{n+2}+2r_n</m>
            </p>
          </li>

          <li permid="cQI">
            <p permid="AnZ">
              <m>g_{n+3} = 5 g_{n+1} - g_n + 3^n</m>
            </p>
          </li>

          <li permid="IXR">
            <p permid="gvi">
              <m>h_n = h_{n-1} - 2h_{n-2} + h_{n-3}</m>
            </p>
          </li>

          <li permid="pfa">
            <p permid="MCr">
              <m>r_n = 4r_{n-1} + r_{n-3} - 3 r_{n-5} + (-1)^n</m>
            </p>
          </li>

          <li permid="Vmj">
            <p permid="sJA">
              <m>b_n = b_{n-1} + 3b_{n-2} + 2^{n+1} - n^2</m>
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>

  <exercise permid="gQH">
    <statement>
      <p permid="jZI">
        Solve the recurrence equation
        <m>r_{n+2} = r_{n+1} + 2r_n</m> if <m>r_0=1</m> and <m>r_2=3</m> (Yes,
        we specify a value for <m>r_2</m> but not for <m>r_1</m>).
      </p>
    </statement>
  </exercise>

  <exercise permid="MXQ">
    <statement>
      <p permid="QgR">
        Find the general solution of the recurrence equation <m>g_{n+2} = 3g_{n+1}-2g_n</m>.
      </p>
    </statement>
  </exercise>

  <exercise permid="teZ">
    <statement>
      <p permid="woa">
        Solve the recurrence equation <m>h_{n+3} = 6h_{n+2}-11h_{n+1} + 6h_n</m> if <m>h_0=3</m>,
        <m>h_1=2</m>, and <m>h_2=4</m>.
      </p>
    </statement>
  </exercise>

  <exercise permid="Zmi">
    <statement>
      <p permid="cvj">
        Find an explicit formula for the
        <m>n^\text{th}</m> Fibonacci number <m>f_n</m>.
        (See <xref ref="s_recurrence_intro_fib" />.)
      </p>
    </statement>
  </exercise>

  <exercise permid="Ftr">
    <statement>
      <p permid="ICs">
        For each advancement operator equation below,
        give its general solution.

        <ol permid="zEf" cols="2">
          <li permid="Bts">
            <p permid="YQJ">
              <m>(A-2)(A+10)f=0</m>
            </p>
          </li>

          <li permid="hAB">
            <p permid="EXS">
              <m>(A^2-36)f=0</m>
            </p>
          </li>

          <li permid="NHK">
            <p permid="lfb">
              <m>(A^2-2A-5)f=0</m>
            </p>
          </li>

          <li permid="tOT">
            <p permid="Rmk">
              <m>(A^3-4 A^2-20 A+48)f=0</m>
            </p>
          </li>

          <li permid="ZWc">
            <p permid="xtt">
              <m>(A^3 +A^2-5A+ 3)f=0</m>
            </p>
          </li>

          <li permid="Gdl">
            <p permid="dAC">
              <m>(A^3+3 A^2+3 A+1)f=0</m>
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>

  <exercise permid="lAA">
    <statement>
      <p permid="oJB">
        Solve the advancement operator equation
        <m>(A^2+3 A-10)f=0</m> if <m>f(0)=2</m> and <m>f(1)=10</m>.
      </p>
    </statement>
  </exercise>

  <exercise permid="RHJ">
    <statement>
      <p permid="UQK">
        Give the general solution to each advancement operator equation below.

        <ol permid="fLo">
          <li permid="mku">
            <p permid="JHL">
              <m>(A-4)^3(A+1)(A-7)^4(A-1)^2 f =0</m>
            </p>
          </li>

          <li permid="SrD">
            <p permid="pOU">
              <m>(A+2)^4(A-3)^2(A-4)(A+7)(A-5)^3g=0</m>
            </p>
          </li>

          <li permid="yyM">
            <p permid="VWd">
              <m>(A-5)^2(A+3)^3(A-1)^3(A^2-1)(A-4)^3h=0</m>
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>

  <exercise permid="xOS">
    <statement>
      <p permid="AXT">
        For each nonhomogeneous advancement operator equation,
        find its general solution.

        <ol permid="LSx" cols="2">
          <li permid="eFV">
            <p permid="Cdm">
              <m>(A-5)(A+2)f=3^n</m>
            </p>
          </li>

          <li permid="KNe">
            <p permid="ikv">
              <m>(A^2+3A-1)g = 2^n + (-1)^n</m>
            </p>
          </li>

          <li permid="qUn">
            <p permid="OrE">
              <m>(A-3)^3 f = 3n+1</m>
            </p>
          </li>

          <li permid="Xbw">
            <p permid="uyN">
              <m>(A^2+3A-1)g = 2n</m>
            </p>
          </li>

          <li permid="DiF">
            <p permid="aFW">
              <m>(A-2)(A-4)f=3n^2 + 9^n</m>
            </p>
          </li>

          <li permid="jpO">
            <p permid="GNf">
              <m>(A+2)(A-5)(A-1)f = 5^n</m>
            </p>
          </li>

          <li permid="PwX">
            <p permid="mUo">
              <m>(A-3)^2(A+1)g= 2\cdot 3^n</m>
            </p>
          </li>

          <li permid="vEg">
            <p permid="Tbx">
              <m>(A-2)(A+3)f=5n2^n</m>
            </p>
          </li>

          <li permid="bLp">
            <p permid="ziG">
              <m>(A-2)^2(A-1)g=3n^22^n + 2^n</m>
            </p>
          </li>

          <li permid="HSy">
            <p permid="fpP">
              <m>(A+1)^2(A-3)f = 3^n + 2n^2</m>
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>

  <exercise permid="dWb">
    <statement>
      <p permid="hfc">
        Find and solve a recurrence equation for the number <m>g_n</m> of ternary strings of length <m>n</m> that do not contain <m>102</m> as a substring.
      </p>
    </statement>
  </exercise>

  <exercise permid="Kdk">
    <statement>
      <p permid="Nml">
        There is a famous puzzle called the Towers of Hanoi that consists of three pegs and <m>n</m> circular discs,
        all of different sizes.
        The discs start on the leftmost peg,
        with the largest disc on the bottom,
        the second largest on top of it, and so on,
        up to the smallest disc on top.
        The goal is to move the discs so that they are stacked in this same order on the rightmost peg.
        However, you are allowed to move only one disc at a time,
        and you are never able to place a larger disc on top of a smaller disc.
        Let <m>t_n</m> denote the fewest moves (a move being taking a disc from one peg and placing it onto another) in which you can accomplish the goal.
        Determine an explicit formula for <m>t_n</m>.
      </p>
    </statement>
  </exercise>

  <exercise permid="qkt">
    <statement>
      <p permid="ttu">
        A valid database identifier of length <m>n</m> can be constructed in three ways:

        <ul permid="rZG">
          <li permid="YgP">
            <p permid="LwY">
              Starting with <m>A</m> and followed by any valid identifier of length <m>n-1</m>.
            </p>
          </li>

          <li permid="EnY">
            <p permid="rEh">
              Starting with one of the two-character strings <m>1A</m>,
              <m>1B</m>,
              <m>1C</m>, <m>1D</m>, <m>1E</m>,
              or <m>1F</m> and followed by any valid identifier of length <m>n-2</m>.
            </p>
          </li>

          <li permid="kvh">
            <p permid="XLq">
              Starting with <m>0</m> and followed by any ternary (<m>\{0,1,2\}</m>) string of length <m>n-1</m>.
            </p>
          </li>
        </ul>
      </p>

      <p permid="ZAD">
        Find a recurrence for the number <m>g(n)</m> of database identifiers of length <m>n</m> and then solve your recurrence to obtain an explicit formula for <m>g(n)</m>. (You may consider the empty string of length <m>0</m> a valid database identifier,
        making <m>g(0)=1</m>.
        This will simplify the arithmetic.)
      </p>
    </statement>
  </exercise>

  <exercise permid="WrC">
    <statement>
      <p permid="FHM">
        Let <m>t_n</m> be the number of ways to tile a <m>2\times n</m> rectangle using
        <m>1\times 1</m> tiles and <m>L</m>-tiles.
        An <m>L</m>-tile is a <m>2\times 2</m> tile with the upper-right <m>1\times 1</m> square deleted.
        (An <m>L</m> tile may be rotated so that the <q>missing</q>
        square appears in any of the four positions.)
        Find a recursive formula for <m>t_n</m> along with enough initial conditions to get the recursion started.
        Use this recursive formula to find a closed formula for <m>t_n</m>.
      </p>
    </statement>
  </exercise>

  <exercise permid="CyL">
    <statement>
      <p permid="lOV">
        Prove <xref ref="lem_rr" /> about advancement operator equations with repeated roots.
      </p>
    </statement>
  </exercise>

  <exercise permid="iFU" xml:id="ex_recurrence_gen-fn">
    <statement>
      <p permid="RWe">
        Use generating functions to solve the recurrence equation
        <m>r_n=r_{n-1}+6r_{n-2}</m> for <m>n\geq 2</m> with <m>r_0=1</m> and <m>r_1=3</m>.
      </p>
    </statement>
  </exercise>

  <exercise permid="ONd">
    <statement>
      <p permid="ydn">
        Let <m>a_0=0</m>, <m>a_1=2</m>, and <m>a_2=5</m>.
        Use generating functions to solve the recurrence equation <m>a_{n+3} = 5a_{n+2} - 7a_{n+1}+3a_n + 2^n</m> for <m>n\geq 0</m>.
      </p>
    </statement>
  </exercise>

  <exercise permid="uUm">
    <statement>
      <p permid="ekw">
        Let <m>b_0=1</m>, <m>b_2=1</m>, and <m>b_3=4</m>.
        Use generating functions to solve the recurrence equation <m>b_{n+3} = 4b_{n+2}-b_{n+1}-6b_n + 3^n</m> for <m>n\geq 0</m>.
      </p>
    </statement>
  </exercise>

  <exercise permid="bbv">
    <statement>
      <p permid="KrF">
        Use generating functions to find a closed formula for the Fibonacci numbers <m>f_n</m>.
      </p>
    </statement>
  </exercise>

  <exercise permid="HiE">
    <statement>
      <p permid="qyO">
        How many rooted, unlabeled, binary,
        ordered, trees (RUBOTs) with <m>6</m> leaves are there?
        Draw <m>6</m> distinct RUBOTs with <m>6</m> leaves.
      </p>
    </statement>
  </exercise>

  <exercise permid="npN">
    <statement>
      <p permid="WFX">
        In this chapter,
        we developed a generating function for the Catalan numbers.
        We first encountered the Catalan numbers in <xref ref="ch_strings" />, where we learned they count certain lattice paths.
        Develop a recurrence for the number <m>l_n</m> of lattice paths similar to the recurrence
        <me permid="CNg">
          c_n = \sum_{k=0}^n c_k c_{n-k}\qquad \text{for } n\geq 2
        </me>
        for RUBOTs by thinking of ways to break up a lattice path from <m>(0,0)</m> to <m>(n,n)</m> that does not cross the diagonal <m>y=x</m> into two smaller lattice paths of this type.
      </p>
    </statement>
  </exercise>

</exercises>
