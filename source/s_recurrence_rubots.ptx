<section xml:id="s_recurrence_rubots">
    <title>Solving a nonlinear recurrence</title>
    <p>In this section, we will use generating functions to enumerate the a certain type of trees. In doing this, we will see how generating functions can be used in solving a <em>nonlinear</em> recurrence equation<idx><h>recurrence equation</h><h>nonlinear</h></idx>. We will also make a connection to a counting sequence we encountered back in <xref ref="ch_strings"  />. To do all of this, we must introduce a bit of terminology. A tree is <term>rooted</term><idx><h>tree</h><h>rooted</h></idx> if we have designated a special vertex called its <term>root</term>. We will always draw our trees with the root at the top and all other vertices below it. An <term>unlabeled tree</term><idx><h>tree</h><h>unlabeled</h></idx> is one in which we do not make distinctions based upon names given to the vertices. For our purposes, a <term>binary tree</term><idx><h>tree</h><h>binary</h></idx> is one in which each vertex has <m>0</m> or <m>2</m> children, and an <term>ordered tree</term><idx><h>tree</h><h>ordered</h></idx> is one in which the children of a vertex have some ordering (first, second, third, <etc />). Since we will be focusing on rooted, unlabeled, binary, ordered trees (RUBOTs for short), we will call the two children of vertices that have children the <term>left</term> and <term>right</term> children.
    </p>

    <p>In <xref ref="fig_rubots"  />, we show the rooted, unlabeled, binary, ordered trees with <m>n</m> leaves for <m>n\leq 4</m>.
    </p>
    <figure xml:id="fig_rubots" >
        <caption>The RUBOTs with <m>n</m> leaves for <m>n\leq 4</m></caption>
        <image width="75%" source="RUBOTs" />
    </figure>
    <p>Let <m>C(x) = \sum_{n=0}^\infty c_n x^n</m> be the generating function for the sequence <m>\{c_n\colon n\geq 0\}</m> where <m>c_n</m> is the number of RUBOTs with <m>n</m> leaves. (We take <m>c_0=0</m> for convenience.) Then we can see from <xref ref="fig_rubots"  /> that <m>C(x) = x + x^2 + 2x^3 + 5x^4 + \cdots</m>. But what are the remaining coefficients? Let's see how we can break a RUBOT with <m>n</m> leaves down into a combination of two smaller RUBOTs to see if we can express <m>c_n</m> in terms of some <m>c_k</m> for <m>k\lt n</m>. When we look at a RUBOT with <m>n\geq 2</m> leaves, we notice that the root vertex must have two children. Those children can be viewed as root nodes of smaller RUBOTs, say the left child roots a RUBOT with <m>k</m> leaves, meaning that the right child roots a RUBOT with <m>n-k</m> leaves. Since there are <m>c_k</m> possible sub-RUBOTs for the left child and <m>c_{n-k}</m> sub-RUBOTs for the right child, there are a total of <m>c_kc_{n-k}</m> RUBOTs in which the root's left child has <m>k</m> leaves on its sub-RUBOT. We can do this for any <m>k=1,2,\dots,n-1</m>, giving us that
    <me>
        c_n = \sum_{k=1}^{n-1} c_kc_{n-k}.
    </me>
    (This is valid since <m>n\geq 2</m>.)  Since <m>c_0=0</m>, we can actually write this as
    <me>
        c_n = \sum_{k=0}^{n} c_kc_{n-k}.
    </me>
    </p>
    <p>Let's look at the square of the generating function <m>C(x)</m>. By <xref ref="prop_genfunction-product"  />, we have
    <md>
        <mrow>  C^2(x) \amp = c_0^2 + (c_0c_1 + c_1c_0)x + (c_0c_2 +c_1c_1 + c_2c_0)x^2 +
        \cdots</mrow>
        <mrow>  \amp  = 0 + 0 + (c_0c_2 +c_1c_1 + c_2c_0)x^2 + (c_0c_3 +
        c_1c_2+c_2c_1+c_3c_0)x^3 + \cdots.</mrow>
    </md>
    But now we see from our recursion above that the coefficient on <m>x^n</m> in <m>C^2(x)</m> is nothing but <m>c_n</m> for <m>n\geq 2</m>. All we're missing is the <m>x</m> term, so adding it in gives us that
    <me>
        C(x) = x + C^2(x).
    </me>
        Now this is a quadratic equation in <m>C(x)</m>, so we can solve for <m>C(x)</m> and have
        <me>
            C(x) = \frac{1\pm \sqrt{1-4x}}{2} = \frac{1\pm (1-4x)^{1/2}}{2} .
        </me>
        Hence, we can use <xref ref="thm_newton-binomial" text="title" /> to expand <m>C(x)</m>. To do so, we use the following lemma. Its proof is nearly identical to that of <xref ref="l_newbinom"  />, and is thus omitted.
    </p>

    <lemma xml:id="l_half-binomial">
        <statement>
            <p>
                For each <m>k\ge 1</m>,
                <me>
                    \binom{1/2}{k}=\frac{(-1)^{k-1}}{k}\frac{\binom{2k-2}{k-1}}{2^{2k-1}}.
                </me>
            </p>
        </statement>
    </lemma>

    <p>Now we see that
    <md>
        <mrow>  C(x) \amp = \frac{1}{2} \pm \frac{1}{2} \sum_{n=0}^\infty\binom{1/2}{n}
        (-4)^n x^n 
        = \frac{1}{2} \pm \frac{1}{2}\left(1+ \sum_{n=1}^\infty
        \frac{(-1)^{n-1}}{n}\frac{\binom{2n-2}{n-1}}{2^{2n-1}}(-4)^n
        x^n\right)</mrow>
        <mrow>  \amp =
        \frac{1}{2} \pm\frac{1}{2} \mp\sum_{n=1}^\infty \frac{\binom{2n-2}{n-1}}{n} x^n.</mrow>
    </md>
        Since we need <m>c_n\geq 0</m>, we take the <q>minus</q> option from the <q>plus-or-minus</q> in the quadratic formula and thus have the following theorem.
    </p>

    <theorem xml:id="thm_catalan-genfunction">
        <statement>
            <p>The generating function for the number <m>c_n</m> of rooted, unlabeled, binary, ordered trees with <m>n</m> leaves is
            <me>
                C(x) = \frac{1-\sqrt{1-4x}}{2} = \sum_{n=1}^\infty \frac{1}{n}\binom{2n-2}{n-1}x^n.
            </me>
            </p>
        </statement>
    </theorem>

    <p>Notice that <m>c_n</m> is a Catalan number, which we first encountered in <xref ref="ch_strings"  />, where we were counting lattice paths that did not cross the diagonal line <m>y=x</m>. (The coefficient <m>c_n</m> is the Catalan number we called <m>C(n-1)</m> in <xref ref="ch_strings"  />.)
    </p>
</section>
