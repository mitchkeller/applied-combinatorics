<section xml:id="s_graphalgorithms_shortest-paths">
    <title>Dijkstra's Algorithm for Shortest Paths</title>
    <introduction>
        <p>Just as with graphs, it is useful to assign weights to the directed edges of a digraph. Specifically, in this section we consider a pair <m>(\bfG,w)</m> where <m>\GVE</m> is a digraph and <m>w\colon E\rightarrow\nonnegints</m> is a function assigning to each directed edge <m>(x,y)</m> a non-negative weight <m>w(x,y)</m>. However, in this section, we interpret weight as <term>distance</term><idx><h>distance</h></idx> so that <m>w(x,y)</m> is now called the <term>length</term><idx><h>length</h></idx> of the edge <m>(x,y)</m>. If <m>P=(r=u_0,u_1,\dots,u_t=x)</m> is a directed path from <m>r</m> to <m>x</m>, then the <term>length</term> of the path <m>P</m> is just the sum of the lengths of the edges in the path, <m>\sum_{i=0}^{t-1} w(u_iu_{i+1})</m>. The <term>distance</term> from <m>r</m> to <m>x</m> is then defined to be the minimum length of a directed path from <m>r</m> to <m>x</m>. Our goal in this section is to solve the following natural problem, which has many applications:
        </p>

        <problem>
            <statement>
                <p>For each vertex <m>x</m>, find the distance from <m>r</m> to <m>x</m>. Also, find a shortest path from <m>r</m> to <m>x</m>.
                </p>
            </statement>
        </problem>
    </introduction>


    <subsection>
        <title>Description of the Algorithm</title>
        <p>To describe <term>Dijkstra's algorithm</term> in a compact manner, it is useful to extend the definition of the function <m>w</m>. We do this by setting <m>w(x,y)=\infty</m> when <m>x\neq y</m> and <m>(x,y)</m> is not a directed edge of <m>\bfG</m>. In this way, we will treat <m>\infty</m> as if it were a number (although it is not!).<fn>This is not an issue for computer implementation of the algorithm, as instead of using <m>\infty</m>, a value given by the product of the number of vertices and the maximum edge weight may be used to simulate infinity.</fn>
        </p>

        <p>We are now prepared to describe Dijkstra's Algorithm.</p>
        <algorithm xml:id="alg_dijkstra">
            <title>Dijkstra's Algorithm</title>
            <idx><h>Dijkstra's algorithm</h></idx>
            <idx><h>graph</h><h>shortest path in</h></idx>
            <statement>
                <p>Let <m>n=|V|</m>. At Step<nbsp /><m>i</m>, where <m>1\le i\le n</m>, we will have determined:
                  <ol>
                    <li><p>A sequence <m>\sigma=(v_1,v_2,v_3,\dots,v_i)</m> of distinct vertices from <m>\bfG</m> with <m>r=v_1</m>.  These vertices are called <term>permanent vertices</term>, while the remaining vertices will be called <term>temporary vertices</term>.</p></li>
                    <li><p>For each vertex <m>x\in V</m>, we will have determined a number <m>\delta(x)</m> and a path <m>P(x)</m> from <m>r</m> to <m>x</m> of length <m>\delta(x)</m>.</p></li>
                
                  </ol>
                  <dl>
                    <li>
                        <title>Initialization (Step<nbsp />1)</title>
                        <p>Set <m>i=1</m>. Set <m>\delta(r)=0</m> and let <m>P(r)=(r)</m> be the trivial one-point path. Also, set <m>\sigma= (r)</m>. For each <m>x\neq r</m>, set <m>\delta(x)= w(r,x)</m> and <m>P(x)=(r,x)</m>. Let <m>x</m> be a temporary vertex for which <m>\delta(x)</m> is minimum. Set <m>v_2 = x</m>, and update <m>\sigma</m> by appending <m>v_2</m> to the end of it. Increment <m>i</m>.
                        </p>
                    </li>
                    <li>
                        <title>Inductive Step (Step<nbsp /><m>i</m>, <m>i>1</m>)</title>
                        <p>If <m>i\lt n</m>, then for each temporary <m>x</m>, let
                        <me>
                            \delta(x) = \min\{\delta(x), \delta(v_i)+w(v_i,x)\}.
                        </me>
                        If this assignment results in a reduction in the value of <m>\delta(x)</m>, let <m>P(x)</m> be the path obtained by adding <m>x</m> to the end of <m>P(v_i)</m>.
                        </p>
                        <p>Let <m>x</m> be a temporary vertex for which <m>\delta(x)</m> is minimum. Set <m>v_{i+1}=x</m>, and update <m>\sigma</m> by appending <m>v_{i+1}</m> to it. Increment <m>i</m>.
                        </p>
                    </li>
                
                  </dl>
                </p>
            </statement>
        </algorithm>
    </subsection>


    <subsection>
        <title>Example of Dijkstra's Algorithm</title>
        <p>Before establishing why Dijkstra's algorithm works, it may be helpful to see an example of how it works. To do this, consider the digraph <m>\bfG</m> shown in <xref ref="fig_graphalgorithms_dijkstragraph"  />. For visual clarity, we have chosen a digraph which is an <term>oriented graph</term>, <ie />, for each distinct pair <m>x,y</m> of vertices, the graph contains at most one of the two possible directed edges <m>(x,y)</m> and <m>(y,x)</m>.
        </p>
        <figure xml:id="fig_graphalgorithms_dijkstragraph" >
            <caption>A digraph with edge lengths</caption>
            <image width="85%" source="dijkstragraph" />
        </figure>
        <p>
            Suppose that the root vertex <m>r</m> is the vertex labeled<nbsp /><m>a</m>. The initialization step of Dijkstra's algorithm then results in the following values for <m>\delta</m> and <m>P</m>:
        </p>

        <paragraphs>
            <title>Step 1. Initialization</title>
            <p>
                <md>
                    <mrow>\sigma\amp=(a)\amp\amp</mrow>
                    <mrow>\delta(a)\amp=0; \amp P(a)\amp=(a)</mrow>
                    <mrow>\delta(b) \amp=\infty; \amp P(b)\amp=(a,b)</mrow>
                    <mrow>\delta(c) \amp=47; \amp P(c)\amp=(a,c)</mrow>
                    <mrow>\delta(d) \amp=\infty; \amp P(d)\amp=(a,d)</mrow>
                    <mrow>\delta(e) \amp=70; \amp P(e)\amp=(a,e)</mrow>
                    <mrow>\delta(f) \amp=24; \amp P(f)\amp=(a,f)</mrow>
                    <mrow>\delta(g) \amp=\infty; \amp P(g)\amp=(a,g)</mrow>
                    <mrow>\delta(h) \amp=\infty; \amp P(h)\amp=(a,h)</mrow>
                </md>
            </p>
            <p>Before finishing Step 1, the algorithm identifies vertex<nbsp /><m>f</m> as closest to <m>a</m> and appends it to <m>\sigma</m>, making <m>a</m> permanent. When entering Step 2, Dijkstra's algorithm attempts to find shorter paths from <m>a</m> to each of the temporary vertices by going through <m>f</m>. We call this process <q>scanning from vertex<nbsp /><m>f</m>.</q> In this scan, the path to vertex<nbsp /><m>d</m> is updated, since <m>\delta(f) + w(f,d)=24+120=144\lt \infty=w(a,d)</m>.
            </p>
        </paragraphs>
        <paragraphs>
            <title>Step 2.  Scan from vertex<nbsp /><m>f</m></title>

            <p>
                <md>
                    <mrow>\sigma\amp=(a,f)\amp\amp</mrow>
                    <mrow>\delta(a)\amp=0; \amp P(a)\amp=(a)</mrow>
                    <mrow>\delta(b)\amp=\infty; \amp P(b)\amp=(a,b)</mrow>
                    <mrow>\delta(c)\amp=47; \amp P(c)\amp=(a,c)</mrow>
                    <mrow>\delta(d)\amp=144 = 24 + 120 = \delta(f)+w(f,d); \amp P(d)\amp=(a,f,d)\quad\text{updated} </mrow>
                    <mrow>\delta(e)\amp=70; \amp P(e)\amp=(a,e)</mrow>
                    <mrow>\delta(f)\amp=24; \amp P(f)\amp=(a,f)</mrow>
                    <mrow>\delta(g)\amp=\infty; \amp P(g)\amp=(a,f)</mrow>
                    <mrow>\delta(h)\amp=\infty; \amp P(h)\amp=(a,h)</mrow>
                </md>
            </p>

            <p>Before proceeding to the next step, vertex<nbsp /><m>c</m> is made permanent by making it <m>v_3</m>. In Step 3, therefore, the scan is from vertex <m>c</m>. Vertices <m>b</m>, <m>d</m>, and <m>g</m> have their paths updated. However, although <m>\delta(c) + w(c,e) = 47+23=70=\delta(e)</m>, we do not change <m>P(e)</m> since <m>\delta(e)</m> is not <em>decreased</em> by routing <m>P(e)</m> through <m>c</m>.
            </p>
        </paragraphs>
        <paragraphs>
            <title>Step 3.  Scan from vertex<nbsp /><m>c</m></title>
            <p>
                <md>
                    <mrow>\sigma\amp=(a,f,c)</mrow>
                    <mrow>\delta(a)\amp=0; \amp P(a)\amp=(a)</mrow>
                    <mrow>\delta(b)\amp=102=47+55= \delta(c)+w(c,b); \amp P(b)\amp=(a,c,b)\quad\text{updated}</mrow>
                    <mrow>\delta(c)\amp=47; \amp P(c)\amp=(a,c)</mrow>
                    <mrow>\delta(d)\amp=135=47+88 = \delta(c)+w(c,d); \amp P(d)\amp=(a,c,d)\quad\text{updated} </mrow>
                    <mrow>\delta(e)\amp=70; \amp P(e)\amp=(a,e)</mrow>
                    <mrow>\delta(f)\amp=24; \amp P(f)\amp=(a,f)</mrow>
                    <mrow>\delta(g)\amp=113=47+66= \delta(c)+w(c,g); \amp P(g)\amp=(a,c,g)\quad\text{updated} </mrow>
                    <mrow>\delta(h)\amp=\infty; \amp P(h)\amp=(a,h)</mrow>
                </md>
            </p>

            <p>Now vertex <m>e</m> is made permanent.
            </p>
        </paragraphs>
        <paragraphs>
            <title>Step 4.  Scan from vertex<nbsp /><m>e</m></title>
            <p>
                <md>
                    <mrow>\sigma\amp=(a,f,c,e)</mrow>
                    <mrow>\delta(a)\amp=0; \amp P(a)\amp=(a)</mrow>
                    <mrow>\delta(b)\amp=101=70+31= \delta(e)+w(e,b); \amp P(b)\amp=(a,e,b)\quad\text{updated}</mrow>
                    <mrow>\delta(c)\amp=47; \amp P(c)\amp=(a,c)</mrow>
                    <mrow>\delta(d)\amp=135; \amp P(d)\amp=(a,c,d)</mrow>
                    <mrow>\delta(e)\amp=70; \amp P(e)\amp=(a,e)</mrow>
                    <mrow>\delta(f)\amp=24; \amp P(f)\amp=(a,f)</mrow>
                    <mrow>\delta(g)\amp=112=70+42= \delta(e)+w(e,g); \amp P(g)\amp=(a,e,g)\quad\text{updated}</mrow>
                    <mrow>\delta(h)\amp=\infty; \amp P(h)\amp=(a,h)</mrow>
                </md>
            </p>

            <p>Now vertex <m>b</m> is made permanent.
            </p>
        </paragraphs>
        <paragraphs>
            <title>Step 5.  Scan from vertex<nbsp /><m>b</m></title>

            <p>
                <md>
                    <mrow>\sigma\amp=(a,f,c,e,b)</mrow>
                    <mrow>\delta(a)\amp=0; \amp P(a)\amp=(a)</mrow>
                    <mrow>\delta(b)\amp=101; \amp P(b)\amp=(a,e,b)</mrow>
                    <mrow>\delta(c)\amp=47; \amp P(c)\amp=(a,c)</mrow>
                    <mrow>\delta(d)\amp= 132 = 101+ 31= \delta(b)+w(b,d); \amp P(d)\amp=(a,e,b,d)\quad\text{updated} </mrow>
                    <mrow>\delta(e)\amp= 70; \amp P(e)\amp=(a,e)</mrow>
                    <mrow>\delta(f)\amp= 24; \amp P(f)\amp=(a,f)</mrow>
                    <mrow>\delta(g)\amp=112; \amp P(g)\amp=(a,e,g)</mrow>
                    <mrow>\delta(h)\amp=180 = 101+79=\delta(b)+w(b,h); \amp P(h)\amp=(a,e,b,h)\quad\text{updated} </mrow>
                </md>
            </p>
            <p>Now vertex <m>g</m> is made permanent.
            </p>
        </paragraphs>
        <paragraphs>
            <title>Step 6.  Scan from vertex<nbsp /><m>g</m></title>

            <p>
                <md>
                    <mrow>\sigma\amp=(a,f,c,e,b,g)</mrow>
                    <mrow>\delta(a)\amp=0; \amp P(a)\amp=(a)</mrow>
                    <mrow>\delta(b)\amp=101; \amp P(b)\amp=(a,e,b)</mrow>
                    <mrow>\delta(c)\amp=47; \amp P(c)\amp=(a,c)</mrow>
                    <mrow>\delta(d)\amp= 132; \amp P(d)\amp=(a,e,b,d)</mrow>
                    <mrow>\delta(e)\amp=70; \amp P(e)\amp=(a,e)</mrow>
                    <mrow>\delta(f)\amp=24; \amp P(f)\amp=(a,f)</mrow>
                    <mrow>\delta(g)\amp=112; \amp P(g)\amp=(a,e,g)</mrow>
                    <mrow>\delta(h)\amp=178 = 112+66=\delta(g)+w(g,h); \amp P(h)\amp=(a,e,g,h)\quad\text{updated}</mrow>
                </md>
            </p>

            <p>Now vertex <m>d</m> is made permanent.
            </p>
        </paragraphs>
        <paragraphs>
            <title>Step 7.  Scan from vertex<nbsp /><m>d</m></title>

            <p>
                <md>
                    <mrow>\sigma\amp=(a,f,c,e,b,g,d)</mrow>
                    <mrow>\delta(a)\amp=0; \amp P(a)\amp=(a)</mrow>
                    <mrow>\delta(b)\amp=101; \amp P(b)\amp=(a,e,b)</mrow>
                    <mrow>\delta(c)\amp=47; \amp P(c)\amp=(a,c)</mrow>
                    <mrow>\delta(d)\amp= 132; \amp P(d)\amp=(a,e,b,d)</mrow>
                    <mrow>\delta(e)\amp=70; \amp P(e)\amp=(a,e)</mrow>
                    <mrow>\delta(f)\amp=24; \amp P(f)\amp=(a,f)</mrow>
                    <mrow>\delta(g)\amp=112; \amp P(g)\amp=(a,e,g)</mrow>
                    <mrow>\delta(h)\amp=161 = 132+29=\delta(d)+w(d,h); \amp P(h)\amp=(a,e,b,d,h)\quad\text{updated}</mrow>
                </md>
            </p>

            <p>Now vertex <m>h</m> is made permanent. Since this is the last vertex, the algorithm halts and returns the following:
            </p>
        </paragraphs>
        <paragraphs>
            <title>Final Results of Dijkstra's Algorithm</title>

            <p>
                <md>
                    <mrow>\sigma\amp=(a,f,c,e,b,g,d,h)</mrow>
                    <mrow>\delta(a)\amp=0; \amp P(a)\amp=(a)</mrow>
                    <mrow>\delta(b)\amp=101; \amp P(b)\amp=(a,e,b)</mrow>
                    <mrow>\delta(c)\amp=47; \amp P(c)\amp=(a,c)</mrow>
                    <mrow>\delta(d)\amp= 132; \amp P(d)\amp=(a,e,b,d)</mrow>
                    <mrow>\delta(e)\amp=70; \amp P(e)\amp=(a,e)</mrow>
                    <mrow>\delta(f)\amp=24; \amp P(f)\amp=(a,f)</mrow>
                    <mrow>\delta(g)\amp=112; \amp P(g)\amp=(a,e,g)</mrow>
                    <mrow>\delta(h)\amp=161; \amp P(h)\amp=(a,e,b,d,h)</mrow>
                </md>
            </p>
        </paragraphs>
    </subsection>


    <subsection>
        <title>The Correctness of Dijkstra's Algorithm</title>
        <p>Now that we've illustrated Dijkstra's algorithm, it's time to prove that it actually does what we claimed it does: find the distance from the root vertex to each of the other vertices and a path of that length. To do this, we first state two elementary propositions. The first is about shortest paths in general, while the second is specific to the sequence of permanent vertices produced by Dijkstra's algorithm.
        </p>

        <proposition>
            <statement>
                <p>Let <m>x</m> be a vertex and let <m>P=(r=u_0,u_1,\dots,u_t=x)</m> be a shortest path from <m>r</m> to <m>x</m>. Then for every integer <m>j</m> with <m>0\lt j\lt t</m>, <m>(u_0,u_1,\dots,u_j)</m> is a shortest path from <m>r</m> to <m>u_j</m> and <m>(u_j,u_{j+1},\dots,u_t)</m> is a shortest path from <m>u_j</m> to <m>u_t</m>
                </p>
            </statement>
        </proposition>

        <proposition>
            <statement>
                <p>When the algorithm halts, let <m>\sigma=(v_1,v_2,v_3,\dots,v_n)</m>.  Then
                <me>
                    \delta(v_1)\le \delta(v_2)\le\dots \le \delta(v_n).
                </me>
                </p>
            </statement>
        </proposition>

        <p>We are now ready to prove the correctness of the algorithm. The proof we give will be inductive, but the induction will have nothing to do with the total number of vertices in the digraph or the step number the algorithm is in.
        </p>

        <theorem>
            <statement>
                <p>Dijkstra's algorithm yields shortest paths for every vertex <m>x</m> in <m>\bfG</m>. That is, when Dijkstra's algorithm terminates, for each <m>x\in V</m>, the value <m>\delta(x)</m> is the distance from <m>r</m> to <m>x</m> and <m>P(x)</m> is a shortest path from <m>r</m> to <m>x</m>.
                </p>
            </statement>

            <proof>
                <p>The theorem holds trivially when <m>x=r</m>. So we consider the case where <m>x\neq r</m>. We argue that <m>\delta(x)</m> is the distance from <m>r</m> to <m>x</m> and that <m>P(x)</m> is a shortest path from <m>r</m> to <m>x</m> by induction on the minimum number <m>k</m> of edges in a shortest path from <m>r</m> to <m>x</m>. When <m>k=1</m>, the edge <m>(r,x)</m> is a shortest path from <m>r</m> to <m>x</m>. Since <m>v_1=r</m>, we will set <m>\delta(x)=w(r,x)</m> and <m>P(x)=(r,x)</m> at Step<nbsp />1.
                </p>

                <p>Now fix a positive integer <m>k</m>. Assume that if the minimum number of edges in a shortest path from <m>r</m> to <m>x</m> is at most <m>k</m>, then <m>\delta(x)</m> is the distance from <m>r</m> to <m>x</m> and <m>P(x)</m> is a shortest path from <m>r</m> to <m>x</m>. Let <m>x</m> be a vertex for which the minimum number of edges in a shortest path from <m>r</m> to <m>x</m> is <m>k+1</m>. Fix a shortest path <m>P=(u_0,u_1,u_2,\dots,u_{k+1})</m> from <m>r=u_0</m> to <m>x=u_{k+1}</m>. Then <m>Q=(u_0,u_1,\dots,u_k)</m> is a shortest path from <m>r</m> to <m>u_k</m>. (See <xref ref="fig_graphalgorithms_dijkstra-proof"  />.)
                </p>
                <figure xml:id="fig_graphalgorithms_dijkstra-proof" >
                    <caption>Shortest paths</caption>
                    <image width="75%">
                        <latex-image><![CDATA[\begin{overpic}[width=0.6\textwidth]{images/dijkstra-proof}
                        \put(3,13){\(r\)}
                        \put(33,25){\(Q\)}
                        \put(58,3){\(P(u_k)\)}
                        \put(73,28){\(u_k\)}
                        \put(83,25){\(P\)}
                        \put(93,21){\(x\)}
                        \end{overpic}]]></latex-image>
                    </image>

                </figure>
                <p>By the inductive hypothesis, <m>\delta(u_k)</m> is the distance from <m>r</m> to <m>u_k</m>, and <m>P(u_k)</m> is a shortest path from <m>r</m> to <m>u_k</m>. Note that <m>P(u_k)</m> need not be the same as path <m>Q</m>, as we suggest in <xref ref="fig_graphalgorithms_dijkstra-proof"  />. However, if distinct, the two paths will have the same length, namely <m>\delta(u_k)</m>.  Also, the distance from <m>r</m> to <m>x</m> is <m>\delta(u_k)+w(u_k,x)\ge \delta(u_k)</m> since <m>P</m> is a shortest path from <m>r</m> to <m>x</m> and <m>w(u_k,x)\geq 0</m>.
                </p>

                <p>Let <m>i</m> and <m>j</m> be the unique integers for which <m>u_k=v_i</m> and <m>x=v_j</m>. If <m>j \lt i</m>, then
                <me>
                    \delta(x)= \delta(v_j)\le \delta(v_i)= \delta(u_k)\le
                    \delta(u_k)+w(u_k).
                </me>
                Therefore the algorithm has found a path <m>P(x)</m> from <m>r</m> to <m>x</m> having length <m>\delta(x)</m> which is at most the distance from <m>r</m> to <m>x</m>. Clearly, this implies that <m>\delta(x)</m> is the distance from <m>r</m> to <m>x</m> and that <m>P(x)</m> is a shortest path.
                </p>

                <p>On the other hand, if <m>j>i</m>, then the inductive step at Step<nbsp /><m>i</m> results in
                <me>
                    \delta(x)\le \delta(v_i)+w(v_i,y)=\delta(u_k)+w(u_k,x).
                </me>
                As before, this implies that <m>\delta(x)</m> is the distance from <m>r</m> to <m>x</m> and that <m>P(x)</m> is a shortest path.
                </p>
            </proof>
        </theorem>
    </subsection>

</section>
