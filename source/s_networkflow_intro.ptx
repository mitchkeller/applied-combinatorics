<section xml:id="s_networkflow_intro">
    <title>Basic Notation and Terminology</title>
    <p>A directed graph in which for each pair of vertices <m>x,y</m> at most one of the directed edges <m>(x,y)</m> and <m>(y,x)</m> between them is present is called an <term>oriented graph</term><idx><h>graph</h><h>oriented</h></idx>. The basic setup for a network flow problem begins with an oriented graph <m>\bfG</m>, called a <term>network</term><idx><h>network</h></idx>, in which we have two special vertices called the <term>source</term><idx><h>source</h></idx> and the <term>sink</term><idx><h>sink</h></idx>. We use the letter <m>S</m> to denote the source, while the letter <m>T</m> is used to denote the sink (terminus). All edges incident with the source are oriented away from the source, while all edges incident with the sink are oriented with the sink. Furthermore, on each edge, we have a non-negative <term>capacity</term><idx><h>capacity</h><h>of an edge</h></idx>, which functions as a constraint on how much can be transmitted via the edge. The capacity of the edge <m>e=(x,y)</m> is denoted <m>c(e)</m> or by <m>c(x,y)</m>. In a computer program, the nodes of a network may be identified with integer keys, but in this text, we will typically use letters in labeling the nodes of a network. This helps to distinguish nodes from capacities in diagrams of networks. We illustrate a network in <xref ref="fig_networkflow_network"  />. The numbers associated with the edges are their capacities, so, for instance, <m>c(E,B)=24</m> and <m>c(A,T)=56</m>.
    </p>
    <figure xml:id="fig_networkflow_network" >
        <caption>A Network</caption>
        <image width="65%" source="webfig-31a" />
    </figure>
    <p>A <term>flow</term><idx><h>flow</h></idx><idx><h>network flow</h></idx> <m>\phi</m> in a network is a function which assigns to each directed edge <m>e=(x,y)</m> a non-negative value <m>\phi(e)=\phi(x,y)\leq c(x,y)</m> so that the following <term>conservation laws</term> hold:
                  <ol>
        <li><idx><h>conservation law</h></idx><p><m>\sum_{x} \phi(S,x)= \sum_{x} \phi(x,T)</m>, <ie />, the amount leaving
        the source is equal to the amount arriving at the sink.  This quantity
        is called the <term>value</term><idx><h>flow</h><h>value of</h></idx> of the flow <m>\phi</m>.</p></li>
        <li><idx><h>conservation law</h></idx> <p>For every vertex <m>y</m> which is neither the source nor the
        sink the amount leaving <m>y</m> 
        is equal to the amount entering <m>y</m>. That is, <m>\sum_{x}\phi(x,y)= \sum_{x}\phi(y,x)</m>.</p></li>
    
                  </ol>
                </p>

    <p>We illustrate a flow in a network in <xref ref="fig_networkflow_netflow"  />.
    </p>
    <figure xml:id="fig_networkflow_netflow" >
        <caption>A Network Flow</caption>
        <image width="65%" source="webfig-31b" />
    </figure>
    <p>In this figure, the numbers associated with each edge are its capacity and the amount of flow that <m>\phi</m> places on that edge. For example, the edge <m>(E,D)</m> has capacity <m>20</m> and currently carries a flow of <m>8</m>. (Since <m>\phi(x,y)\leq c(x,y)</m>, it is always easy to determine which number is the capacity and which is the flow.) The value of this flow is <m>30 = \phi(S,F)+\phi(S,B)+\phi(S,E)=\phi(A,T)+\phi(C,T)</m>. To see that the second conservation law holds at, for example, vertex <m>B</m>, note that the flow into <m>B</m> is <m>\phi(S,B)+\phi(E,B)+\phi(D,B) = 20</m> and the flow out of <m>B</m> is <m>\phi(B,F)+\phi(B,A)+\phi(B,C)=20</m>.
    </p>
    <p>Given a network, it is very easy to find a flow. We simply assign <m>\phi(e)=0</m> for every edge <m>e</m>. It is very easy to <em>underestimate</em> the importance of this observation, actually. Network flow problems are a special case of a more general class of optimization problems known as <term>linear programs</term>, and in general, it may be very difficult to find a feasible solution to a linear programming problem. In fact, conceptually, finding a feasible solution<mdash /><em>any</em> solution<mdash />is just as hard as finding an <em>optimal</em> solution.
        </p>
</section>
