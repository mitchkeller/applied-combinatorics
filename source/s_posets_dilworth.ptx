<section xml:id="s_posets_dilworth">
    <title>Dilworth's Chain Covering Theorem and its Dual</title>


    <introduction>
        <p>In this section, we prove the following theorem of R.P. Dilworth, which is truly one of the classic results of combinatorial mathematics.
        </p>

        <theorem xml:id="thm_dilworth">
            <title>Dilworth's Theorem</title>
            <idx><h>Dilworth's theorem</h></idx>
            <statement>
                <p>If <m>\PXP</m> is a poset and <m>\width(P)=w</m>, then there exists a partition <m>X=C_1\cup C_2\cup\dots \cup C_w</m>, where <m>C_i</m> is a chain for <m>i=1,2,\dots,w</m>. Furthermore, there is no chain partition into fewer chains.
                </p>
            </statement>
        </theorem>

        <p>Before proceeding with the proof of Dilworth's theorem in <xref  ref="ss_posets_dilworth_proof" />, we pause to discuss the dual version for partitions into antichains, as it is even easier to prove.
        </p>

        <theorem xml:id="thm_dualdilworth">
            <title>Dual of Dilworth's Theorem</title>
            <idx><h>Dilworth's theorem</h><h>dual of</h></idx>
            <statement>
                <p>If <m>\PXP</m> is a poset and <m>\height(P)=h</m>, then there exists a partition <m>X=A_1\cup A_2\cup\dots\cup A_h</m>, where <m>A_i</m> is an antichain for <m>i=1,2,\dots,h</m>. Furthermore, there is no partition using fewer antichains.
                </p>
            </statement>
            <proof>
                <p>For each <m>x\in X</m>, let <m>\height(x)</m> be the largest integer <m>t</m> for which there exists a chain
                <me>
                    x_1\lt x_2\lt \dots \lt  x_t
                </me>
                with <m>x=x_t</m>.  Evidently, <m>\height(x)\le h</m> for all <m>x\in X</m>. Then for each <m>i=1,2,\dots,h</m>, let <m>A_i=\{x\in X:\height(x)=i\}</m>. It is easy to see that each <m>A_i</m> is an antichain, as if <m>x,y\in A_i</m> are such that <m>x\lt y</m>, then there is a chain <m>x_1\lt x_2\lt \cdots\lt x_i=x \lt x_{i+i}=y</m>, so <m>\height(y)\ge i+1</m>. Since <m>\height(P)=h</m>, there is a maximum chain <m>C=\{x_1,x_2,\dots,x_h\}</m>. If it were possible to partition <m>\bfP</m> into <m>t\lt h</m> antichains, then by the Pigeon Hole Principle, one of the antichains would contain two points from <m>C</m>, but this is not possible.
                </p>
            </proof>
        </theorem>

        <p>When <m>\PXP</m> is a poset, a point <m>x\in X</m> with <m>\height(x)=1</m> is called a <term>minimal point</term><idx><h>minimal</h><h>point of a poset</h></idx> of <m>\bfP</m>. We denote the set of all minimal points of a poset <m>\PXP</m> by <m>\min(X,P)</m>.<fn>Since we use the notation <m>\bfP= (X,P)</m> for a poset, the set of minimal elements can be denoted by <m>\min(\bfP)</m> or <m>\min(X,P)</m>. This convention will be used for all set valued and integer valued functions of posets.</fn>
        </p>

        <p>The argument given for the proof of <xref ref="thm_dualdilworth"  /> yields an efficient algorithm, one that is defined recursively. Set <m>\bfP_0= \bfP</m>. If <m>\bfP_i</m> has been defined and <m>\bfP_i\neq \emptyset</m>, let <m>A_i=\min(\bfP_i)</m> and then let <m>\bfP_{i+1}</m> denote the subposet remaining when <m>A_i</m> is removed from <m>\bfP_i</m>.
        </p>

        <p>In <xref ref="fig_height5"  />, we illustrate the antichain partition provided by this algorithm for the <m>17</m> point poset from <xref ref="fig_17ptposet"  />.  The darkened points form a chain of size<nbsp /><m>5</m>.
        </p>
        <figure xml:id="fig_height5" >
            <caption>A Poset of Height 5</caption>
            <image width="70%" source="height5" />
        </figure>
        <remark>
            <p>Alice claims that it is very easy to find the set of minimal elements of a poset. Do you agree?
            </p>
        </remark>
        <p>Dually, we can speak of the set <m>\max(\bfP)</m> of <term>maximal points</term><idx><h>maximal</h><h>points of a poset</h></idx> of <m>\bfP</m>. We can also partition <m>\bfP</m> into <m>\height(\bfP)</m> antichains by recursively removing the set of maximal points.
        </p>

        <p>We pause to remark that when <m>\PXP</m> is a poset, the set of all chains of <m>\bfP</m> is itself partially ordered by inclusion. So it is natural to say that a chain <m>C</m> is <term>maximal</term><idx><h>maximal</h><h>chain</h></idx> when there is no chain <m>C'</m> containing <m>C</m> as a proper subset. Also, a chain <m>C</m> is <term>maximum</term><idx><h>maximum</h><h>chain</h></idx> when there is no chain <m>C'</m> with <m>|C|\lt |C'|</m>. Of course, a maximum chain is maximal, but maximal chains need not be maximum.
        </p>

        <p><term>Maximal antichains</term> and <term>maximum antichains</term> are defined analogously.<idx><h>maximal</h><h>antichain</h></idx><idx><h>maximum</h><h>antichain</h></idx>
        </p>

        <p>With this terminology, the thrust of <xref ref="thm_dualdilworth"  /> is that it is easy to find the height <m>h</m> of a poset as well as a maximum chain <m>C</m> consisting of <m>h</m> points from <m>\bfP</m>. Of course, we also get a handy partition of the poset into <m>h</m> antichains.
        </p>
    </introduction>


    <subsection xml:id="ss_posets_dilworth_proof">
        <title>Proof of Dilworth's Theorem</title>
        <p>The argument for Dilworth's theorem is simplified by the following notation. When <m>\PXP</m> is a poset and <m>x\in X</m>, we let <m>D(x)=\{y\in X:y\lt x \text{ in } P\}</m>; <m>D[x]=\{y\in X:y\le x\text{ in } P\}</m>; <m>U(x)=\{y\in X:y>x \text{ in } P\}</m>; <m>U[x]=\{y\in X:y\ge x\}</m>; and <m>I(x)=\{y\in X-\{x\}:x\Vert y \text{ in } P\}</m>. When <m>S\subseteq X</m>, we let <m>D(S)= \{y\in X:y\lt x</m> in <m>P</m>, for some <m>x\in S\}</m> and <m>D[S]=S\cup D(S)</m>. The subsets <m>U(S)</m> and <m>U[S]</m> are defined dually. We call <m>D(x)</m>, <m>D[x]</m>, <m>D(S)</m>, and <m>D[S]</m> <term>down sets</term>, while <m>U(x)</m>, <m>U[x]</m>, <m>U(S)</m>, and <m>U[S]</m> are <term>up sets</term>.<idx><h>down set</h></idx><idx><h>up set</h></idx><notation><usage><m>D(x), D(S),D[x], D[S]</m></usage><description>down set</description></notation><notation><usage><m>U(x), U(S), U[x], U[S]</m></usage><description>up set</description></notation> Note that when <m>A</m> is a maximal antichain in <m>\bfP</m>, the ground set <m>X</m> can be partitioned into pairwise disjoint sets as <m>X=A\cup D(A)\cup U(A)</m>.
        </p>

        <p>We are now ready for the proof. Let <m>\PXP</m> be a poset and let <m>w</m> denote the width of <m>\bfP</m>.  As in<nbsp /><xref ref="thm_dualdilworth"  />, the Pigeon Hole Principle implies that we require at least <m>w</m> chains in any chain partition of <m>\bfP</m>. To prove that <m>w</m> suffice, we proceed by induction on <m>|X|</m>, the result being trivial if <m>|X|=1</m>. Assume validity for all posets with <m>|X|\le k</m> and suppose that <m>\PXP</m> is a poset with <m>|X|=k+1</m>. Without loss of generality, <m>w>1</m>; otherwise, the trivial partition <m>X=C_1</m> satisfies the conclusion of the theorem. Furthermore, we observe that if <m>C</m> is a (nonempty) chain in <m>(X,P)</m>, then we may assume that the subposet <m>(X-C,P(X-C))</m> also has width <m>w</m>. To see this, observe that the theorem holds for the subposet, so that if <m>\width(X-C,P(X-C))=w'\lt w</m>, then we can partition <m>X-C</m> as <m>X-C=C_1\cup C_2\cup\dots\cup C_{w'}</m>, so that <m>X=C\cup C_1\cup\dots\cup C_{w'}</m> is a partition into <m>w'+1</m> chains. Since <m>w'\lt w</m>, we know <m>w'+1\le w</m>, so we have a partition of <m>X</m> into at most <m>w</m> chains. Since any partition of <m>X</m> into chains must use at least <m>w</m> chains, this is exactly the partition we seek.
        </p>

        <p>Choose a maximal point <m>x</m> and a minimal point <m>y</m> with <m>y\le x</m> in <m>P</m>. Then let <m>C</m> be the chain containing only the points <m>x</m> and <m>y</m>. Note that <m>C</m> contains either one or two elements depending on whether <m>x</m> and <m>y</m> are distinct.
        </p>

        <p>Let <m>Y=X-C</m> and <m>Q=P(Y)</m> and let <m>A</m> be a <m>w</m>-element antichain in the subposet <m>(Y,Q)</m>. In the partition <m>X=A\cup D(A)\cup U(A)</m>, the fact that <m>y</m> is a minimal point while <m>A</m> is a maximal antichain imply that <m>y\in D(A)</m>. Similarly, <m>x\in U(A)</m>. In particular, this shows that <m>x</m> and <m>y</m> are distinct.
        </p>

        <p>Label the elements of <m>A</m> as <m>\{a_1,a_2,\dots,a_w\}</m>. Note that <m>U[A]\ne X</m> since <m>y\notin U[A]</m>, and <m>D[A]\ne X</m> since <m>x\notin D[A]</m>. Therefore, we may apply the inductive hypothesis to the subposets of <m>\bfP</m> determined by <m>D[A]</m> and <m>U[A]</m>, respectively, and partition each of these two subposets into <m>w</m> chains:
        <me>
            U[A]= C_1\cup C_2\cup\dots\cup C_w\quad\text{and} \quad
            D[A]=D_1\cup D_2\cup\dots\cup D_w.
        </me>
        Without loss of generality, we may assume these chains have been labeled so that <m>a_i\in C_i\cap D_i</m> for each <m>i=1,2,\dots,w</m>.  However, this implies that
        <me>
            X=(C_1\cup D_1)\cup (C_2\cup D_2)\cup\dots\cup(C_w\cup D_w)
        </me>
        is the desired partition which in turn completes the proof.
        </p>

        <p>In <xref ref="fig_width7"  />, we illustrate Dilworth's chain covering theorem for the poset first introduced in <xref ref="fig_17ptposet"  />.  The darkened points form a <m>7</m>-element antichain, while the labels provide a partition into<nbsp /><m>7</m> chains.
        </p>
        <figure xml:id="fig_width7" >
            <caption>A Poset of Width 7</caption>
            <image width="70%" source="width7" />
        </figure>
        <remark>
            <p>The ever alert Alice notes that the proof given above for Dilworth's theorem does not seem to provide an efficient algorithm for finding the width<nbsp /><m>w</m> of a poset, much less a partition of the poset into <m>w</m> chains. Bob has yet to figure out why listing all the subsets of <m>X</m> is a bad idea. Carlos is sitting quietly listening to their bickering, but finally, he says that a skilled programmer can devise an algorithm from the proof. Students are encouraged to discuss this dilemma<mdash />but rest assured that we will return to this issue later in the text.
            </p>
        </remark>
    </subsection>

</section>
