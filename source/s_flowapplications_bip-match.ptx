<section xml:id="s_flowapplications_bip-match">
    <title>Matchings in Bipartite Graphs</title>
    <p>Recall that a bipartite graph<idx><h>graph</h><h>bipartite</h><h>matching in</h></idx> <m>\GVE</m> is one in which the vertices can be properly colored using only two colors. It is clear that such a coloring then partitions <m>V</m> into two independent sets <m>V_1</m> and <m>V_2</m>, and so all the edges are between <m>V_1</m> and <m>V_2</m>. Bipartite graphs have many useful applications, particularly when we have two distinct types of objects and a relationship that makes sense only between objects of distinct types. For example, suppose that you have a set of workers and a set of jobs for the workers to do. We can consider the workers as the set <m>V_1</m> and the jobs as <m>V_2</m> and add an edge from worker <m>w\in V_1</m> to job <m>j\in V_2</m> if and only if <m>w</m> is qualified to do <m>j</m>.
    </p>

    <p>For example, the graph in <xref ref="fig_flowapplications_bip_graph"  /> is a bipartite graph in which we've drawn <m>V_1</m> on the bottom and <m>V_2</m> on the top.
    </p>
    <figure xml:id="fig_flowapplications_bip_graph" >
        <caption>A bipartite graph</caption>
        <image width="40%" source="bipartite_graph" />
    </figure>
    <p>If <m>\GVE</m> is a graph, a set <m>M\subseteq E</m> is a <term>matching</term><idx><h>matching</h></idx> in <m>\bfG</m> if no two edges of <m>M</m> share an endpoint. If <m>v</m> is a vertex that is the endpoint of an edge in <m>M</m>, we say that <m>M</m> saturates <m>v</m> or <m>v</m> is saturated by <m>M</m>. When <m>\bfG</m> is bipartite with <m>V=V_1\cup V_2</m>, a matching is then a way to pair vertices in <m>V_1</m> with vertices in <m>V_2</m> so that no vertex is paired with more than one other vertex. We're usually interested in finding a <term>maximum matching</term><idx><h>matching</h><h>maximum</h></idx>, which is a matching that contains the largest number of edges possible, and in bipartite graphs we usually fix the sets <m>V_1</m> and <m>V_2</m> and seek a maximum matching from <m>V_1</m> to <m>V_2</m>. In our workers and jobs example, the matching problem thus becomes trying to find an assignment of workers to jobs such that
    <ol label="i"><li>each worker is assigned to a job for which he is qualified
    (meaning there's an edge),</li>
    <li>each worker is assigned to at most one job, and</li>
    <li>each job is assigned at most one worker.</li>
    </ol>
</p>
    <p>As an example, in <xref ref="fig_flowapplications_bip_match"  />, the thick edges form a matching from <m>V_1</m> to <m>V_2</m>. Suppose that you're the manager of these workers (on the bottom) and must assign them to the jobs (on the top). Are you really making the best use of your resources by only putting four of six workers to work? There are no trivial ways to improve the number of busy workers, as the two without responsibilities right now cannot do any of the jobs that are unassigned. Perhaps there's a more efficient assignment that can be made by redoing some of the assignments, however. If there is, how should you go about finding it? If there is not, how would you justify to your boss that there's no better assignment of workers to jobs?
    </p>
    <figure xml:id="fig_flowapplications_bip_match" >
        <caption>A matching in a bipartite graph</caption>
        <image width="40%" source="bipartite_graph_part_match" />
    </figure>
    <p>At the end of the section, we'll briefly look at a theorem on matchings in bipartite graphs that tells us precisely when an assignment of workers to jobs exists that ensures each worker has a job. First, however, we want to see how network flows can be used to find maximum matchings in bipartite graphs. The algorithm we give, while decent, is not the most efficient algorithm known for this problem. Therefore, it is not likely to be the one used in practice. However, it is a nice example of how network flows can be used to solve a combinatorial problem. The network that we use is formed from a bipartite graph <m>\bfG</m> by placing an edge from the source <m>S</m> to each vertex of <m>V_1</m> and an edge from each vertex of <m>V_2</m> to the sink <m>T</m>. The edges between <m>V_1</m> and <m>V_2</m> are oriented from <m>V_1</m> to <m>V_2</m>, and <em>every</em> edge is given capacity <m>1</m>. <xref ref="fig_flowapplications_bipmatch_network"  /> contains the network corresponding to our graph from <xref ref="fig_flowapplications_bip_graph"  />. Edges in this network are all oriented from bottom to top and all edges have capacity <m>1</m>. The vertices in <m>V_1</m> are <m>x_1,\dots,x_6</m> in order from left to right, while the vertices in <m>V_2</m> are <m>y_1,\dots, y_7</m> from left to right.
    </p>
    <figure xml:id="fig_flowapplications_bipmatch_network" >
        <caption>The network corresponding to a bipartite graph</caption>
        <image width="40%">
<latex-image><![CDATA[\begin{overpic}[angle=90,scale=0.65]{images/bipartite_network}
            \put(48,-6){\(S\)} \put(48,70){\(T\)}
            \put(9,13){\(x_1\)} 
            \put(85,13){\(x_6\)}
            \put(3,56){\(y_1\)}
            \put(92,56){\(y_7\)}
            \end{overpic}]]></latex-image>
        </image>
    </figure>
    <p>Now that we have translated a bipartite graph into a network, we need to address the correspondence between matchings and network flows. To turn a matching <m>M</m> into a network flow, we start by placing one unit of flow on the edges of the matching. To have a valid flow, we must also place one unit of flow on the edges from <m>S</m> to the vertices of <m>V_1</m> saturated by <m>M</m>. Since each of these vertices is incident with a single edge of <m>M</m>, the flow out of each of them is <m>1</m>, matching the flow in. Similarly, routing one unit of flow to <m>T</m> from each of the vertices of <m>V_2</m> saturated by <m>M</m> takes care of the conservation laws for the remaining vertices. To go the other direction, simply note that the full edges from <m>V_1</m> to <m>V_2</m> in an integer-valued flow is a matching. Thus, we can find a maximum matching from <m>V_1</m> to <m>V_2</m> by simply running the labeling algorithm on the associated network in order to find a maximum flow.
    </p>

    <p>In <xref ref="fig_flowapplications_initial_flow"  />, we show thick edges to show the edges with flow <m>1</m> in the flow corresponding to our guess at a matching from <xref ref="fig_flowapplications_bip_match"  />.
    </p>
    <figure xml:id="fig_flowapplications_initial_flow" >
        <caption>The flow corresponding to a matching</caption>
        <image width="40%">
<latex-image><![CDATA[\begin{overpic}[angle=90,scale=0.65]{images/bipartite_network_flow}
            \put(48,-6){\(S\)} \put(48,70){\(T\)}
            \put(9,13){\(x_1\)} 
            \put(85,13){\(x_6\)}
            \put(3,56){\(y_1\)}
            \put(92,56){\(y_7\)}
            \end{overpic}]]></latex-image>
        </image>
    </figure>
    <p>With priority sequence <m>S,T,x_1,x_2,\dots,x_6,y_1,y_2,\dots,y_7</m> replacing our usual pseudo-alphabetic order, the labeling algorithm produces the labels shown below.
    <md>
        <mrow>  S:\quad \amp (*,+,\infty)\amp    y_6:\quad \amp (x_6,+,1)</mrow>
        <mrow>  x_3:\quad \amp (S,+,1)\amp   x_1:\quad \amp (y_6,-,1)</mrow>
        <mrow>  x_5:\quad \amp (S,+,1)\amp    y_1:\quad \amp (x_1,+,1)</mrow>
        <mrow>  y_4:\quad \amp (x_3,+,1)\amp   y_2:\quad \amp  (x_1,+,1)</mrow>
        <mrow>  y_5:\quad \amp (x_3,+,1)\amp   y_3:\quad \amp (x_1,+,1)</mrow>
        <mrow>  x_6:\quad \amp (y_4,-,1)\amp    x_2:\quad \amp (y_1,-,1)</mrow>
        <mrow>  x_4:\quad \amp (y_5,-,1)\amp   T:\quad \amp (y_2,+,1)</mrow>
    </md>
    This leads us to the augmenting path <m>S,x_3,y_4,x_6,y_6,x_1,y_2,T</m>, which gives us the flow shown in <xref ref="fig_flowapplications_bipmatch_maxflow"  />.
    </p>
    <figure xml:id="fig_flowapplications_bipmatch_maxflow" >
        <caption>The augmented flow</caption>
        <image width="40%">
            <latex-image><![CDATA[\begin{overpic}[angle=90,scale=0.65]{images/bipartite_network_flow2}
            \put(48,-6){\(S\)} \put(48,70){\(T\)}
            \put(9,13){\(x_1\)} 
            \put(85,13){\(x_6\)}
            \put(3,56){\(y_1\)}
            \put(92,56){\(y_7\)}
            \end{overpic}]]></latex-image>
        </image>
    </figure>
    <p>Is this a maximum flow? Another run of the labeling algorithm produces
    <md>
        <mrow>  S:\quad \amp  (*,+,\infty)\amp   x_4:\quad \amp  (y_5,-,1)</mrow>
        <mrow>  x_5:\quad \amp  (S,+,1)\amp   y_4:\quad \amp (x_4,+,1)</mrow>
        <mrow>  y_5:\quad \amp  (x_5,+,1)\amp   x_3:\quad \amp (y_4,-,1)</mrow>
    </md>
        and then halts. Thus, the flow in <xref ref="fig_flowapplications_bipmatch_maxflow"  /> is a maximum flow.
    </p>

    <p>Now that we know we have a maximum flow, we'd like to be able to argue that the matching we've found is also maximum. After all, the boss isn't going to be happy if he later finds out that this fancy algorithm you claimed gave an optimal assignment of jobs to workers left the fifth worker (<m>x_5</m>) without a job when all six of them could have been put to work. Let's take a look at which vertices were labeled by the Ford-Fulkerson labeling algorithm on the last run. There were three vertices (<m>x_3</m>, <m>x_4</m>, and <m>x_5</m>) from <m>V_1</m> labeled, while there were only two vertices (<m>y_4</m> and <m>y_5</m>) from <m>V_2</m> labeled. Notice that <m>y_4</m> and <m>y_5</m> are the only vertices that are neighbors of <m>x_3</m>, <m>x_4</m>, or <m>x_5</m> in <m>\bfG</m>. Thus, no matter how we choose the matching edges from <m>\{x_3,x_4,x_5\}</m>, one of these vertices will be left unsaturated. Therefore, one of the workers must go without a job assignment. (In our example, it's the fifth, but it's possible to choose different edges for the matching so another one of them is left without a task.)
    </p>

    <p>The phenomenon we've just observed is not unique to our example. In fact, in <em>every</em> bipartite graph <m>\GVE</m> with <m>V=V_1\cup V_2</m> in which we cannot find a matching that saturates all the vertices of <m>V</m>, we will find a similar configuration. This is a famous theorem of Hall, which we state below.
    </p>

    <theorem xml:id="thm_flowapplications_hall">
        <title>Hall's Theorem</title>
        <statement>
            <p>Let <m>\GVE</m> be a bipartite graph with <m>V=V_1\cup V_2</m>. There is a matching which saturates all vertices of <m>V_1</m> if and only if for every subset <m>A\subseteq V_1</m>, the set <m>N\subseteq V</m> of neighbors of the vertices in <m>A</m> satisfies <m>|N|\geq |A|</m>.
            </p>
        </statement>
    </theorem>
</section>
